<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django使用MySQL后端日期不能按月过滤的问题及解决方案</title>
    <url>/2018/09/30/Django%E4%BD%BF%E7%94%A8MySQL%E5%90%8E%E7%AB%AF%E6%97%A5%E6%9C%9F%E4%B8%8D%E8%83%BD%E6%8C%89%E6%9C%88%E8%BF%87%E6%BB%A4%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>参考文档：<br><a href="https://chowyi.com/Django%E4%BD%BF%E7%94%A8MySQL%E5%90%8E%E7%AB%AF%E6%97%A5%E6%9C%9F%E4%B8%8D%E8%83%BD%E6%8C%89%E6%9C%88%E8%BF%87%E6%BB%A4%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">https://chowyi.com/Django%E4%BD%BF%E7%94%A8MySQL%E5%90%8E%E7%AB%AF%E6%97%A5%E6%9C%9F%E4%B8%8D%E8%83%BD%E6%8C%89%E6%9C%88%E8%BF%87%E6%BB%A4%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</a></p>
<span id="more"></span>

<p>在终端中，输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django项目——数据库管理</title>
    <url>/2019/03/21/Django%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>最近有一个需求。是可以通过可视化界面分别操作测试环境/生产环境的数据库。这里我使用了Django框架。在这里记录一下重点知识点&gt;.&lt;</p>
<span id="more"></span>

<p>具体需求是：</p>
<ol>
<li> 可以查看/修改数据库</li>
<li> 不同的人员有不同的权限</li>
<li> 可以查看修改历史，方便回滚</li>
</ol>
<p>我的实现方式是：</p>
<ol start="0">
<li> 开发环境：python3.7 + django2.1</li>
<li> 直接利用django的admin，以及内置权限进行操作</li>
<li> django连接多数据库</li>
<li> 通过继承django的LogEntry编写History类，从而达到记录修改历史的作用</li>
</ol>
<h2 id="多数据库"><a href="#多数据库" class="headerlink" title="多数据库"></a>多数据库</h2><p>因为需要分别操作线上和测试的数据库，所以我采用<strong>多app对应多数据库</strong>的方式。我们需要做以下工作（假设这里已经创建好了三个app）:</p>
<p><strong>需要在app的model中指定<code>app_label</code>:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceTest</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">	············</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ··············</span><br><span class="line">        app_label = <span class="string">&#x27;TestApp&#x27;</span>	<span class="comment"># 这个app_label会在Setting文件和路由中用到</span></span><br></pre></td></tr></table></figure>

<p><strong>在<code>setting.py</code>文件中添加：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;Default&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;test&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;Test&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PORT&quot;</span>: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">&#x27;online&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;Online&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PORT&quot;</span>: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DATABASE_ROUTERS = [<span class="string">&#x27;SqlManageer.database_router.DatabaseAppsRouter&#x27;</span>]</span><br><span class="line">DATABASE_APPS_MAPPING = &#123;</span><br><span class="line">    <span class="string">&#x27;TestApp&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;OnlineApp&#x27;</span>: <span class="string">&#x27;online&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>DATABASE_APPS_MAPPING</code>参数可以看出我的app对应的数据库。之前也提到过，要记录操作历史(UserHistory)，这里我没有指定UserHistory这个app对应的数据库，那么他会默认到default的数据库。这里这样设计的原因是：UserHistory需要用user_id作为外键，Django目前不支持跨数据库外键，那么就需要将UserHistory和user放到同一个数据库。</p>
<p><strong>在与工程同名的文件夹下创建<code>database_router.py</code>:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">DATABASE_MAPPING = settings.DATABASE_APPS_MAPPING</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseAppsRouter</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A router to control all database operations on models for different</span></span><br><span class="line"><span class="string">    databases.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    In case an app is not set in settings.DATABASE_APPS_MAPPING, the router</span></span><br><span class="line"><span class="string">    will fallback to the `default` database.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Settings example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    DATABASE_APPS_MAPPING = &#123;&#x27;app1&#x27;: &#x27;db1&#x27;, &#x27;app2&#x27;: &#x27;db2&#x27;&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span>(<span class="params">self, model, **hints</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;Point all read operations to the specific database.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span>(<span class="params">self, model, **hints</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Point all write operations to the specific database.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_relation</span>(<span class="params">self, obj1, obj2, **hints</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Allow any relation between apps that use the same database.&quot;&quot;&quot;</span></span><br><span class="line">        db_obj1 = DATABASE_MAPPING.get(obj1._meta.app_label)</span><br><span class="line">        db_obj2 = DATABASE_MAPPING.get(obj2._meta.app_label)</span><br><span class="line">        <span class="keyword">if</span> db_obj1 <span class="keyword">and</span> db_obj2:</span><br><span class="line">            <span class="keyword">if</span> db_obj1 == db_obj2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Django 1.7 - Django 1.11</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_migrate</span>(<span class="params">self, db, app_label, model_name=<span class="literal">None</span>, **hints</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(db, app_label, model_name, hints)</span><br><span class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> DATABASE_MAPPING.values():</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING.get(app_label) == db</span><br><span class="line">        <span class="keyword">elif</span> app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p><strong>数据库迁移</strong><br>我们可以通过指定app或数据库进行迁移：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./manage.py makemigrations 	<span class="comment"># 这个命令会对所有的数据进行预迁移</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以指定数据库进行迁移，不指定默认到default</span></span><br><span class="line">./manage.py migrate --database=test</span><br><span class="line">./manage.py migrate --database=online</span><br><span class="line"><span class="comment"># 也可以同时指定数据库和app</span></span><br><span class="line">./manage.py migrate --database=test TestApp</span><br><span class="line">./manage.py migrate --database=online OnlineApp</span><br><span class="line">./manage.py migrate UserHistor</span><br></pre></td></tr></table></figure>

<h2 id="History类编写"><a href="#History类编写" class="headerlink" title="History类编写"></a>History类编写</h2><p>通过阅读源码（<a href="http://django.contrib.admin.options.py/">django.contrib.admin.options.py</a>）可以发现，当发生增删改操作的时候，django内部都会记录日志，具体的方法是就是下面这三个方法了。可以看出，django就是通过在发生相关操作时，将操作的信息记录到LogEntry模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelAdmin</span>(<span class="params">BaseModelAdmin</span>):</span></span><br><span class="line">	    <span class="function"><span class="keyword">def</span> <span class="title">log_addition</span>(<span class="params">self, request, <span class="built_in">object</span>, message</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Log that an object has been successfully added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The default implementation creates an admin LogEntry object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> LogEntry, ADDITION</span><br><span class="line">        <span class="keyword">return</span> LogEntry.objects.log_action(</span><br><span class="line">            user_id=request.user.pk,</span><br><span class="line">            content_type_id=get_content_type_for_model(<span class="built_in">object</span>).pk,</span><br><span class="line">            object_id=<span class="built_in">object</span>.pk,</span><br><span class="line">            object_repr=<span class="built_in">str</span>(<span class="built_in">object</span>),</span><br><span class="line">            action_flag=ADDITION,</span><br><span class="line">            change_message=message,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_change</span>(<span class="params">self, request, <span class="built_in">object</span>, message</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Log that an object has been successfully changed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The default implementation creates an admin LogEntry object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> LogEntry, CHANGE</span><br><span class="line">        <span class="keyword">return</span> LogEntry.objects.log_action(</span><br><span class="line">            user_id=request.user.pk,</span><br><span class="line">            content_type_id=get_content_type_for_model(<span class="built_in">object</span>).pk,</span><br><span class="line">            object_id=<span class="built_in">object</span>.pk,</span><br><span class="line">            object_repr=<span class="built_in">str</span>(<span class="built_in">object</span>),</span><br><span class="line">            action_flag=CHANGE,</span><br><span class="line">            change_message=message,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_deletion</span>(<span class="params">self, request, <span class="built_in">object</span>, object_repr</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Log that an object will be deleted. Note that this method must be</span></span><br><span class="line"><span class="string">        called before the deletion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The default implementation creates an admin LogEntry object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> LogEntry, DELETION</span><br><span class="line">        <span class="keyword">return</span> LogEntry.objects.log_action(</span><br><span class="line">            user_id=request.user.pk,</span><br><span class="line">            content_type_id=get_content_type_for_model(<span class="built_in">object</span>).pk,</span><br><span class="line">            object_id=<span class="built_in">object</span>.pk,</span><br><span class="line">            object_repr=object_repr,</span><br><span class="line">            action_flag=DELETION,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>利用这一特点。我们可以知道，只需要app在发生增删改操作的时候，将操作信息记录到我们自己定义的History中就可以了。因此，我继承了<code>admin.ModelAdmin</code>,重写了相关操作:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewBaseAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_addition</span>(<span class="params">self, request, <span class="built_in">object</span>, message</span>):</span></span><br><span class="line">        <span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> ADDITION</span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 下面四行是为了将修改后的结果也记录到History中</span></span><br><span class="line">        req_k = request._post.<span class="built_in">dict</span>().keys()</span><br><span class="line">        model_k = [item.column.lower() <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">object</span>._meta.fields]</span><br><span class="line">        k = req_k &amp; model_k</span><br><span class="line">        model_field = &#123;item: <span class="built_in">object</span>.__dict__[item] <span class="keyword">for</span> item <span class="keyword">in</span> k&#125;</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">return</span> History.objects.log_action(</span><br><span class="line">            user_id=request.user.pk,</span><br><span class="line">            content_type_id=get_content_type_for_model(<span class="built_in">object</span>).pk,</span><br><span class="line">            object_id=<span class="built_in">object</span>.pk,</span><br><span class="line">            object_repr=<span class="built_in">str</span>(<span class="built_in">object</span>),</span><br><span class="line">            action_flag=ADDITION,</span><br><span class="line">            change_message=message,</span><br><span class="line">            **model_field</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_change</span>(<span class="params">self, request, <span class="built_in">object</span>, message</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Log that an object has been successfully changed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The default implementation creates an admin LogEntry object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> CHANGE</span><br><span class="line">        req_k = request._post.<span class="built_in">dict</span>().keys()</span><br><span class="line">        model_k = [item.column <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">object</span>._meta.fields]</span><br><span class="line">        k = req_k &amp; model_k</span><br><span class="line">        model_field = &#123;item: <span class="built_in">object</span>.__dict__[item] <span class="keyword">for</span> item <span class="keyword">in</span> k&#125;</span><br><span class="line"></span><br><span class="line">        action = History.objects.log_action(</span><br><span class="line">            user_id=request.user.pk,</span><br><span class="line">            content_type_id=get_content_type_for_model(<span class="built_in">object</span>).pk,</span><br><span class="line">            object_id=<span class="built_in">object</span>.pk,</span><br><span class="line">            object_repr=<span class="built_in">str</span>(<span class="built_in">object</span>),</span><br><span class="line">            action_flag=CHANGE,</span><br><span class="line">            change_message=message,</span><br><span class="line">            **model_field</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> action</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_deletion</span>(<span class="params">self, request, <span class="built_in">object</span>, object_repr</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Log that an object will be deleted. Note that this method must be</span></span><br><span class="line"><span class="string">        called before the deletion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The default implementation creates an admin LogEntry object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> django.contrib.admin.models <span class="keyword">import</span> DELETION</span><br><span class="line">        req_k = request._post.<span class="built_in">dict</span>().keys()</span><br><span class="line">        model_k = [item.column.lower() <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">object</span>._meta.fields]</span><br><span class="line">        k = req_k &amp; model_k</span><br><span class="line">        model_field = &#123;item: <span class="built_in">object</span>.__dict__[item] <span class="keyword">for</span> item <span class="keyword">in</span> k&#125;</span><br><span class="line">        <span class="keyword">return</span> History.objects.log_action(</span><br><span class="line">            user_id=request.user.pk,</span><br><span class="line">            content_type_id=get_content_type_for_model(<span class="built_in">object</span>).pk,</span><br><span class="line">            object_id=<span class="built_in">object</span>.pk,</span><br><span class="line">            object_repr=object_repr,</span><br><span class="line">            action_flag=DELETION,</span><br><span class="line">            **model_field</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>上述代码编写过后，我们就可以在admin中直接继承我们新写的<code>NewBaseAdmin</code>了。而我们发现，LogEntry的log_action并没有记录我们History的字段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogEntryManager</span>(<span class="params">models.Manager</span>):</span></span><br><span class="line">    use_in_migrations = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_action</span>(<span class="params">self, user_id, content_type_id, object_id, object_repr, action_flag, change_message=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(change_message, <span class="built_in">list</span>):</span><br><span class="line">            change_message = json.dumps(change_message)</span><br><span class="line">        <span class="keyword">return</span> self.model.objects.create(</span><br><span class="line">            user_id=user_id,</span><br><span class="line">            content_type_id=content_type_id,</span><br><span class="line">            object_id=<span class="built_in">str</span>(object_id),</span><br><span class="line">            object_repr=object_repr[:<span class="number">200</span>],</span><br><span class="line">            action_flag=action_flag,</span><br><span class="line">            change_message=change_message,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>因此，我们需要重新定义History的manager，就像下面这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewLogEntryManager</span>(<span class="params">models.Manager</span>):</span></span><br><span class="line">    use_in_migrations = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_action</span>(<span class="params">self, user_id, content_type_id, object_id, object_repr, action_flag, change_message=<span class="string">&#x27;&#x27;</span>, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(change_message, <span class="built_in">list</span>):</span><br><span class="line">            change_message = json.dumps(change_message)</span><br><span class="line">        <span class="keyword">return</span> self.model.objects.create(</span><br><span class="line">            user_id=user_id,</span><br><span class="line">            content_type_id=content_type_id,</span><br><span class="line">            object_id=<span class="built_in">str</span>(object_id),</span><br><span class="line">            object_repr=object_repr[:<span class="number">200</span>],</span><br><span class="line">            action_flag=action_flag,</span><br><span class="line">            change_message=change_message,</span><br><span class="line">            **kwargs</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">History</span>(<span class="params">LogEntry</span>):</span></span><br><span class="line">	·······</span><br><span class="line">	objects = NewLogEntryManager()</span><br></pre></td></tr></table></figure>

<p>这样一来，我们就可以实现，当对app进行增删改操作的时候，就会将相关操作及一些我们需要的字段记录到History中了。</p>
<h2 id="关于utime时间戳的问题"><a href="#关于utime时间戳的问题" class="headerlink" title="关于utime时间戳的问题"></a>关于utime时间戳的问题</h2><p>在定义模型时，有一个字段是:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">utime = models.DateTimeField(<span class="string">&#x27;更新时间&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>在每一次操作过后，utime都会自动更新为本次操作的时间。但是查看utime发现，总是比本地时间少8小时，我的解决办法是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>因为具体字段涉及了公司内部的字段，这里就不贴出源码了。哪里说的不清楚，希望大家多多指出～</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>python django</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下使用国内镜像安装Homebrew</title>
    <url>/2019/01/12/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85Homebrew/</url>
    <content><![CDATA[<h2 id="通用安装方式"><a href="#通用安装方式" class="headerlink" title="通用安装方式"></a>通用安装方式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="使用国内镜像安装步骤"><a href="#使用国内镜像安装步骤" class="headerlink" title="使用国内镜像安装步骤"></a>使用国内镜像安装步骤</h2><p>第一步，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install &gt;&gt; brew_install</span><br></pre></td></tr></table></figure>

<p>第二步，修改<code>brew_install</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby</span><br><span class="line"># This script installs to /usr/local only. To install elsewhere you can just</span><br><span class="line"># untar https://github.com/Homebrew/brew/tarball/master anywhere you like or</span><br><span class="line"># change the value of HOMEBREW_PREFIX.</span><br><span class="line">HOMEBREW_PREFIX = &quot;/usr/local&quot;.freeze</span><br><span class="line">HOMEBREW_REPOSITORY = &quot;/usr/local/Homebrew&quot;.freeze</span><br><span class="line">HOMEBREW_CACHE = &quot;#&#123;ENV[&quot;HOME&quot;]&#125;/Library/Caches/Homebrew&quot;.freeze</span><br><span class="line">HOMEBREW_OLD_CACHE = &quot;/Library/Caches/Homebrew&quot;.freeze</span><br><span class="line"></span><br><span class="line"># 下面这行是原始文件，将此行注释掉，换成它下面这行</span><br><span class="line">#BREW_REPO = &quot;https://github.com/Homebrew/brew&quot;.freeze	</span><br><span class="line">BREW_REPO = &quot;git://mirrors.ustc.edu.cn/brew.git&quot;.freeze</span><br><span class="line"></span><br><span class="line"># 下面这行是原始文件，将此行注释掉，换成它下面这行</span><br><span class="line">#CORE_TAP_REPO = &quot;https://github.com/Homebrew/homebrew-core&quot;.freeze</span><br><span class="line">CORE_TAP_REPO = &quot;git://mirrors.ustc.edu.cn/homebrew-core.git&quot;.freeze</span><br></pre></td></tr></table></figure>

<p>第三步，终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby ~/brew_install </span><br></pre></td></tr></table></figure>

<p>第四步，替换homebrew默认源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>

<p>第五步，替换homebrew-core源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>

<p>第六步，设置 bintray镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>brew安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的上下文管理器和with语句</title>
    <url>/2018/08/09/Python%E4%B8%AD%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8%E5%92%8Cwith%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>转载来自：<a href="https://www.cnblogs.com/ybjourney/p/8859519.html">https://www.cnblogs.com/ybjourney/p/8859519.html</a></p>
<p>Python2.5之后引入了上下文管理器（context manager），算是Python的黑魔法之一，它用于规定某个对象的使用范围。本文是针对于该功能的思考总结。</p>
<h2 id="为什么需要上下文管理器？"><a href="#为什么需要上下文管理器？" class="headerlink" title="为什么需要上下文管理器？"></a>为什么需要上下文管理器？</h2><span id="more"></span>

<p>首先，需要思索下为什么需要引入上下文管理器。<br>在正常情况下，管理各种系统资源（如文件）、数据库连接时，通常是先打开这些资源，执行完相应的业务逻辑，最后关闭资源。<br>举两个例子:</p>
<blockquote>
<ul>
<li>使用Python打开一个文件写入内容，之后需要关闭这个文件。如果不正常关闭的话可能会在文件操作时出现异常，因为系统允许你打开的文件的最大数是有限的。</li>
<li>在数据库连接时也是存在类似问题，数据库的连接算是一种比较昂贵的资源，若连接过多而没有及时关闭的话，就可能出现不能继续连接的异常错误。</li>
</ul>
</blockquote>
<p>但是，很多程序员经常会忘记关闭文件，或者关闭数据库的连接。这时候就引入了上下文管理器，它可以在你不需要该对象的时候，自动关闭它。</p>
<h2 id="上下文管理器怎么使用？"><a href="#上下文管理器怎么使用？" class="headerlink" title="上下文管理器怎么使用？"></a>上下文管理器怎么使用？</h2><p>上下文管理器的语法是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with...as...</span><br></pre></td></tr></table></figure>

<p><strong>实例：文件操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;不使用上下文管理器&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;*&quot;</span> * <span class="number">30</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;file.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> f.closed</span><br><span class="line">f.write(<span class="string">&quot;# Hello World&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span> f.closed</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;\n使用上下文管理器&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;*&quot;</span> * <span class="number">30</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;file.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span> f.closed</span><br><span class="line">    f.write(<span class="string">&#x27;# Hello Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> f.closed</span><br></pre></td></tr></table></figure>

<p>这里通过.closed比较，我们可以看到上下文管理器可以自动关闭文件，对于上下文管理器而言，有隶属于它的程序块，当隶属于它的程序块执行结束的时候（判断缩进），上下文管理器将自动关闭文件。<br>上述实例，也可以使用try…except…来实现，同样可以很直观的看到使用with…as…语句之后，代码确实相对更加简洁。</p>
<h2 id="上下文管理实现机制"><a href="#上下文管理实现机制" class="headerlink" title="上下文管理实现机制"></a>上下文管理实现机制</h2><p>因为文件对象是Python的内置对象，内置了上下文管理的特殊方法，所以它可以使用with语句。在Python中，任何对象，只要实现了上下文管理，就可以使用with语句，实现上下文管理需要通过<strong>enter</strong>和<strong>exit</strong>这两个方法来实现。<br>关于这两个方法：</p>
<ul>
<li>   enter(self)：进入该对象时调用此方法，返回值将放入with…as…语句中的as说明的变量中</li>
<li>   exit(self, type, value, tb):离开上下文管理器时调用该方法，如果有异常出现，返回False，type、value和tb将分别表示异常的类型、值和追踪信息，传递出上下文显示；如果没有异常，则三个变量的值均为None。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with 上下文管理器：</span><br><span class="line">    语法体</span><br></pre></td></tr></table></figure>

<p>当with语句遇到上下文管理器时，就会在执行语法体之前，先执行<strong>enter</strong>方法，然后再执行语法体，执行完语法体之后，执行<strong>exit</strong>方法。</p>
<h2 id="上下文管理器实现"><a href="#上下文管理器实现" class="headerlink" title="上下文管理器实现"></a>上下文管理器实现</h2><p>使用Python2.7X实现一个上下文管理器:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;实例化一个对象&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;获取该对象&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;退出该对象&quot;</span></span><br><span class="line"></span><br><span class="line">temp = Context()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> temp:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;执行体&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样，<strong>enter</strong>方法和<strong>exit</strong>方法的调用过程就很明晰。</p>
<h2 id="contextLib"><a href="#contextLib" class="headerlink" title="contextLib"></a>contextLib</h2><p>在contextlib中，提供了contextmanager装饰器，通过yield返回函数将函数分隔为两部分，yield之前的语句在<strong>enter</strong>中执行，yield之后的语句在<strong>exit</strong>中执行，简化了上下文管理器的实现方式：</p>
<p>总结：通过上下文管理器，我们可以更好的控制对象在不同区间的特性，并且可以使用with语句替代try…except方法，使得代码更加的简洁，主要的使用场景是访问资源，可以保证不管过程中是否发生错误或者异常都会执行相应的清理操作，释放出访问的资源。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>apScheduler和fastapi交互</title>
    <url>/2020/12/17/apScheduler%E5%92%8Cfastapi%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<p>参考文档:</p>
<ul>
<li><a href="https://apscheduler.readthedocs.io/en/latest/userguide.html">官方文档</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/144506204">python定时任务最强框架APScheduler详细教程</a></li>
<li><a href="https://www.cnblogs.com/zhangliang91/p/12468871.html">https://www.cnblogs.com/zhangliang91/p/12468871.html</a></li>
</ul>
<span id="more"></span>

<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>APScheduler(Advanced Python Scheduler)是一个python的任务调度器，他可以使任务定期执行，同时我们可以动态的添加或删除任务。如果我们希望任务在下次程序启动时继续执行，那么他还支持持久化任务。除此之外，他也是跨平台的。需要注意的是，APScheduler并不是一个守护进程或单独服务，他是依托于现有服务或程序运行。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install apscheduler</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poetry add apscheduler</span><br></pre></td></tr></table></figure>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;datetime.now()&#125;</span>执行了&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    scheduler = BlockingScheduler()</span><br><span class="line">    scheduler.add_job(func=job, trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">3</span>)</span><br><span class="line">    scheduler.start()</span><br></pre></td></tr></table></figure>

<p>这个栗子做了一件事：每三秒执行一次任务。<br>首先，初始化调度器，这里的BlockingScheduler是阻塞性的调度器，当调用start方法时，会阻塞当前进程；然后，向调度器中添加任务，这里的任务是job方法，每执行一次任务会打印文字；这里采用的是interval(间隔执行)的方式，每三秒执行一次</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>APScheduler具有四个基本组件：</p>
<ul>
<li><strong>triggers</strong>（触发器）：包含调度逻辑。每个作业都有自己的触发器，该触发器确定下一步应在何时运行该作业。除了其初始配置外，触发器完全是无状态的。</li>
<li><strong>job stores</strong>（任务存储器）：任务存储器是可以存储任务的地方，默认情况下任务保存在内存，也可将任务保存在各种数据库中。任务存储进去后，会进行序列化，然后也可以反序列化提取出来，继续执行。</li>
<li><strong>executors</strong>（执行器）：执行器会将任务放到进程或线程中执行，任务执行完成后，执行程序会通知调度器，然后触发一些事件</li>
<li><strong>schedulers</strong>（调度器）：任务调度器是属于整个调度的总指挥官。他会合理安排作业存储器、执行器、触发器进行工作，并进行添加和删除任务等。调度器通常是只有一个的。<br><img src="https://img-blog.csdnimg.cn/2020121715471558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h3 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h3><p>APScheduler有很多调度器，不同的调度器适合不同的环境：</p>
<ul>
<li><strong>BlockingScheduler</strong>：适用于当前进程只有这一个调度器在工作</li>
<li><strong>BackgroundScheduler</strong>：适用于在程序后台运行</li>
<li><strong>AsyncIOScheduler</strong>：适用于使用了asyncio的模块</li>
<li><strong>GeventScheduler</strong>：适用于使用了gevent的模块</li>
<li><strong>TornadoScheduler</strong>：适用于用tornado构建的应用</li>
<li><strong>TwistedScheduler</strong>：适用于用twisted构建的应用</li>
<li><strong>QtScheduler</strong>：适用于构建QT应用</li>
</ul>
<h3 id="任务存储器"><a href="#任务存储器" class="headerlink" title="任务存储器"></a>任务存储器</h3><p>任务存储器的选择取决于是否需要任务持久化。如果每次任务启动的时候都重新创建任务，那么可以使用内存存储器(MemoryJobStore)。如果需要任务持久化，可以使用和项目匹配的数据库存储器，这样即使是程序崩溃，重启后任务依旧可以继续执行。存储器可以有以下几种：</p>
<ul>
<li><strong>MemoryJobStore</strong>：任务保存在内存中</li>
<li><strong>SQLAlchemyJobStore</strong>：使用sqlalchemy作为存储框架，官方建议数据库使用PostgreSQL</li>
<li><strong>MongoDBJobStore</strong>：使用 mongodb作为存储器</li>
<li><strong>RedisJobStore</strong>：使用 redis作为存储器</li>
</ul>
<h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>执行器的选择取决于程序使用了什么框架，默认情况下使用ThreadPoolExecutor。如果任务涉及了计算密集型操作，可以考虑使用ProcessPoolExecutor。APScheduler针对不同的程序或架构，有以下几种执行器：</p>
<ul>
<li><strong>ThreadPoolExecutor</strong>：线程池执行器；</li>
<li><strong>ProcessPoolExecutor</strong>：进程池执行器；</li>
<li><strong>GeventExecutor</strong>： Gevent程序执行器；</li>
<li><strong>TornadoExecutor</strong>： Tornado程序执行器；</li>
<li><strong>TwistedExecutor</strong>： Twisted程序执行器；</li>
<li><strong>AsyncIOExecutor</strong>： asyncio程序执行器；</li>
</ul>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>APScheduler内置了三种触发器：</p>
<ul>
<li><strong>date</strong>：特定时间仅运行一次</li>
<li><strong>interval</strong>：固定时间间隔运行</li>
<li><strong>cron</strong>：某个时间周期运行</li>
</ul>
<h2 id="构建调度程序"><a href="#构建调度程序" class="headerlink" title="构建调度程序"></a>构建调度程序</h2><h3 id="构建调度器"><a href="#构建调度器" class="headerlink" title="构建调度器"></a>构建调度器</h3><p>假设构建一个使用默认存储器和默认执行器的阻塞调度器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line">scheduler = BlockingScheduler()</span><br></pre></td></tr></table></figure>

<p>通过查看源码可以发现，默认存储器使用的是MemoryJobStore，默认执行器使用的是ThreadPoolExecutor</p>
<p>除了默认的配置，APScheduler也提供了许多不同的方式来配置调度器。假设现在我们希望构造一个：</p>
<ul>
<li>   一个名为“ redis”的MemoryJobStore</li>
<li>   一个名为“ default”的RedisJobStore</li>
<li>   一个名为“ default”的ThreadPoolExecutor，其最大线程数为20</li>
<li>   一个名为“ processpool”的ProcessPoolExecutor，其最大进程数为5</li>
<li>   UTC作为调度程序的时区</li>
<li>   默认情况下，对新作业关闭合并</li>
<li>新作业的默认最大实例限制为3<br>方法一：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pytz <span class="keyword">import</span> utc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"><span class="keyword">from</span> apscheduler.jobstores.redis <span class="keyword">import</span> RedisJobStore</span><br><span class="line"><span class="keyword">from</span> apscheduler.jobstores.memory <span class="keyword">import</span> MemoryJobStore</span><br><span class="line"><span class="keyword">from</span> apscheduler.executors.pool <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jobstores = &#123;</span><br><span class="line">    <span class="string">&#x27;redis&#x27;</span>: RedisJobStore(),</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: MemoryJobStore()</span><br><span class="line">&#125;</span><br><span class="line">executors = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: ThreadPoolExecutor(<span class="number">20</span>),</span><br><span class="line">    <span class="string">&#x27;processpool&#x27;</span>: ProcessPoolExecutor(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">job_defaults = &#123;</span><br><span class="line">    <span class="string">&#x27;coalesce&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;max_instances&#x27;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">scheduler = BackgroundScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=utc)</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scheduler = BackgroundScheduler(&#123;</span><br><span class="line">    <span class="string">&#x27;apscheduler.jobstores.redis&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;redis&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;apscheduler.jobstores.default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;memory&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;apscheduler.executors.default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;apscheduler.executors.pool:ThreadPoolExecutor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_workers&#x27;</span>: <span class="string">&#x27;20&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;apscheduler.executors.processpool&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;processpool&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;max_workers&#x27;</span>: <span class="string">&#x27;5&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;apscheduler.job_defaults.coalesce&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apscheduler.job_defaults.max_instances&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apscheduler.timezone&#x27;</span>: <span class="string">&#x27;UTC&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pytz <span class="keyword">import</span> utc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"><span class="keyword">from</span> apscheduler.jobstores.redis <span class="keyword">import</span> RedisJobStore</span><br><span class="line"><span class="keyword">from</span> apscheduler.executors.pool <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">jobstores = &#123;</span><br><span class="line">    <span class="string">&#x27;redis&#x27;</span>: RedisJobStore(),</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;memory&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">executors = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;threadpool&#x27;</span>, <span class="string">&#x27;max_workers&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;processpool&#x27;</span>: ProcessPoolExecutor(max_workers=<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">job_defaults = &#123;</span><br><span class="line">    <span class="string">&#x27;coalesce&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;max_instances&#x27;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">scheduler = BackgroundScheduler()</span><br><span class="line">scheduler.configure(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=utc)</span><br></pre></td></tr></table></figure>

<h3 id="启动调度器"><a href="#启动调度器" class="headerlink" title="启动调度器"></a>启动调度器</h3><p>除了BlockingScheduler，其他调度器启动后会立即返回，继续执行程序其他操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scheduler.start()</span><br></pre></td></tr></table></figure>

<h3 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h3><p>APScheduler支持两种添加任务的方式：</p>
<ul>
<li>调用<code>add_job()</code><br>调用add_job方法之后，会返回<code>apscheduler.job.Job</code>对象，这个对象可以用来更新或删除</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scheduler.add_job(func=job, trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>   使用<code>scheduled_job()</code>装饰器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@scheduler.scheduled_job(<span class="params">trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;datetime.now()&#125;</span>执行了&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们可以在任何时候安排工作给调度器，如果添加工作的时候调度器还木有启动，那么工作会暂停，并在调度器开始工作后才开始</p>
<h3 id="删除任务"><a href="#删除任务" class="headerlink" title="删除任务"></a>删除任务</h3><ul>
<li>   调用<code>remove()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">job = scheduler.add_job(job, <span class="string">&#x27;interval&#x27;</span>, minutes=<span class="number">2</span>)</span><br><span class="line">job.remove()</span><br></pre></td></tr></table></figure>

<ul>
<li>   调用<code>remove_job()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scheduler.add_job(job, <span class="string">&#x27;interval&#x27;</span>, minutes=<span class="number">2</span>, <span class="built_in">id</span>=<span class="string">&#x27;my_job_id&#x27;</span>)</span><br><span class="line">scheduler.remove_job(<span class="string">&#x27;my_job_id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="暂停和恢复任务"><a href="#暂停和恢复任务" class="headerlink" title="暂停和恢复任务"></a>暂停和恢复任务</h3><p>暂停：</p>
<ul>
<li><code>apscheduler.job.Job.pause()</code></li>
<li><code>apscheduler.schedulers.base.BaseScheduler.pause_job()</code></li>
</ul>
<p>恢复：</p>
<ul>
<li><code>apscheduler.job.Job.resume()</code></li>
<li><code>apscheduler.schedulers.base.BaseScheduler.resume_job()</code></li>
</ul>
<h3 id="更新任务"><a href="#更新任务" class="headerlink" title="更新任务"></a>更新任务</h3><ul>
<li><code>modify_job()</code></li>
<li><code>apscheduler.job.Job.modify()</code></li>
<li><code>reschedule_job()</code></li>
<li><code>apscheduler.job.Job.reschedule()</code></li>
</ul>
<h3 id="关闭调度程序"><a href="#关闭调度程序" class="headerlink" title="关闭调度程序"></a>关闭调度程序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scheduler.shutdown()</span><br></pre></td></tr></table></figure>

<p>默认情况下，调度程序关闭其作业存储和执行程序，并等待直到所有当前正在执行的作业完成。如果不想等待，可以执行以下操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scheduler.shutdown(wait=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h2 id="APScheduler和fastapi实战"><a href="#APScheduler和fastapi实战" class="headerlink" title="APScheduler和fastapi实战"></a>APScheduler和fastapi实战</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Body</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"><span class="keyword">from</span> apscheduler.jobstores.redis <span class="keyword">import</span> RedisJobStore</span><br><span class="line"><span class="keyword">from</span> apscheduler.executors.pool <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">app = FastAPI(title=<span class="string">&#x27;fast-api&#x27;</span>)</span><br><span class="line"></span><br><span class="line">scheduler = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>(<span class="params">job_id=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;datetime.datetime.now()&#125;</span>执行了<span class="subst">&#123;job_id&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.on_event(<span class="params"><span class="string">&#x27;startup&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_scheduler</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化&quot;&quot;&quot;</span></span><br><span class="line">    redis_job_store = RedisJobStore(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line">    executor = ThreadPoolExecutor()</span><br><span class="line"></span><br><span class="line">    jobstores = &#123;</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: redis_job_store</span><br><span class="line">    &#125;</span><br><span class="line">    executors = &#123;</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: executor,</span><br><span class="line">    &#125;</span><br><span class="line">    job_defaults = &#123;</span><br><span class="line">        <span class="string">&#x27;coalesce&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;max_instance&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> scheduler</span><br><span class="line">    scheduler = BackgroundScheduler()</span><br><span class="line">    scheduler.configure(jobstores=jobstores, executors=executors, job_defaults=job_defaults)</span><br><span class="line">    scheduler.add_job(job, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;启动调度器...&quot;</span>)</span><br><span class="line">    scheduler.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/add-job&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">add_job</span>(<span class="params">job_id: <span class="built_in">str</span> = Body(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;添加job&quot;&quot;&quot;</span></span><br><span class="line">    scheduler.add_job(<span class="built_in">id</span>=job_id, func=job, args=(job_id,), trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;success!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/remove-job&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">remove_job</span>(<span class="params">job_id: <span class="built_in">str</span> = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;移除job&quot;&quot;&quot;</span></span><br><span class="line">    scheduler.remove_job(job_id)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;success!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5566</span>)</span><br></pre></td></tr></table></figure>

<p>项目启动后，可以看到调度器开始工作，并开始执行任务<br><img src="https://img-blog.csdnimg.cn/20201217155259313.png" alt="在这里插入图片描述"><br>这时添加一个job_id=1的任务，可以看到两个任务在执行</p>
<p><img src="https://img-blog.csdnimg.cn/20201217155306332.png" alt="在这里插入图片描述"><br>删除job_id=1的任务，可以看到只剩下一个任务在执行<br><img src="https://img-blog.csdnimg.cn/20201217155321258.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python apScheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>celery学习笔记（一）——celery快速入门</title>
    <url>/2018/11/07/celery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94celery%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><strong>参考文档：</strong></p>
<ul>
<li><p><a href="https://www.cnblogs.com/forward-wang/p/5970806.html">https://www.cnblogs.com/forward-wang/p/5970806.html</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/shizhengwen/p/6911043.html">http://www.cnblogs.com/shizhengwen/p/6911043.html</a></p>
</li>
</ul>
<p><strong>环境：</strong></p>
<ul>
<li><p>python： 3.7</p>
</li>
<li><p>celery： 4.2.1</p>
</li>
</ul>
<span id="more"></span>

<h2 id="什么是生产者与消费者模式"><a href="#什么是生产者与消费者模式" class="headerlink" title="什么是生产者与消费者模式"></a>什么是生产者与消费者模式</h2><p>在实际的软件开发过程中，经常会碰到如下场景：某个模块负责产生数据，这些数据由另一个模块来负责处理（此处的模块是广义的，可以是类、函数、线程、进程等）。产生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。</p>
<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过消息队列（缓冲区）来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给消息队列，消费者不找生产者要数据，而是直接从消息队列里取，消息队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。这个消息队列就是用来给生产者和消费者解耦的。</p>
<p>如图所示：</p>
<p><img src="http://static.zybuluo.com/chuxiaoyi/zxy45sv0m24dmt85rkhdyubt/image_1crk5j4k71nth1hg015vnko8jdd9.png" alt="image_1crk5j4k71nth1hg015vnko8jdd9.png-9.9kB"></p>
<p>通过这样的模式，可以解决并发的问题，而celery就有效的利用这样一个模式的框架。</p>
<h2 id="什么是celery"><a href="#什么是celery" class="headerlink" title="什么是celery"></a>什么是celery</h2><p>Celery 是一个基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理。</p>
<p>任务队列的输入是称为任务的工作单元，专用工作进程不断监视任务队列以执行新工作。</p>
<p>celery通过消息进行通信，通常使用broker（消息队列）将客户端与worker解藕。客户端向broker中添加消息，然后broker将消息传递给worker。</p>
<p>celery可以有多个worker和broker，这实现了高可用和水平扩展。</p>
<p>如图所示：</p>
<p><img src="http://static.zybuluo.com/chuxiaoyi/mbrw4uzxh97cv8tllr5awxt6/image_1crk6ab8k6b0mmsvvh1u4cve7m.png" alt="image_1crk6ab8k6b0mmsvvh1u4cve7m.png-15.1kB"></p>
<p><strong>celery的架构主要由三部分组成：</strong></p>
<ul>
<li><p>消息队列（消息中间件）：celery本身无法接收或发送消息，这个时候就需要一个中间人帮celery来完成。这个中间人就是消息中间件，也就是上面说的broker。broker包括：<a href="http://www.rabbitmq.com/documentation.html">RabbitMQ</a>,<a href="http://www.redis.net.cn/tutorial/3501.html">Redis</a>,<a href="https://www.mongodb.com/">MongoDB</a>等</p>
</li>
<li><p>worker：执行任务的基本单元。一个celery可以有多个worker。worker运行在分布式的各个系统中。</p>
</li>
<li><p>backend：用来存储任务的执行结果。celery支持很多种存储结构的方法：Redis，MongoDB，Django ORM，AMQP等</p>
</li>
</ul>
<p>如图所示：</p>
<p><img src="http://static.zybuluo.com/chuxiaoyi/togusggtlnyqudkyc1a9304l/image_1crk8hjg01a0ibd9mra5a1tel13.png" alt="image_1crk8hjg01a0ibd9mra5a1tel13.png-30.6kB"></p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>celery的架构分为三部分：broker，worker，backend</p>
<p>那么首先，需要选择一个适合我们的broker。这里会介绍rabbitMQ和redis作为broker的用法</p>
<ul>
<li><p>rabbitMQ</p>
<ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install rabbitmq</span><br></pre></td></tr></table></figure>

<p>安装后的地址在：<code>/usr/local/Cellar/</code></p>
<p>将<code>/usr/local/Cellar/rabbitmq/3.7.8/sbin</code>添加到<code>.bash_profile</code>中，便于使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/Cellar/rabbitmq/3.7.8/sbin</span><br></pre></td></tr></table></figure></li>
<li><p>启动与停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmq-server</span><br></pre></td></tr></table></figure>

<p><img src="http://static.zybuluo.com/chuxiaoyi/lmj4ijmlbm4tjmher44ili1n/image_1crkbmffqatp134q14hj1qkn11c7m.png" alt="image_1crkbmffqatp134q14hj1qkn11c7m.png-31.6kB"></p>
<p>注意，rabbimq停止的时候不要用kill命令，要用下面这个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl stop</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>redis</p>
<ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install -U &quot;celery[redis]&quot;</span><br></pre></td></tr></table></figure>

<p><a href="http://download.redis.io/releases/">redis安装包戳这里</a></p>
</li>
<li><p>启动与停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<p><img src="http://static.zybuluo.com/chuxiaoyi/8xgdv7f84vusoloaek576a4l/image_1crm0m6qe1jvuc5jnkgldk9as9.png" alt="image_1crm0m6qe1jvuc5jnkgldk9as9.png-58kB"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>下面，我们来安装celery</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install celery</span><br></pre></td></tr></table></figure>

<p>实现一个celery架构的第一步，就是需要一个celery实例。通常这个实例叫app，并且这个实例将作为一切你想在celery中做的事的入口。所以，必须保证app所在的module可以让任意一个文件导入。</p>
<p>这里我们做一个简单的示例，把所有东西都写在一个module（<a href="http://tasks.py/">tasks.py</a>）中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;pyamqp://guest@localhost//&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<p>Celery的第一个参数“tasks”是当前module的名称。只有当“<strong>name</strong> == ‘<strong>main</strong>’”的时候才能自动生成名称</p>
<p>第二个参数“broker”，指定了使用的消息中间件的url，这里使用的是rabbitmq</p>
<p>使用“@app.task”装饰的“add”，将作为任务放到任务队列中</p>
<p>运行一下，看看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure>

<p><img src="http://static.zybuluo.com/chuxiaoyi/jsxht7u3za82i3itbsd6zp3h/image_1crm304c81kuj70mjtrr0k1vk62m.png" alt="image_1crm304c81kuj70mjtrr0k1vk62m.png-71.7kB"></p>
<p>celery启动后，我们需要向celery中添加任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from tasks import add</span><br><span class="line">&gt;&gt;&gt; add.delay(1, 1)</span><br><span class="line">&lt;AsyncResult: f17075c0-f36d-44e9-87a0-df7a24d66438&gt;</span><br></pre></td></tr></table></figure>

<p><code>delay()</code>是<code>apply_async()</code>的一种快捷使用方式，用来更好的控制任务的执行</p>
<p>控制台打印了如下信息：</p>
<p><img src="http://static.zybuluo.com/chuxiaoyi/2wu91socwh0hmjn2zbczk0g0/image_1crm3ihba5v46cnjrkaag1dhr4j.png" alt="image_1crm3ihba5v46cnjrkaag1dhr4j.png-17.4kB"></p>
<p>我们可以看到，add任务已经被worker处理。</p>
<p>调用一个任务，将返回一个AsyncResult实例。这个实例可以用来检查任务的状态，从而等待任务完成并获取其返回值</p>
<p>这里我们没有设置backend，所以在通过AsyncResult实例检查任务状态时，会报错<code>AttributeError: &#39;DisabledBackend&#39; object has no attribute &#39;_get_task_meta_for&#39;</code></p>
<p>上面提到的会报错，原因是没有一个backend可以用来存储任务的状态及结果，因此，我们在上面的tasks.py中，添加backend参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;pyamqp://guest@localhost//&#x27;</span>, backend=<span class="string">&#x27;redis://localhost&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<p>重新启动celery，再次调用任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from tasks import add</span><br><span class="line">&gt;&gt;&gt; result = add.delay(1, 1)</span><br></pre></td></tr></table></figure>

<p>这时我们会发现控制台打印了和上面一样的内容</p>
<p>同时，我们通过result（这是一个AsyncResult实例）检查任务的状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.ready()</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>结果为True，证明已经执行结束，此时，我们查看结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.get()</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; result.result</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>这里我们用了两个方式去获取结果，他们的区别在于<code>get()</code>在获取到结果的时候，同时释放了资源，而<code>result</code>却没有。backend在存储和传输结果的时候，会占用资源，因此推荐使用<code>get()</code>。</p>
<p>我们的backend使用了redis来存储，那么我们去redis中看一看结果</p>
<p><img src="http://static.zybuluo.com/chuxiaoyi/ie0e8qfr716s75tpwx45qjnc/image_1crm4ercmsnj1of553jucf18bv50.png" alt="image_1crm4ercmsnj1of553jucf18bv50.png-35.5kB"></p>
<p>这样一个celery的简单入门就结束啦～～～</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery celery</tag>
      </tags>
  </entry>
  <entry>
    <title>celery学习笔记（二）——celery快速入门</title>
    <url>/2019/01/09/celery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94celery%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="在应用中使用celery"><a href="#在应用中使用celery" class="headerlink" title="在应用中使用celery"></a>在应用中使用celery</h2><p>项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proj/__init__.py</span><br><span class="line">    /celery.py</span><br><span class="line">    /tasks.py</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>proj/celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;proj&#x27;</span>,</span><br><span class="line">             broker=<span class="string">&#x27;pyamqp://guest@localhost//&#x27;</span>,</span><br><span class="line">             backend=<span class="string">&#x27;redis://localhost&#x27;</span>,</span><br><span class="line">             include=[<span class="string">&#x27;proj.tasks&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional configuration, see the application user guide.</span></span><br><span class="line">app.conf.update(</span><br><span class="line">    result_expires=<span class="number">3600</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.start()</span><br></pre></td></tr></table></figure>

<p>在这个模块中，创建一个Celery实例。其中：</p>
<ul>
<li>broker表示消息中间件</li>
<li>backend表示结果存储的地方</li>
<li>include表示worker启动时，要导入的task。只有加入到这里，worker才能找到他们。</li>
</ul>
<p>proj/tasks.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(numbers)</span><br></pre></td></tr></table></figure>

<p>使用celery命令启动worker。注意:运行启动命令时，需要保证你所在的位置在proj的上层（就是和proj同级的目录下）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A proj worker --loglevel=info</span><br></pre></td></tr></table></figure>

<p>当worker启动的时候，你可以看到这些信息：<br><img src="https://img-blog.csdnimg.cn/20190109205236392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>transport：也就是broker，就是在定义celery实例时的broker参数。或者，我们可以通过<code>-b</code>命令在运行时指定broker</li>
<li>concurrency：fork出的可以处理task的并发的worker进程数。当这些worker都在忙时，新的任务会等待直到其中一个结束。默认情况下，并发数量时cpu的数量，我们可以通过使用<code>celery worker -c</code>指定。如果任务主要是IO类型的，可以通过将进程数增加超过cpu数量的两倍，但是这样可能会降低一些性能。celery也支持使用Eventlet, Gevent在单线程中运行</li>
<li>task events：如果将它打开，celery会监控worker中发生的操作并发送监控消息（事件）。这些可用与一些监控程序，如celery 事件，Flower-实时celery监控。</li>
<li>queues：worker会从queues里消费任务。worker会被告知能从多个队列消费任务，这被用于将消息路由到指定的worker，从而可以实现优先级排序等问题。</li>
</ul>
<h2 id="在后台运行celery"><a href="#在后台运行celery" class="headerlink" title="在后台运行celery"></a>在后台运行celery</h2><p>在后台，可以利用守护进程执行<code>celery multi</code>命令开启一个或多个worker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery multi start w1 -A proj -l info</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190112182354566.png" alt="在这里插入图片描述"></p>
<p>也可以重新启动:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery  multi restart w1 -A proj -l info</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2019011218230472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>停止worker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery multi stop w1 -A proj -l info</span><br></pre></td></tr></table></figure>

<p><code>stop</code>命令是异步的，因此他不会等待全部worker都执行完才停止。如果想等待所有worker都执行完当前正在执行的任务才停止celery，可以使用<code>stopwait</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery multi stopwait w1 -A proj -l info</span><br></pre></td></tr></table></figure>

<p>注意：<code>celery multi</code>不存储有关worker的信息，因此在重新启动时需要使用相同的命令行参数。 停止时，只能使用相同的<code>pidfile</code>和<code>logfile</code>参数。默认情况下，它会在当前目录中创建pid和日志文件，以防止多个worker在彼此之上启动，不过，还是推荐将这些文件放在专用目录中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /var/run/celery</span><br><span class="line">sudo mkdir -p /var/log/celery</span><br><span class="line">sudo celery multi start w1 -A proj -l info --pidfile=/var/run/celery/%n.pid --logfile=/var/log/celery/%n%I.log</span><br></pre></td></tr></table></figure>

<p>使用multi命令可以启动多个worker，并且还有一个强大的命令行语法来为不同的worker指定参数，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery multi start 10 -A proj -l info -Q:1-3 images,video -Q:4,5 data -Q default -l:4,5 debug</span><br></pre></td></tr></table></figure>

<p>这行命令的意思是：开启10个worker，其中三个处理images和video队列的任务，两个处理data队列的任务并且日志级别为debug，剩下的worker处理default队列的任务</p>
<p><img src="https://img-blog.csdnimg.cn/2019011218225234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h2><p>可以使用<code>delay()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add.delay(2, 2)</span><br></pre></td></tr></table></figure>

<p>这个方法实际上是<code>apply_async ()</code>的另一种快捷方式，它相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add.apply_async((2, 2))</span><br></pre></td></tr></table></figure>

<p>在终端中试着调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from proj.tasks import add</span><br><span class="line">&gt;&gt;&gt; add.delay(2, 2)</span><br><span class="line">&lt;AsyncResult: 94bf8b45-9a47-4021-a306-0786aa22fbd2&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190113004740401.png" alt="在这里插入图片描述"></p>
<p>而<code>apply_async</code>可以制定一些选项，例如运行时间（倒计时），被发送到的队列等等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add.apply_async((2, 2), queue=&#x27;lopri&#x27;, countdown=10)</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，任务将被发送到名为lopri的队列，任务将在发送消息后最早10秒执行。</p>
<p>另外一种调用方式，就是直接调用<code>__call__()</code>，它会立即反悔结果，并且不发任务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add(2, 2)</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>以上三种方式都叫做celery的”Calling API”</p>
<p>每个任务调用都将被赋予唯一标识符（UUID），这是任务ID(task id)。<code>delay</code>和<code>apply_async</code>方法返回一个AsyncResult实例，该实例可用于跟踪任务执行状态。 但为此你需要启用一个backend，以便状态可以存储在某个地方。默认情况下，不会指定backend，因为不是任意一个backend都适合每一个应用。因此，在选择backend的时候，需要考虑他的优缺点。backend也不适合监控任务。</p>
<p>如果配置了backend，可以这样获取结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res = add.delay(2, 2)</span><br><span class="line">&gt;&gt;&gt; res.get(timeout=1)</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>也可以通过id属性查看task id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res.id</span><br><span class="line">&#x27;fa572be9-a077-4df0-b562-4942ef889b4c&#x27;</span><br></pre></td></tr></table></figure>

<p>如果task抛出异常，我们是可以获取到异常的，默认情况下，<code>res.get()</code>会自动把异常抛出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res = add.delay(2)</span><br><span class="line">&gt;&gt;&gt; res.get(timeout=1)</span><br></pre></td></tr></table></figure>

<p>这种情况下，会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">File &quot;/opt/devel/celery/celery/result.py&quot;, line 113, in get</span><br><span class="line">    interval=interval)</span><br><span class="line">File &quot;/opt/devel/celery/celery/backends/rpc.py&quot;, line 138, in wait_for</span><br><span class="line">    raise meta[&#x27;result&#x27;]</span><br><span class="line">TypeError: add() takes exactly 2 arguments (1 given)</span><br></pre></td></tr></table></figure>

<p>官网给出的抛出异常的点是在get之后，但是这里我发现，其实在执行到<code>res = add.delay(2)</code>的时候，就已经抛出异常了：</p>
<p><img src="https://img-blog.csdnimg.cn/20190113004759247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>如果不想抛出异常，可以指定<code>propagate</code>为<code>False</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res.get(propagate=False)</span><br></pre></td></tr></table></figure>

<p>如果想要查看任务执行的结果，必须在指向结果的对象上查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res.failed()</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; res.successful()</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>那么，它是如果知道任务执行成功或失败的呢？他会查看任务的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res.state</span><br><span class="line">&#x27;FAILURE&#x27;</span><br></pre></td></tr></table></figure>

<p>任务只能处于单个状态，但可以从多个状态转化过来。 典型任务的执行状态阶段可以是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PENDING -&gt; STARTED -&gt; SUCCESS</span><br></pre></td></tr></table></figure>

<p>STARTED状态是一种特殊状态，仅在启用<code>task_track_started</code>设置或者为任务设置了<code>@task（track_started = True）</code>选项时才会记录。</p>
<p>PENDING 状态实际上不是记录状态，而是任何未知任务ID的默认状态,从此示例中看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from proj.celery import app</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; res = app.AsyncResult(&#x27;this-id-does-not-exist&#x27;)</span><br><span class="line">&gt;&gt;&gt; res.state</span><br><span class="line">&#x27;PENDING&#x27;</span><br></pre></td></tr></table></figure>

<p>对于重试的任务，他的状态会变得复杂，例如重试了两次的任务，它是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PENDING -&gt; STARTED -&gt; RETRY -&gt; STARTED -&gt; RETRY -&gt; STARTED -&gt; SUCCESS</span><br></pre></td></tr></table></figure>

<h2 id="设计工作流"><a href="#设计工作流" class="headerlink" title="设计工作流"></a>设计工作流</h2><p>通常情况下，使用<code>delay</code>调用任务实现异步，但是有时候，需要将任务调用的签名传递给另一个进程或作为另一个方法的参数，celery称这种方式叫签名。</p>
<p>签名以一种方式包装单个任务调用的参数和其他可选参数，以便它可以传递给函数，甚至可以进行序列化和发送。</p>
<p>下面为任务创建一个签名，并传递参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add.signature((2, 2), countdown=10)</span><br><span class="line">proj.tasks.add(2, 2)</span><br></pre></td></tr></table></figure>

<p>也可以写成这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add.s(2, 2)</span><br><span class="line">proj.tasks.add(2, 2)</span><br></pre></td></tr></table></figure>

<p>另外，<code>signature</code>也可以使用<code>Calling API</code>(delay、apply_async )。不同的是，signature对象可能为任务指定了参数，例如<code>add</code>任务需要有两个参数，那么有两个参数的signature，就是完整的signature对象了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s1 = add.s(2, 2)</span><br><span class="line">&gt;&gt;&gt; res = s1.delay()</span><br><span class="line">&gt;&gt;&gt; res.get()</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>当然，也可以创建不完整的signature对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s2 = add.s(2)</span><br><span class="line">&gt;&gt;&gt; s2</span><br><span class="line">proj.tasks.add(2)</span><br></pre></td></tr></table></figure>

<p>add任务需要两个参数，但是签名对象只赋予了它一个参数，我们可以在调用任务的时候，对任务再次进行赋值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res = s2.delay(8)</span><br><span class="line">&gt;&gt;&gt; res.get()</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h2 id="signature对象的实际用处"><a href="#signature对象的实际用处" class="headerlink" title="signature对象的实际用处"></a>signature对象的实际用处</h2><p>以下这些他们本身就是signature对象，因此，他们以多种方式组合以组成复杂的工作流：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group	chain	chord</span><br><span class="line">map		starmap		chunks</span><br></pre></td></tr></table></figure>

<h4 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h4><p><code>group</code>会<strong>并行</strong>调用任务，并以列表的形式返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from celery import group</span><br><span class="line">&gt;&gt;&gt; from proj.tasks import add</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; g1 = group(add.s(i, i) for i in range(5))</span><br><span class="line">&gt;&gt;&gt; g1</span><br><span class="line">group([proj.tasks.add(0, 0), add(1, 1), add(2, 2), add(3, 3), add(4, 4)])</span><br><span class="line">&gt;&gt;&gt; res = g1()</span><br><span class="line">&gt;&gt;&gt; res.get()</span><br><span class="line">[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190113120218842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>传递部分参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g = group(add.s(i) for i in range(10))</span><br><span class="line">&gt;&gt;&gt; g(10).get()</span><br><span class="line">[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br></pre></td></tr></table></figure>

<h4 id="Chains"><a href="#Chains" class="headerlink" title="Chains"></a>Chains</h4><p><code>chain</code>会把任务链接到一起，当前一个任务完成后，会将结果传递给下一个任务继续执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from celery import chain</span><br><span class="line">&gt;&gt;&gt; from proj.tasks import add, mul</span><br><span class="line"></span><br><span class="line"># (4 + 4) * 8</span><br><span class="line">&gt;&gt;&gt; chain(add.s(4, 4) | mul.s(8))().get()</span><br><span class="line">64</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; # (? + 4) * 8</span><br><span class="line">&gt;&gt;&gt; g = chain(add.s(4) | mul.s(8))</span><br><span class="line">&gt;&gt;&gt; g(4).get()</span><br><span class="line">64</span><br></pre></td></tr></table></figure>

<p>也可以简化成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; (add.s(4, 4) | mul.s(8))().get()</span><br><span class="line">64</span><br></pre></td></tr></table></figure>

<h4 id="Chords"><a href="#Chords" class="headerlink" title="Chords"></a>Chords</h4><p><code>chord</code>是一个有回调的group：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from celery import chord</span><br><span class="line">&gt;&gt;&gt; from proj.tasks import add, xsum</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; chord((add.s(i, i) for i in range(10)), xsum.s())().get()</span><br><span class="line">90</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190113120200703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>如果将group和其他任务chain到一起，就会自动变成了chord了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; (group(add.s(i, i) for i in range(10)) | xsum.s())().get()</span><br><span class="line">90</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery celery</tag>
      </tags>
  </entry>
  <entry>
    <title>django-rest-framework文档整理——Request and Response（二）</title>
    <url>/2018/09/03/django-rest-framework%E6%96%87%E6%A1%A3%E6%95%B4%E7%90%86%E2%80%94%E2%80%94Request%20and%20Response%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>从这里开始，我们将真正开始涵盖REST框架的核心。让我们介绍几个基本构建块。</p>
<span id="more"></span>

<h1 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h1><p>REST框架引入了一个 <code>Request</code>对象 用来扩展常规 <code>HttpRequest</code> 对象，并提供更灵活的请求解析。<code>Request</code> 对象的核心功能是 <code>request.data</code> 属性，它类似于 <code>request.POST</code> ，但对于使用Web API更有用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request.POST  # Only handles form data.  Only works for &#x27;POST&#x27; method.</span><br><span class="line">request.data  # Handles arbitrary data.  Works for &#x27;POST&#x27;, &#x27;PUT&#x27; and &#x27;PATCH&#x27; methods.</span><br></pre></td></tr></table></figure>

<h1 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h1><p>REST框架还引入了一个 <code>Response</code> 对象，这是TemplateResponse的一种类型，它接受未渲染的内容并根据内容来确定返回给客户端的正确内容类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return Response(data)  # Renders to content type as requested by the client.</span><br></pre></td></tr></table></figure>

<h1 id="Status-codes"><a href="#Status-codes" class="headerlink" title="Status codes"></a>Status codes</h1><p>在视图中使用数字HTTP状态代码并不总能明显地读取数据，而且很容易忽略错误代码。REST框架为每个状态代码提供了更显式的标识符，例如状态模块中的 <code>HTTP_400_BAD_REQUEST</code> 。在整个过程中使用这些标识符是一个好主意，而不是使用数字标识符。</p>
<h1 id="包装API视图"><a href="#包装API视图" class="headerlink" title="包装API视图"></a>包装API视图</h1><p>REST框架提供了两个可用于编写API视图的装饰器。</p>
<ul>
<li><code>@api_view</code> 用于处理基于函数的视图的装饰器。</li>
<li><code>APIView</code> 类用于处理基于类的视图。</li>
</ul>
<p>这些包装器提供了一些功能，例如确保在视图中接收 <code>Request</code> 实例，并向 <code>Response</code> 对象添加上下文，以便执行内容协议。</p>
<p>包装器还提供一些行为，例如在适当的时候返回 <code>405 Method Not Allowed</code> 的响应，并且处理当错误的输入进入 <code>request.data</code>时造成的 <code>ParseError</code>异常</p>
<h1 id="组合起来"><a href="#组合起来" class="headerlink" title="组合起来"></a>组合起来</h1><p>好的，让我们继续并开始使用这些新组件来编写一些视图。</p>
<p>我们不再需要 <code>views.py</code> 中的 <code>JSONResponse</code> 类了，所以删除它。开始重构视图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>

<p>我们的实例视图是对前一个示例的改进。它更简洁一些，现在代码与我们使用Forms API非常相似。我们还使用命名的状态代码status code ，这使得响应更明确。</p>
<p>以下是 <code>views.py</code> 模块中单个snippet的视图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure>

<p>这应该都非常熟悉 - 与使用常规Django视图没有太大区别。</p>
<p>注意，我们不再显式地将请求或响应绑定到给定的content type。<code>request.data</code>可以处理传入的json请求，但也可以处理其他格式。类似的，我们将数据返回响应对象，但允许REST框架将响应渲染为正确的content type。</p>
<h1 id="向url添加可选格式后缀"><a href="#向url添加可选格式后缀" class="headerlink" title="向url添加可选格式后缀"></a>向url添加可选格式后缀</h1><p>为了利用我们的响应不再硬连接到单一内容类型的事实，让我们在API端点中添加对格式后缀的支持。使用格式后缀为我们提供了明确引用给定格式的url，这意味着我们的API能够处理诸如<code>http://example.com/api/items/4.json</code> 之类的url。</p>
<p>首先向两个视图都添加format关键字参数，如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def snippet_list(request, format=None):</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def snippet_detail(request, pk, format=None):</span><br></pre></td></tr></table></figure>

<p>现在更新 <code>snippets/urls.py</code> 文件，在现有url之外附加一组format_suffix_patterns。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^snippets/$&#x27;</span>, views.snippet_list),</span><br><span class="line">    url(<span class="string">r&#x27;^snippets/(?P&lt;pk&gt;[0-9]+)$&#x27;</span>, views.snippet_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure>

<p>我们不需要添加这些额外的url模式，但是它提供了一种简单、干净的方式来引用特定的格式。</p>
<h1 id="它看起来怎么样"><a href="#它看起来怎么样" class="headerlink" title="它看起来怎么样?"></a>它看起来怎么样?</h1><p>继续从命令行测试API，就像我们在<a href="http://www.django-rest-framework.org/tutorial/1-serialization/">教程第1部分</a>中所做的那样。一切工作都非常相似，但是我们在发送无效请求时得到了更好的错误处理。<br>我们可以像以前一样得到所有snippets的列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets/</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">...</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;title&quot;: &quot;&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;foo = \&quot;bar\&quot;\n&quot;,</span><br><span class="line">    &quot;linenos&quot;: false,</span><br><span class="line">    &quot;language&quot;: &quot;python&quot;,</span><br><span class="line">    &quot;style&quot;: &quot;friendly&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 2,</span><br><span class="line">    &quot;title&quot;: &quot;&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;print \&quot;hello, world\&quot;\n&quot;,</span><br><span class="line">    &quot;linenos&quot;: false,</span><br><span class="line">    &quot;language&quot;: &quot;python&quot;,</span><br><span class="line">    &quot;style&quot;: &quot;friendly&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我们可以通过使用Accept头来控制返回的响应的格式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets/ Accept:application/json  # Request JSON</span><br><span class="line">http http://127.0.0.1:8000/snippets/ Accept:text/html         # Request HTML</span><br></pre></td></tr></table></figure>

<p>或加上格式后缀:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets.json  # JSON suffix</span><br><span class="line">http http://127.0.0.1:8000/snippets.api   # Browsable API suffix</span><br></pre></td></tr></table></figure>

<p>类似地，我们可以使用Content-Type头来控制发送请求的格式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># POST using form data</span><br><span class="line">http --form POST http://127.0.0.1:8000/snippets/ code=&quot;print 123&quot;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 3,</span><br><span class="line">  &quot;title&quot;: &quot;&quot;,</span><br><span class="line">  &quot;code&quot;: &quot;print 123&quot;,</span><br><span class="line">  &quot;linenos&quot;: false,</span><br><span class="line">  &quot;language&quot;: &quot;python&quot;,</span><br><span class="line">  &quot;style&quot;: &quot;friendly&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># POST using JSON</span><br><span class="line">http --json POST http://127.0.0.1:8000/snippets/ code=&quot;print 456&quot;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 4,</span><br><span class="line">    &quot;title&quot;: &quot;&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;print 456&quot;,</span><br><span class="line">    &quot;linenos&quot;: false,</span><br><span class="line">    &quot;language&quot;: &quot;python&quot;,</span><br><span class="line">    &quot;style&quot;: &quot;friendly&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您向上面的 <code>http</code> 请求添加 <code>—debug</code> 切换，您将能够在请求标头中看到请求类型。</p>
<p>现在，通过访问<a href="http://127.0.0.1:8000/snippets/">http://127.0.0.1:8000/snippets/</a>，在web浏览器中打开API。</p>
<h1 id="可浏览性"><a href="#可浏览性" class="headerlink" title="可浏览性"></a>可浏览性</h1><p>因为API根据客户端请求选择响应的内容类型，所以默认情况下，当web浏览器请求该资源时，它将返回一个html格式的资源表示。这允许API返回完全web浏览的HTML表示。</p>
<p>有一个web浏览的API是一个巨大的可用性胜利，并且使开发和使用您的API更加容易。它还极大地降低了其他开发人员想要检查和使用您的API的门槛。</p>
<p>有关可浏览api特性以及如何自定义的更多信息，请参阅<a href="http://www.django-rest-framework.org/topics/browsable-api/">可浏览api</a>主题。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django rest framework django rest framework python</tag>
      </tags>
  </entry>
  <entry>
    <title>django-rest-framework文档整理——Serialization（一）</title>
    <url>/2018/08/31/django-rest-framework%E6%96%87%E6%A1%A3%E6%95%B4%E7%90%86%E2%80%94%E2%80%94Serialization%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>注意： 该笔记主要翻译自<a href="http://www.django-rest-framework.org/tutorial/1-serialization/">官方文档</a></p>
<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>首先，创建新项目</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin.py startproject tutorial</span><br><span class="line">cd tutorial</span><br></pre></td></tr></table></figure>

<p>完成后，我们可以创建一个我们将用于创建简单Web API的应用程序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py startapp snippets</span><br></pre></td></tr></table></figure>

<p>我们需要添加我们的新 <code>snippets</code> 应用和 <code>rest_framework</code> 应用 <code>INSTALLED_APPS</code> 。让我们编辑 <code>tutorial/settings.py</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    &#x27;rest_framework&#x27;,</span><br><span class="line">    &#x27;snippets.apps.SnippetsConfig&#x27;,</span><br><span class="line">) </span><br></pre></td></tr></table></figure>

<p>好的，我们已经准备好了。</p>
<h1 id="创建一个模型"><a href="#创建一个模型" class="headerlink" title="创建一个模型"></a>创建一个模型</h1><p>首先，创建一个 <code>Snippet</code> 用于存储代码片段的简单model。继续编辑 <code>snippets/models.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>((item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snippet</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = (<span class="string">&#x27;created&#x27;</span>,)</span><br></pre></td></tr></table></figure>

<p>我们还需要为我们的代码段模型创建初始迁移，并首次同步数据库。(这里使用的是默认的sqlite)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py makemigrations snippets</span><br><span class="line">./manage.py migrate</span><br></pre></td></tr></table></figure>

<h1 id="创建一个Serializer类"><a href="#创建一个Serializer类" class="headerlink" title="创建一个Serializer类"></a>创建一个Serializer类</h1><p>我们需要做的第一件事就是提供一个序列化和反序列化 <code>snippet</code> 实例的方法，并把它放到例如 <code>json</code> 中。我们可以通过声明与Django表单非常相似的序列化器来完成此操作。在 <code>snippets</code> 名为的目录中创建一个文件 <code>serializers.py</code> 并添加以下内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">&#x27;base_template&#x27;</span>: <span class="string">&#x27;textarea.html&#x27;</span>&#125;)</span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Create and return a new `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Update and return an existing `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">&#x27;title&#x27;</span>, instance.title)</span><br><span class="line">        instance.code = validated_data.get(<span class="string">&#x27;code&#x27;</span>, instance.code)</span><br><span class="line">        instance.linenos = validated_data.get(<span class="string">&#x27;linenos&#x27;</span>, instance.linenos)</span><br><span class="line">        instance.language = validated_data.get(<span class="string">&#x27;language&#x27;</span>, instance.language)</span><br><span class="line">        instance.style = validated_data.get(<span class="string">&#x27;style&#x27;</span>, instance.style)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>

<p>serializer类定义了序列化/反序列化的字段。<code>create()</code> 和 <code>update()</code> 方法定义了在调用 <code>serializer.save()</code> 时实例如何被创建或修改</p>
<p>serializer类和django <code>Form</code> 类很相似，并且在各个字段上包含类似的验证标志，例如 <code>required</code> , <code>max_length</code> 和 <code>default</code>。</p>
<p>字段标志还可以控制在某些情况下应该如何显示序列化程序，例如在渲染HTML时。<code>&#123;&#39;base_template&#39;: &#39;textarea.html&#39;&#125;</code> 相当于在django <code>Form</code>类中使用 <code>widget=widgets.Textarea</code> 。这对于控制可浏览API的显示方式特别有用，我们将在本教程后面看到。</p>
<p>我们实际上也可以通过使用 <code>ModelSerializer</code> 类来节省一些时间，我们稍后会看到，但是现在我们先保持我们定义的serializer</p>
<h1 id="使用Serializers"><a href="#使用Serializers" class="headerlink" title="使用Serializers"></a>使用Serializers</h1><p>在进一步深入之前，我们将熟悉如何使用新的Serializer类。让我们进入Django shell。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>

<p>好的，一旦我们完成了一些导入，让我们创建几个代码片段来处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">&#x27;foo = &quot;bar&quot;\n&#x27;</span>)</span><br><span class="line">snippet.save()</span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">&#x27;print &quot;hello, world&quot;\n&#x27;</span>)</span><br><span class="line">snippet.save()</span><br></pre></td></tr></table></figure>

<p>我们现在有几个snippet实例可供使用。我们来看看序列化其中一个实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">serializer = SnippetSerializer(snippet)</span><br><span class="line">serializer.data</span><br><span class="line"># &#123;&#x27;id&#x27;: 2, &#x27;title&#x27;: u&#x27;&#x27;, &#x27;code&#x27;: u&#x27;print &quot;hello, world&quot;\n&#x27;, &#x27;linenos&#x27;: False, &#x27;language&#x27;: u&#x27;python&#x27;, &#x27;style&#x27;: u&#x27;friendly&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>此时我们已将model实例转换为Python自然数据类型。为了完成序列化过程，我们将数据渲染到 <code>json</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content = JSONRenderer().render(serializer.data)</span><br><span class="line">content</span><br><span class="line"># &#x27;&#123;&quot;id&quot;: 2, &quot;title&quot;: &quot;&quot;, &quot;code&quot;: &quot;print \\&quot;hello, world\\&quot;\\n&quot;, &quot;linenos&quot;: false, &quot;language&quot;: &quot;python&quot;, &quot;style&quot;: &quot;friendly&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>反序列化是类似的。首先，我们将流解析为Python数据类型…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.six <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">stream = BytesIO(content)</span><br><span class="line">data = JSONParser().parse(stream)</span><br></pre></td></tr></table></figure>

<p>…然后我们将解析后的数据类型还原为完全填充的对象实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">serializer = SnippetSerializer(data=data)</span><br><span class="line">serializer.is_valid()</span><br><span class="line"># True</span><br><span class="line">serializer.validated_data</span><br><span class="line"># OrderedDict([(&#x27;title&#x27;, &#x27;&#x27;), (&#x27;code&#x27;, &#x27;print &quot;hello, world&quot;\n&#x27;), (&#x27;linenos&#x27;, False), (&#x27;language&#x27;, &#x27;python&#x27;), (&#x27;style&#x27;, &#x27;friendly&#x27;)])</span><br><span class="line">serializer.save()</span><br><span class="line"># &lt;Snippet: Snippet object&gt;</span><br></pre></td></tr></table></figure>

<p>请注意API与表单的相似程度。当我们开始编写使用序列化器的视图时，相似性应该变得更加明显。</p>
<p>我们还可以序列化querysets而不是model实例。为此，我们只需在序列化类中添加参数 <code>many=True</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">serializer = SnippetSerializer(Snippet.objects.all(), many=True)</span><br><span class="line">serializer.data</span><br><span class="line"># [OrderedDict([(&#x27;id&#x27;, 1), (&#x27;title&#x27;, u&#x27;&#x27;), (&#x27;code&#x27;, u&#x27;foo = &quot;bar&quot;\n&#x27;), (&#x27;linenos&#x27;, False), (&#x27;language&#x27;, &#x27;python&#x27;), (&#x27;style&#x27;, &#x27;friendly&#x27;)]), OrderedDict([(&#x27;id&#x27;, 2), (&#x27;title&#x27;, u&#x27;&#x27;), (&#x27;code&#x27;, u&#x27;print &quot;hello, world&quot;\n&#x27;), (&#x27;linenos&#x27;, False), (&#x27;language&#x27;, &#x27;python&#x27;), (&#x27;style&#x27;, &#x27;friendly&#x27;)]), OrderedDict([(&#x27;id&#x27;, 3), (&#x27;title&#x27;, u&#x27;&#x27;), (&#x27;code&#x27;, u&#x27;print &quot;hello, world&quot;&#x27;), (&#x27;linenos&#x27;, False), (&#x27;language&#x27;, &#x27;python&#x27;), (&#x27;style&#x27;, &#x27;friendly&#x27;)])]</span><br></pre></td></tr></table></figure>

<h1 id="使用ModelSerializers"><a href="#使用ModelSerializers" class="headerlink" title="使用ModelSerializers"></a>使用ModelSerializers</h1><p><code>SnippetSerializer</code> 类复制了很多信息，这些都包含在 <code>Snippet</code> 模型中。如果我们能够使代码更简洁，那将是很好的。</p>
<p>与Django提供 <code>Form</code> 类和 <code>ModelForm</code> 类的方式相同，REST框架包括 <code>Serializer</code> 类和 <code>ModelSerializer</code> 类。</p>
<p>让我们看看使用 <code>ModelSerializer</code> 类重构我们的序列化程序。再次打开 <code>snippets/serializers.py</code> 文件，并使用以下内容替换 <code>SnippetSerializer</code> 类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>序列化程序具有的一个不错的属性是，您可以通过打印其对象来检查序列化程序实例中的所有字段。打开Django shell <code>python manage.py shell</code> ，然后尝试以下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from snippets.serializers import SnippetSerializer</span><br><span class="line">serializer = SnippetSerializer()</span><br><span class="line">print(repr(serializer))</span><br><span class="line"># SnippetSerializer():</span><br><span class="line">#    id = IntegerField(label=&#x27;ID&#x27;, read_only=True)</span><br><span class="line">#    title = CharField(allow_blank=True, max_length=100, required=False)</span><br><span class="line">#    code = CharField(style=&#123;&#x27;base_template&#x27;: &#x27;textarea.html&#x27;&#125;)</span><br><span class="line">#    linenos = BooleanField(required=False)</span><br><span class="line">#    language = ChoiceField(choices=[(&#x27;Clipper&#x27;, &#x27;FoxPro&#x27;), (&#x27;Cucumber&#x27;, &#x27;Gherkin&#x27;), (&#x27;RobotFramework&#x27;, &#x27;RobotFramework&#x27;), (&#x27;abap&#x27;, &#x27;ABAP&#x27;), (&#x27;ada&#x27;, &#x27;Ada&#x27;)...</span><br><span class="line">#    style = ChoiceField(choices=[(&#x27;autumn&#x27;, &#x27;autumn&#x27;), (&#x27;borland&#x27;, &#x27;borland&#x27;), (&#x27;bw&#x27;, &#x27;bw&#x27;), (&#x27;colorful&#x27;, &#x27;colorful&#x27;)...</span><br></pre></td></tr></table></figure>

<p>重要的是要记住 <code>ModelSerializer</code> 类没有做任何特别神奇的事情，它们只是创建序列化程序类的快捷方式：</p>
<ul>
<li>自动确定字段集。</li>
<li><code>create()</code> 和 <code>update()</code>方法的简单默认实现。</li>
</ul>
<h1 id="使用我们的Serializer编写常规Django视图"><a href="#使用我们的Serializer编写常规Django视图" class="headerlink" title="使用我们的Serializer编写常规Django视图"></a>使用我们的Serializer编写常规Django视图</h1><p>让我们看看如何使用我们的新Serializer类编写一些API视图。目前我们不会使用任何REST框架的其他功能，我们只会将视图写为常规Django视图。<br>编辑 <code>snippets/views.py</code>文件，然后添加以下内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br></pre></td></tr></table></figure>

<p>我们API的核心是一个支持列出所有存在的snippets，或创建一个新snippets的视图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br></pre></td></tr></table></figure>

<p>请注意，因为我们希望能够从没有CSRF令牌的客户端POST到此视图，所以我们需要将视图标记为 <code>csrf_exempt</code> 。这不是您通常想要做的事情，REST框架视图实际上使用的行为比这更明智，但它现在可以用于我们的目的</p>
<p>我们还需要一个与单个snippet相对应的视图，并可用于检索，更新或删除代码段。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">204</span>)</span><br></pre></td></tr></table></figure>

<p>最后，我们需要链接这些视图。创建 <code>snippets/urls.py</code> 文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^snippets/$&#x27;</span>, views.snippet_list),</span><br><span class="line">    url(<span class="string">r&#x27;^snippets/(?P&lt;pk&gt;[0-9]+)/$&#x27;</span>, views.snippet_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我们还需要链接tutorial/urls.py文件中的根urlconf ，以包含我们的snippet应用的URL。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^&#x27;</span>, include(<span class="string">&#x27;snippets.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>值得注意的是，目前还有一些我们没有正确处理的边缘情况。如果我们发送错误的json，或者如果使用视图无法处理的方法发出请求，那么我们最终将得到500“服务器错误”响应。不过，现在这样做。</p>
<h1 id="测试我们对Web-API的第一次尝试"><a href="#测试我们对Web-API的第一次尝试" class="headerlink" title="测试我们对Web API的第一次尝试"></a>测试我们对Web API的第一次尝试</h1><p>现在我们启动服务器<br>退出shell。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quit()</span><br></pre></td></tr></table></figure>

<p>并启动django服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py runserver</span><br><span class="line"></span><br><span class="line">Validating models...</span><br><span class="line"></span><br><span class="line">0 errors found</span><br><span class="line">Django version 1.11, using settings &#x27;tutorial.settings&#x27;</span><br><span class="line">Development server is running at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>

<p>在另一个终端窗口中，我们可以测试服务器。</p>
<p>我们可以使用<a href="https://curl.haxx.se/">curl</a>或<a href="https://github.com/jakubroztocil/httpie#installation">httpie</a>测试我们的API 。Httpie是一个用Python编写的用户友好的http客户端。我们安装一下吧。</p>
<p>您可以使用pip安装httpie：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install httpie</span><br></pre></td></tr></table></figure>

<p>最后，我们可以获取所有snippets的列表信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets/</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">...</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;title&quot;: &quot;&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;foo = \&quot;bar\&quot;\n&quot;,</span><br><span class="line">    &quot;linenos&quot;: false,</span><br><span class="line">    &quot;language&quot;: &quot;python&quot;,</span><br><span class="line">    &quot;style&quot;: &quot;friendly&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 2,</span><br><span class="line">    &quot;title&quot;: &quot;&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;print \&quot;hello, world\&quot;\n&quot;,</span><br><span class="line">    &quot;linenos&quot;: false,</span><br><span class="line">    &quot;language&quot;: &quot;python&quot;,</span><br><span class="line">    &quot;style&quot;: &quot;friendly&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>或者我们可以通过引用其id来获取特定snippet：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets/2/</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 2,</span><br><span class="line">  &quot;title&quot;: &quot;&quot;,</span><br><span class="line">  &quot;code&quot;: &quot;print \&quot;hello, world\&quot;\n&quot;,</span><br><span class="line">  &quot;linenos&quot;: false,</span><br><span class="line">  &quot;language&quot;: &quot;python&quot;,</span><br><span class="line">  &quot;style&quot;: &quot;friendly&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，您可以通过在Web浏览器中访问这些URL来显示相同​​的json。</p>
<h1 id="我们现在在哪"><a href="#我们现在在哪" class="headerlink" title="我们现在在哪"></a>我们现在在哪</h1><p>到目前为止我们做得还不错，我们有一个序列化API，感觉非常类似于Django的Forms API，以及一些常规的Django视图。</p>
<p>我们的API视图目前没有做任何特别特别的事情，除了提供json响应之外，还有一些我们仍想清理的错误处理边缘情况，但它是一个正常运行的Web API。</p>
<p>我们将在本教程的第2部分中看到如何开始改进。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django django rest</tag>
      </tags>
  </entry>
  <entry>
    <title>django项目开发实战——博客(三)</title>
    <url>/2019/01/09/django%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2(%E4%B8%89)/</url>
    <content><![CDATA[<p>经过好几版的修改，终于变成了现在这个样子（咳咳。）网站可以<a href="http://chuxiaoyi.cn/">戳这里</a>，欢迎大家多提意见哦～</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/20190109171946399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在之前的基础上，做了以下增加：</p>
<h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p>评论功能依旧用了渲染的方式，加了一些原生js控制css样式。</p>
<p>评论框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;pure-form comment&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;comment:comment&#x27; pk=post.id %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;pure-group&quot;</span>&gt;</span></span><br><span class="line">        昵称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;pure-input-1-4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment-name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;昵称&quot;</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;pure-input-1-3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment-email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;留下邮箱，可以收到回复提醒哦～&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;comment-content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;想对作者说点什么。。。&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;show_person_info(this)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;tip_comment&quot;</span>&gt;</span>支持markdown格式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;pure-button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>评论展示区域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for comment in comment_list %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;comment-list &quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;comment-li first-comment&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;show_reply(this)&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">onmouseleave</span>=<span class="string">&quot;hidden_replay(this)&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; comment.name &#125;&#125;：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;reply&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;javascript:void(0);&#x27;</span> <span class="attr">onclick</span>=<span class="string">&quot;show_replyform(this)&quot;</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-info&quot;</span>&gt;</span>&#123;&#123; comment.text | safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;pure-form reply-form&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reply-form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;comment:comment&#x27; pk=post.id %&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;reply_to&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; comment.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;reply_name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; comment.name &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;root_to&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; comment.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;reply_email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; comment.email &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;pure-group&quot;</span>&gt;</span></span><br><span class="line">                   昵称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;pure-input-1-4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment-name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;昵称&quot;</span>&gt;</span></span><br><span class="line">                   <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                   邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;pure-input-1-3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment-email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">placeholder</span>=<span class="string">&quot;留下邮箱，可以收到回复提醒哦～&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;comment-content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;hidden_replyform(this)&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">placeholder</span>=<span class="string">&quot;想对作者说点什么。。。&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-div&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;tip_comment&quot;</span>&gt;</span>支持markdown格式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;pure-button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       &#123;% for reply in comment.replies %&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;comment-li reply-comment&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;show_reply(this)&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">onmouseleave</span>=<span class="string">&quot;hidden_replay(this)&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; reply.name &#125;&#125;回复&#123;&#123; reply.reply_name &#125;&#125;: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;reply&quot;</span> <span class="attr">href</span>=<span class="string">&#x27;javascript:void(0);&#x27;</span> <span class="attr">onclick</span>=<span class="string">&quot;show_replyform(this)&quot;</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-info&quot;</span>&gt;</span>&#123;&#123; reply.text | safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;pure-form reply-form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;comment:comment&#x27; pk=post.id %&#125;&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;reply_to&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; reply.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;reply_name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; reply.name &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;root_to&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; comment.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">name</span>=<span class="string">&quot;reply_email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; reply.email &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;pure-group&quot;</span>&gt;</span></span><br><span class="line">                       昵称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;pure-input-1-4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment-name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">placeholder</span>=<span class="string">&quot;昵称&quot;</span>&gt;</span></span><br><span class="line">                       <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                       邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;pure-input-1-3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment-email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">placeholder</span>=<span class="string">&quot;留下邮箱，可以收到回复提醒哦～&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;comment-content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;hidden_replyform(this)&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">placeholder</span>=<span class="string">&quot;想对作者说点什么。。。&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-div&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;tip_comment&quot;</span>&gt;</span>支持markdown格式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;pure-button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       &#123;% endfor %&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>comment/models.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    email = models.EmailField(max_length=<span class="number">50</span>)</span><br><span class="line">    website = models.URLField(blank=<span class="literal">True</span>)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    created_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    post = models.ForeignKey(<span class="string">&#x27;Post.Post&#x27;</span>, on_delete=<span class="literal">True</span>)  <span class="comment"># 一篇文章有多个评论</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评论</span></span><br><span class="line">    reply_to = models.IntegerField(verbose_name=<span class="string">&quot;回复的哪条评论&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    reply_name = models.CharField(verbose_name=<span class="string">&quot;回复的哪个人&quot;</span>, max_length=<span class="number">50</span>, default=<span class="literal">None</span>)</span><br><span class="line">    reply_email = models.EmailField(verbose_name=<span class="string">&quot;被回复的邮箱&quot;</span>, max_length=<span class="number">50</span>, default=<span class="string">&#x27;chuxiaoyi@chuxiaoyi@cn&#x27;</span>)</span><br><span class="line">    root_to = models.IntegerField(verbose_name=<span class="string">&quot;回复的是哪个主评论&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-created_time&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>celery目前已经完成支持django了，原始文档<a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html">戳这里</a>。我主要在评论区回复邮件和增加pv（页面访问量）使用了异步。</p>
<p>首先，在和项目同名的包下的创建<code>celery.py</code>(与settings.py同级)文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the default Django settings module for the &#x27;celery&#x27; program.</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;MySite.settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;MySite&#x27;</span>, broker=<span class="string">&#x27;redis://127.0.0.1:6379/3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using a string here means the worker doesn&#x27;t have to serialize</span></span><br><span class="line"><span class="comment"># the configuration object to child processes.</span></span><br><span class="line"><span class="comment"># - namespace=&#x27;CELERY&#x27; means all celery-related configuration keys</span></span><br><span class="line"><span class="comment">#   should have a `CELERY_` prefix.</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load task modules from all registered Django app configs.</span></span><br><span class="line">app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Request: &#123;0!r&#125;&#x27;</span>.<span class="built_in">format</span>(self.request))</span><br></pre></td></tr></table></figure>

<p>并且。在和celery.py同级的<code>__init__.py</code>中添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This will make sure the app is always imported when</span></span><br><span class="line"><span class="comment"># Django starts so that shared_task will use this app.</span></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">&#x27;celery_app&#x27;</span>,)</span><br></pre></td></tr></table></figure>

<p>然后，在需要使用异步的功能所在app中添加<code>tasks.py</code>。在这里，我加在了<code>Post</code>和<code>comment</code>里：</p>
<p>Post/tasks.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_pv</span>(<span class="params">post_id</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    增加页面访问量</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    Post.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=post_id).update(views=F(<span class="string">&#x27;views&#x27;</span>) + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>comment/tasks.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_send_mail</span>(<span class="params">email, text, post_pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    异步发送信息，告知被回复者有人评论</span></span><br><span class="line"><span class="string">    :param email:</span></span><br><span class="line"><span class="string">    :param text:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    title = <span class="string">&quot;邮箱发送test&quot;</span></span><br><span class="line">    msg = <span class="string">&quot;收到回复：&quot;</span> + text + \</span><br><span class="line">          <span class="string">&quot;\n跳转到www.chuxiaoyi.cn/detail/post-&#123;&#125;/查看&quot;</span>.<span class="built_in">format</span>(post_pk)</span><br><span class="line">    from_email = settings.EMAIL_HOST_USER</span><br><span class="line">    recievers = [email, ]</span><br><span class="line">    <span class="built_in">print</span>(email)</span><br><span class="line">    send_mail(title, msg, from_email, recievers, fail_silently=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>写好之后，在views.py中直接调用即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">async_send_mail.delay(comment.reply_email, comment.text, pk)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_pv.delay(pk)</span><br></pre></td></tr></table></figure>

<h2 id="部署：通过supervisor管理celery"><a href="#部署：通过supervisor管理celery" class="headerlink" title="部署：通过supervisor管理celery"></a>部署：通过supervisor管理celery</h2><p>安装supervisor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure>

<p>添加celery配置，在<code>/etc/supervisor/conf.d</code>文件夹下，创建<code>celery.conf</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:celery]</span><br><span class="line"></span><br><span class="line">#启动命令入口</span><br><span class="line">command=/root/.pyenv/shims/celery worker -A MySite --loglevel=info</span><br><span class="line"></span><br><span class="line"># 命令程序所在目录</span><br><span class="line">directory=/home/BlogWebsite</span><br><span class="line"></span><br><span class="line"># 运行命令的用户名</span><br><span class="line">user=root</span><br><span class="line"></span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stdout_logfile=/var/log/celery/blog_comment_mail_worker.log</span><br><span class="line">stderr_logfile=/var/log/celery/blog_comment_mail_worker.log</span><br></pre></td></tr></table></figure>

<p>后台运行celery</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo supervisorctl start celery</span><br><span class="line"></span><br><span class="line">sudo supervisorctl stop celery</span><br><span class="line"></span><br><span class="line">sudo supervisorctl restart celery</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django celery django</tag>
      </tags>
  </entry>
  <entry>
    <title>django项目开发实战——博客(二)</title>
    <url>/2018/12/18/django%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2(%E4%BA%8C)/</url>
    <content><![CDATA[<p>参考文档：<br>- <a href="https://cloud.tencent.com/developer/article/1099709">Django 博客使用 Markdown 自动生成文章目录</a><br>- <a href="https://www.zmrenwu.com/post/45/">Django Haystack 全文检索与关键词高亮</a></p>
<p>自从做了之前的<a href="https://blog.csdn.net/weixin_40156487/article/details/81512807">django项目开发实战——博客</a>之后，一直没有继续做下去。现在终于有时间把后面的笔记补起来了！(虽然还是一个很简陋滴= =)</p>
<span id="more"></span>

<p>git地址：<a href="https://github.com/ChuXiaoYi/BlogWebSite/tree/test">https://github.com/ChuXiaoYi/BlogWebSite/tree/test</a></p>
<p>先放图：<br><img src="https://img-blog.csdnimg.cn/2018121912245131" alt="image_1cv08semaqaa1d981p161p4n20km.png-164.9kB"></p>
<p><img src="https://img-blog.csdnimg.cn/2018121912245155" alt="image_1cv091rb08sr1d3rvoj1vegm621j.png-234.6kB"></p>
<h2 id="列表页"><a href="#列表页" class="headerlink" title="列表页"></a>列表页</h2><p>页面是扒的<a href="https://templatemag.com/blog/">这个地址</a>，然后做了一些修改</p>
<p>列表页主要说明一下<strong>分页</strong>和<strong>flash</strong>插件</p>
<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>判断是否有上一页下一页需要用<code>paginator</code>处理过的<code>post_list</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">view.py</span><br><span class="line"></span><br><span class="line">limit = <span class="number">3</span></span><br><span class="line">paginator = Paginator(post, limit)</span><br><span class="line">page = request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">result = paginator.page(page)</span><br><span class="line">context = &#123;</span><br><span class="line">    <span class="string">&quot;post_list&quot;</span>: result,</span><br><span class="line">    <span class="string">&quot;page&quot;</span>: page,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">list.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line">        &#123;% if post_list.has_previous %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;previous&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; post_list.previous_page_number &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;larr;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Newer<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;previous disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;larr;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                Newer<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% if post_list.has_next %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; post_list.next_page_number &#125;&#125;&quot;</span>&gt;</span>Older <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;rarr;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Older <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;rarr;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="flash插件"><a href="#flash插件" class="headerlink" title="flash插件"></a>flash插件</h4><p>这是一个国际友人写的一个js脚本。放到页面中可以直接用。这里我把它处理成html代码直接放到页面中了。<a href="http://chabudai.org/blog/?s=honehoneclock">原地址戳这里</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">codebase</span>=<span class="string">&quot;http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">id</span>=<span class="string">&quot;honehoneclock&quot;</span> <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;allowScriptAccess&quot;</span> <span class="attr">value</span>=<span class="string">&quot;always&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;movie&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">value</span>=<span class="string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.swf&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;quality&quot;</span> <span class="attr">value</span>=<span class="string">&quot;high&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;bgcolor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#ffffff&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;wmode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;transparent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;play&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">wmode</span>=<span class="string">&quot;transparent&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">src</span>=<span class="string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.swf&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#ffffff&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">name</span>=<span class="string">&quot;honehoneclock&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">allowscriptaccess</span>=<span class="string">&quot;always&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">pluginspage</span>=<span class="string">&quot;http://www.macromedia.com/go/getflashplayer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2018121912245176" alt="image_1cv0acqik1534vs31h8s1gs91ts53q.png-12kB"></p>
<p>如果想把背景改为透明的，修改<code>http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.swf</code>为<code>http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf</code>就可以啦～</p>
<h2 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h2><p>这里主要有说明两个：<code>markdown生成目录</code>和<code>markdown高亮</code></p>
<ol>
<li><pre><code>首先，安装第三方包
</code></pre>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install mardkown</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><pre><code>在`view.py`中导入第三方包，并修改代码为：
</code></pre>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md = markdown.Markdown(extensions=[</span><br><span class="line">            <span class="string">&#x27;markdown.extensions.extra&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;markdown.extensions.codehilite&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;markdown.extensions.toc&#x27;</span>,</span><br><span class="line">        ])</span><br><span class="line">post.body = md.convert(post.body)</span><br><span class="line"></span><br><span class="line">comment_list = Comment.objects.<span class="built_in">filter</span>(post__id=pk)</span><br><span class="line"></span><br><span class="line">context = &#123;</span><br><span class="line">    <span class="string">&#x27;post&#x27;</span>: post,</span><br><span class="line">    <span class="string">&#x27;toc&#x27;</span>: md.toc,</span><br><span class="line">    <span class="string">&#x27;comment_list&#x27;</span>: comment_list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意:这里使用的是<code>Markdown</code>实例化一个对象！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;markdown.extensions.toc&#x27;</span>,</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;toc&#x27;</span>: md.toc,</span><br></pre></td></tr></table></figure>

<p>如果想要自动生成目录，一定要写这两个！</p>
<p>但是如果我们点击目录，发现url变得很不美观，接下来我们来优化一下</p>
<p>将<code>markdown.extensions.toc</code>改为<code>TocExtension(slugify=slugify)</code>，但是在这之前，不要忘记引入两个必要的包<code>from django.utils.text import slugify</code>和<code>from markdown.extensions.toc import TocExtension</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md = markdown.Markdown(extensions=[</span><br><span class="line">        <span class="string">&#x27;markdown.extensions.extra&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;markdown.extensions.codehilite&#x27;</span>,</span><br><span class="line">        TocExtension(slugify=slugify),</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>

<p><code>TocExtension</code>在实例化时其<code>slugify</code>参数可以接受一个函数作为参数，这个函数将被用于处理标题的锚点值。Markdown内置的处理方法不能处理中文标题，所以我们使用了<code>django.utils.text</code>中的<code>slugify</code>方法，该方法可以很好地处理中文.</p>
<p>现在在看就可以发现，url变得好看多了<br><img src="https://img-blog.csdnimg.cn/20181219111501584.png" alt="在这里插入图片描述"></p>
<p>但是，如果只是这样的话，并不能实现代码的高亮。接下来我们还需要做一些事情。</p>
<ol start="3">
<li><pre><code>安装Pygments
</code></pre>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install Pygments </span><br></pre></td></tr></table></figure>

<p>运行<code>pygmentize \-S default \-f html \-a .codehilite &gt; code.css</code>命令,将<code>code.css</code>放到你的静态文件目录下，并在html的头部添加<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static 'Post/css/code.css' %&#125;&quot;&gt;</code>(你的路径可能和我的不一样，不要错啦！)</p>
<p>最后，千万不要忘记添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;markdown.extensions.codehilite&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>如果步骤正确，你会看到这样滴：<br><img src="https://img-blog.csdnimg.cn/20181218183108452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>我很喜欢CSDN可以隐藏过长的文章。我也实现了一个<br><img src="https://img-blog.csdnimg.cn/20181218183358167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-article-box text-center&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hide-article-box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn-readmore&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btnReadMore()&quot;</span>&gt;</span>阅读更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> readMore = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn-readmore&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> hideArticleBox = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hide-article-box&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;entry-content&#x27;</span>);</span><br><span class="line">        readMore.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            content.style.height = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">            hideArticleBox.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><p>对于一个搜索引擎来说，至少应该能够根据用户的搜索关键词对搜索结果进行排序以及高亮关键字。这里使用的是<code>django-haystack</code>实现这些特性。</p>
<p>django-haystack 是一个专门提供搜索功能的 django 第三方应用，它支持 Solr、Elasticsearch、Whoosh、Xapian 等多种搜索引擎，配合著名的中文自然语言处理库<code>jieba</code>分词，就可以为我们的博客提供一个效果不错的博客文章搜索系统。</p>
<p><strong>首先，安装依赖包：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install whoosh django-haystack jieba</span><br></pre></td></tr></table></figure>

<p>注意：不要同时安装<code>haystack</code>和<code>django-haystack</code>，会冲突的！！</p>
<p><strong>配置setting</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="comment"># 这里要写哦～</span></span><br><span class="line">    <span class="string">&#x27;haystack&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;Post&quot;</span>,</span><br><span class="line">    <span class="string">&quot;comment&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 指定了 django haystack 使用的搜索引擎，这里我们使用了 blog.whoosh_cn_backend.WhooshEngine，虽然目前这个引擎还不存在，但我们接下来会创建它。</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;Post.whoosh_cn_backend.WhooshEngine&#x27;</span>,</span><br><span class="line">        <span class="comment"># PATH 指定了索引文件需要存放的位置，我们设置为项目根目录 BASE_DIR 下的 whoosh_index 文件夹（在建立索引是会自动创建）</span></span><br><span class="line">        <span class="string">&#x27;PATH&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;whoosh_index&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 指定如何对搜索结果分页，这里设置为每 10 项结果为一页。</span></span><br><span class="line">HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class="number">10</span></span><br><span class="line"><span class="comment"># 指定什么时候更新索引，这里我们使用 haystack.signals.RealtimeSignalProcessor，作用是每当有文章更新时就更新索引。由于博客文章更新不会太频繁，因此实时更新没有问题。</span></span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = <span class="string">&#x27;haystack.signals.RealtimeSignalProcessor&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>处理数据</strong></p>
<p>接下来就要告诉 django haystack 使用那些数据建立索引以及如何存放索引。如果要对<code>Post</code>应用下的数据进行全文检索，做法是在<code>Post</code>应用下建立一个<code>search_indexes.py</code>文件，写上如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostIndex</span>(<span class="params">indexes.SearchIndex, indexes.Indexable</span>):</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Post</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span>(<span class="params">self, using=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<p>路径：<br><img src="https://img-blog.csdnimg.cn/20181219120855412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这是 django haystack 的规定。要相对某个 app 下的数据进行全文检索，就要在该 app 下创建一个 search_indexes.py 文件，然后创建一个 XXIndex 类（XX 为含有被检索数据的模型，如这里的 Post），并且继承 SearchIndex 和 Indexable。</p>
<p>每个索引里面必须有且只能有一个字段为<code>document=True</code>，这代表 django haystack 和搜索引擎将使用此字段的内容作为索引进行检索(primary field)。注意，如果使用一个字段设置了<code>document=True</code>，则一般约定此字段名为<code>text</code>，这是在 SearchIndex 类里面一贯的命名，以防止后台混乱，当然名字你也可以随便改，不过不建议改。</p>
<p>并且，haystack提供了<code>use_template=True</code>在text字段中这样就允许我们使用数据模板去建立搜索引擎索引的文件，说得通俗点就是索引里面需要存放一些什么东西，例如Post的title字段，这样我们可以通过 title 内容来检索 Post 数据了。举个例子，假如你搜索 Python ，那么就可以检索出title中含有 Python 的Post了，怎么样是不是很简单？数据模板的路径为 <code>templates/search/indexes/youapp/\&lt;model_name&gt;_text.txt</code>（例如 templates/search/indexes/blog/post_text.txt, model_name必须是小写的哦！)，其内容为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="built_in">object</span>.title &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="built_in">object</span>.body &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>路径：<br><img src="https://img-blog.csdnimg.cn/2018121912092277.png" alt="在这里插入图片描述"></p>
<p><strong>配置 URL</strong><br>在项目的<code>urls.py</code>中添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 在这里</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^search/&#x27;</span>, include(<span class="string">&#x27;haystack.urls&#x27;</span>)),</span><br><span class="line">    re_path(<span class="string">r&#x27;&#x27;</span>, include(<span class="string">&#x27;Post.urls&#x27;</span>, namespace=<span class="string">&quot;Post&quot;</span>)),</span><br><span class="line">    re_path(<span class="string">r&#x27;&#x27;</span>, include(<span class="string">&#x27;comment.urls&#x27;</span>, namespace=<span class="string">&quot;comment&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>修改搜索表单</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;haystack_search&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Go!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：input的name属性的值一定要是<code>q</code></p>
<p><strong>创建搜索结果页面</strong><br><code>haystack_search</code>视图函数会将搜索结果传递给模板<code>search/search.html</code>，因此创建这个模板文件，对搜索结果进行渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if query %&#125;</span><br><span class="line">    &#123;% for result in page.object_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">&quot;post-77&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">&quot;clearfix post post-77 blog type-blog status-publish has-post-thumbnail hentry&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;entry-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;Post:detail&#x27; result.object.id %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;bookmark&quot;</span>&gt;</span></span><br><span class="line">                    &#123;% highlight result.object.title with query %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;entry-meta&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">&quot;meta-date&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;datePublished&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">datetime</span>=<span class="string">&quot;&#123;&#123; result.object.modified_time &#125;&#125;&quot;</span>&gt;</span> &#123;&#123; result.object.modified_time &#125;&#125;<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-tags&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-cate&quot;</span>&gt;</span>&#123;&#123; result.object.category.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;entry-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;% highlight result.object.body with query %&#125;<span class="symbol">&amp;hellip;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;etry-more&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;Post:detail&#x27; result.object.id %&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;bookmark&quot;</span>&gt;</span>Read More<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-post&quot;</span>&gt;</span>没有搜索到你想要的结果！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>路径：<br><img src="https://img-blog.csdnimg.cn/20181219121428191.png" alt="在这里插入图片描述"></p>
<p>这个模板基本和<code>Post/list.html</code>一样，只是由于haystack对搜索结果做了分页，传给模板的变量是一个<code>page</code>对象，所以我们从<code>page</code>中取出这一页对应的搜索结果，然后对其循环显示，即<code>&#123;% for result in page.object_list %&#125;</code>。另外要取得Post（文章）以显示文章的数据如标题、正文，需要从<code>result</code>的<code>object</code>属性中获取.<code>query</code>变量的值即为用户搜索的关键词。</p>
<p><strong>高亮关键词</strong><br>在django haystack中实现这个效果也非常简单，只需要使用<code>&#123;% highlight %&#125;</code>模板标签即可,上面的示例已经有了高亮。高亮处理的原理其实就是给文本中的关键字包上一个<code>span</code>标签并且为其添加<code>highlighted</code>样式,因此你可以自己设置高亮的颜色哦：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">span</span><span class="selector-class">.highlighted</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>修改搜索引擎为中文分词</strong><br>我们使用 Whoosh 作为搜索引擎，但在 django haystack 中为 Whoosh 指定的分词器是英文分词器，可能会使得搜索结果不理想，我们把这个分词器替换成 jieba 中文分词器。从你安装的 haystack 中把<code>haystack/backends/whoosh_backends.py</code>文件拷贝到<code>Post/</code>下，重命名为<code>whoosh_cn_backends.py</code>（之前我们在 <code>settings.py</code>中的<code>HAYSTACK_CONNECTIONS</code> 指定的就是这个文件），然后找到如下一行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class="literal">True</span>, analyzer=StemmingAnalyzer(), field_boost=field_class.boost, sortable=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>将其中的<code>analyzer</code>改为<code>ChineseAnalyzer</code>，当然为了使用它，你需要在文件顶部引入：<code>from jieba.analyse import ChineseAnalyzer</code>。<br>改成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意先找到这个再修改，而不是直接添加  </span></span><br><span class="line">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class="literal">True</span>, analyzer=ChineseAnalyzer(),field_boost=field_class.boost, sortable=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><strong>建立索引文件</strong><br>最后一步就是建立索引文件了，运行命令<code>python manage.py rebuild_index</code>就可以建立索引文件了。<br>最后就可以看到效果啦<br><img src="https://img-blog.csdnimg.cn/20181219122427497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django django</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi——快速入门</title>
    <url>/2019/09/26/fastapi%E2%80%94%E2%80%94%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<blockquote>
<p>fastapi是高性能的web框架。他的主要特点是：<br>- 快速编码<br>- 减少人为bug<br>- 直观<br>- 简易<br>- 具有交互式文档<br>- 基于API的开放标准（并与之完全兼容）：OpenAPI（以前称为Swagger）和JSON Schema。</p>
</blockquote>
<p>技术背景：python3.6+、<a href="https://www.starlette.io/">Starlette</a>、<a href="https://pydantic-docs.helpmanual.io/">Pydantic</a></p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn</span><br></pre></td></tr></table></figure>

<h2 id="quick-start"><a href="#quick-start" class="headerlink" title="quick start"></a>quick start</h2><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>

<p>看到如下提示，证明运行成功<br><img src="https://img-blog.csdnimg.cn/20190926152850404.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>main: 表示app所在文件名<br>app：FastAPI实例<br>reload：debug模式，可以自动重启</p>
</blockquote>
<p>试着请求<code>http://127.0.0.1:8000/items/5?q=somequery</code>，会看到如下返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;item_id&quot;: 5, &quot;q&quot;: &quot;somequery&quot;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交互文档"><a href="#交互文档" class="headerlink" title="交互文档"></a>交互文档</h3><p>试着打开<code>http://127.0.0.1:8000/docs</code><br><img src="https://img-blog.csdnimg.cn/20190926153457923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h3><p>试着打开<a href="http://127.0.0.1:8000/redoc">http://127.0.0.1:8000/redoc</a><br><img src="https://img-blog.csdnimg.cn/20190926153624102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>通过上面的例子，我们已经用fastapi完成了第一个web服务，现在我们再添加一个接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    is_offer: <span class="built_in">bool</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_name&quot;</span>: item.name, <span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<p>此时会发现，服务自动重启了，这是因为我们在启动命令后添加了<code>--reload</code>。再次查看文档，发现同样发生了改变。<br>到此，你已经可以快速的用fastapi搭建起服务了～</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>fastapi python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶七（Request Forms and Files）</title>
    <url>/2020/09/04/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%E4%B8%83%EF%BC%88Request%20Forms%20and%20Files%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<h2 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h2><p>前面介绍的参数都是以json格式传递的，这节我们来介绍表单参数如何使用</p>
<span id="more"></span>

<blockquote>
<p>如果要使用表单参数要先安装<code>python-multipart</code><br><code>pip install python-multipart</code></p>
</blockquote>
<p>下面这个例子模拟了登陆的表单验证，我们可以看到，参数的声明没有用<code>Body</code>或者<code>Query</code>，而是用了<code>Form</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Form</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/login/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">username: <span class="built_in">str</span> = Form(<span class="params">...</span>), password: <span class="built_in">str</span> = Form(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;username&quot;</span>: username&#125;</span><br></pre></td></tr></table></figure>

<p>打开<code>http://127.0.0.1:8000/docs</code>，我们来看一下接口文档发生了哪些变化：<br><img src="https://img-blog.csdnimg.cn/20200904151911191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3s9e9Jge-1599203933286)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p219)]"></p>
<p>很明显的一点就是content-type发生了变化，变成了<code>Content-Type: application/x-www-form-urlencoded</code></p>
<blockquote>
<p>需要注意的一点是，如果我们同时使用了<code>Form</code>和<code>Body</code>，请求将会以表单的形式发送给服务端</p>
</blockquote>
<h2 id="Request-Files"><a href="#Request-Files" class="headerlink" title="Request Files"></a>Request Files</h2><p>介绍完表单，接下来介绍文件上传，在使用之前记得安装<code>python-multipart</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, File, UploadFile</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/files/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_file</span>(<span class="params">file: <span class="built_in">bytes</span> = File(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;file_size&quot;</span>: <span class="built_in">len</span>(file)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/uploadfile/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_upload_file</span>(<span class="params">file: UploadFile = File(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;filename&quot;</span>: file.filename&#125;</span><br></pre></td></tr></table></figure>

<p>这里有两个接口，可以注意到<code>file</code>接收的类型是不同的，那么这两种写法有什么区别呢：</p>
<ul>
<li>file是<code>bytes</code>类型时，fastapi会读取上传的文件，file参数将接收字节类型的内容，这也意味着全部内容将存储在内存中，如果文件很大的话，这并不是一个好的选择</li>
<li>file是<code>UploadFile</code>类型时，相比<code>bytes</code>类型来说，对大文件的处理更好一些，而且可以支持异步</li>
</ul>
<h4 id="UploadFile"><a href="#UploadFile" class="headerlink" title="UploadFile"></a>UploadFile</h4><p>接下来我们来仔细了解一下<code>UploadFile</code>，为什么它相比<code>bytes</code>来说更有优势，更适合大文件：</p>
<ul>
<li><p><code>UploadFile</code>虽然也会读取文件到内存，但是当存储在内存的文件大小达到最大限制后，文件将会存储到硬盘中。这也就意味着它可以很好地用于大型文件，例如图像，视频，大型二进制文件等，而不会占用所有内存。</p>
</li>
<li><p>我们通过<code>UploadFile</code>可以获取文件的相关属性，例如：</p>
<ul>
<li>filename：上传的文件的文件名（例：myimage.jpg）</li>
<li>content_type：文件类型(例：image/jpeg)</li>
<li>file：SpooledTemporaryFile（类似文件的对象）。它实际的Python文件，您可以将其直接传递给需要“类文件”对象的其他函数或库。(源码中是这样定义的：<code>file = tempfile.SpooledTemporaryFile(max_size=self.spool_max_size)</code>)</li>
</ul>
</li>
<li><p><code>UploadFile</code>的<code>file</code>属性具有很多异步方法(这些方法也可以同步调用)：</p>
<ul>
<li><p>write(data)：写入文件</p>
</li>
<li><p>read(size)：读取文件，</p>
<ul>
<li>例：<code>contents = await myfile.read()</code></li>
</ul>
</li>
<li><p>seek(offset)：游标到文件中offset对应字节的位置</p>
<ul>
<li>例：<code>await myfile.seek(0)</code>将会到文件开始的位置</li>
<li>如果运行一次<code>await myfile.read()</code>然后需要再次读取内容，则此功能特别有用。</li>
</ul>
</li>
<li><p>close()：关闭文件</p>
</li>
</ul>
</li>
</ul>
<h4 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, File, UploadFile</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> HTMLResponse</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/files/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_files</span>(<span class="params">files: <span class="type">List</span>[<span class="built_in">bytes</span>] = File(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;file_sizes&quot;</span>: [<span class="built_in">len</span>(file) <span class="keyword">for</span> file <span class="keyword">in</span> files]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/uploadfiles/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_upload_files</span>(<span class="params">files: <span class="type">List</span>[UploadFile] = File(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;filenames&quot;</span>: [file.filename <span class="keyword">for</span> file <span class="keyword">in</span> files]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    content = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;form action=&quot;/files/&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;files&quot; type=&quot;file&quot; multiple&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;form action=&quot;/uploadfiles/&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;files&quot; type=&quot;file&quot; multiple&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HTMLResponse(content=content)</span><br></pre></td></tr></table></figure>

<p>可以打开<code>http://127.0.0.1:8000/docs</code>或者<code>http://127.0.0.1:8000/</code>进行尝试，请求<code>http://127.0.0.1:8000/</code>会进入到我们自定义的页面：<br><img src="https://img-blog.csdnimg.cn/20200904152000228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uz9gyX1J-1599203933294)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p220)]"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>无论是使用<code>Form</code>还是<code>File</code>都不要忘记安装<code>python-multipart</code></li>
<li>如果我们同时使用了<code>Form</code>和<code>Body</code>，请求将会以表单的形式发送给服务端</li>
<li>上传大文件时最好使用<code>UploadFile</code></li>
<li>如果方法是异步的，可以使用<code>UploadFile</code></li>
</ul>
<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶五（Response Model）</title>
    <url>/2020/09/02/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%E4%BA%94%EF%BC%88Response%20Model%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<h2 id="Response-Model"><a href="#Response-Model" class="headerlink" title="Response Model"></a>Response Model</h2><p>还是以一个例子开头：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, EmailStr</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserIn</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr</span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t do this in production!</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/user/&quot;</span>, response_model=UserIn</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_user</span>(<span class="params">user: UserIn</span>):</span></span><br><span class="line">    <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<p>我们可以在下面这几个操作中用<code>response_model</code>参数来声明响应的模板结构:</p>
<ul>
<li><code>@app.get()</code></li>
<li><code>@app.post()</code></li>
<li><code>@app.put()</code></li>
<li><code>@app.delete()</code></li>
<li>其他请求类型</li>
</ul>
<p>FastAPI将使用<code>response_model</code>进行以下操作：</p>
<ul>
<li>将输出数据转换为response_model中声明的数据类型。</li>
<li>验证数据结构和类型</li>
<li>将输出数据限制为该model定义的</li>
<li>添加到OpenAPI中</li>
<li>在自动文档系统中使用。</li>
</ul>
<p>我们尝试启动上面这个例子的服务，并通过POST请求<code>http://127.0.0.1:8000/user/</code>，我们可以看到返回和请求体是一样的:<br><img src="https://img-blog.csdnimg.cn/2020090214460145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1sVQyk8E-1599029098971)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p216)]"></p>
<p>不难发现这里有一个问题，如果我们用同一个model去声明请求体参数和响应model，会造成password的泄露，那么，我们来尝试不让password返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, EmailStr</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserIn</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr</span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserOut</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr</span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/user/&quot;</span>, response_model=UserOut</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_user</span>(<span class="params">user: UserIn</span>):</span></span><br><span class="line">    <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<p>这里我们定义了两个model（UserIn和UserOut）分别用在请求体参数和响应model，再次请求<code>http://127.0.0.1:8000/user/</code>，这时我们发现响应已经没有password了：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;user@example.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;full_name&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="response-model-exclude-unset"><a href="#response-model-exclude-unset" class="headerlink" title="response_model_exclude_unset"></a>response_model_exclude_unset</h4><p>通过上面的例子，我们学到了如何用response_model控制响应体结构，但是如果它们实际上没有存储，则可能要从结果中忽略它们。</p>
<p>例如，如果model在NoSQL数据库中具有很多可选属性，但是不想发送很长的JSON响应，其中包含默认值。</p>
<p>我们来看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="built_in">float</span> = <span class="number">10.5</span></span><br><span class="line">    tags: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">items = &#123;</span><br><span class="line">    <span class="string">&quot;foo&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;price&quot;</span>: <span class="number">50.2</span>&#125;,</span><br><span class="line">    <span class="string">&quot;bar&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bar&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;The bartenders&quot;</span>, <span class="string">&quot;price&quot;</span>: <span class="number">62</span>, <span class="string">&quot;tax&quot;</span>: <span class="number">20.2</span>&#125;,</span><br><span class="line">    <span class="string">&quot;baz&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Baz&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;price&quot;</span>: <span class="number">50.2</span>, <span class="string">&quot;tax&quot;</span>: <span class="number">10.5</span>, <span class="string">&quot;tags&quot;</span>: []&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span>, response_model=Item, response_model_exclude_unset=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> items[item_id]</span><br></pre></td></tr></table></figure>

<p>我们发现，get操作中多了<code>response_model_exclude_unset</code>属性，他是用来控制什么的呢？</p>
<p>尝试请求<code>http://127.0.0.1:8000/items/foo</code>，结果返回了这样的数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">50.2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过前面的学习，我们知道response的结构应该是这样的：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;tax&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;string&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是<code>response_model_exclude_unset</code>发挥了作用。<code>response_model_exclude_unset</code>可以控制不返回没有设置的参数。<br>当然，除了<code>response_model_exclude_unset</code>以外，还有<code>response_model_exclude_defaults</code>和<code>response_model_exclude_none</code>，我们可以很直观的了解到他们的意思，不返回是默认值的字段和不返回是None的字段，下面让我们分别尝试一下</p>
<p>设置<code>response_model_exclude_defaults=True</code>, 请求<code>http://127.0.0.1:8000/items/baz</code>，返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Baz&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">50.2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置<code>response_model_exclude_none=True</code>, 请求<code>http://127.0.0.1:8000/items/baz</code>，返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Baz&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">50.2</span>,</span><br><span class="line">  <span class="attr">&quot;tax&quot;</span>: <span class="number">10.5</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>response_model_exclude_defaults</code>控制了不返回是默认值的字段，这个默认值不仅仅是None，他可能是我们在model中设置的任意一个值</p>
</blockquote>
<h4 id="response-model-include和response-model-exclude"><a href="#response-model-include和response-model-exclude" class="headerlink" title="response_model_include和response_model_exclude"></a>response_model_include和response_model_exclude</h4><p>接下来我们学习如何用<code>response_model_include</code>和<code>response_model_exclude</code>来控制响应参数，不难理解这两个参数的意思分别是响应参数包括哪些和不包括哪些，我们还是从实例看看他们是如何使用的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="built_in">float</span> = <span class="number">10.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">items = &#123;</span><br><span class="line">    <span class="string">&quot;foo&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;price&quot;</span>: <span class="number">50.2</span>&#125;,</span><br><span class="line">    <span class="string">&quot;bar&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bar&quot;</span>, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;The Bar fighters&quot;</span>, <span class="string">&quot;price&quot;</span>: <span class="number">62</span>, <span class="string">&quot;tax&quot;</span>: <span class="number">20.2</span>&#125;,</span><br><span class="line">    <span class="string">&quot;baz&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Baz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;There goes my baz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">50.2</span>,</span><br><span class="line">        <span class="string">&quot;tax&quot;</span>: <span class="number">10.5</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;/items/&#123;item_id&#125;/name&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    response_model=Item,</span></span></span><br><span class="line"><span class="params"><span class="meta">    response_model_include=&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;description&quot;</span>&#125;,</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item_name</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> items[item_id]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;/public&quot;</span>, response_model=Item, response_model_exclude=&#123;<span class="string">&quot;tax&quot;</span>&#125;</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item_public_data</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> items[item_id]</span><br></pre></td></tr></table></figure>

<p>通过前面的学习，我们知道了这里响应的结构应该是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;tax&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么，我们来尝试一下请求<code>http://127.0.0.1:8000/items/foo/name</code>, 返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么只返回了<code>name</code>和<code>description</code>呢？因为我们在参数中添加了<code>response_model_include=&#123;&quot;name&quot;, &quot;description&quot;&#125;</code>，它控制了响应参数只包括<code>name</code>和<code>description</code>。<br>再次尝试请求<code>http://127.0.0.1:8000/items/bar/public</code>，返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The Bar fighters&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">62</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么没有返回<code>tax</code>呢？这时因为我们在参数中添加了<code>response_model_exclude=&#123;&quot;tax&quot;&#125;</code>，它控制了想响应参数除了<code>tax</code>都要返回。</p>
<blockquote>
<p>除了用<code>set</code>来声明<code>response_model_exclude</code>和<code>response_model_include</code>，也可以用<code>list</code>或<code>tuple</code>，fastapi会将他们专程set类型</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li> 使用路径操作装饰器的参数response_model定义响应模型，确保私有数据被过滤掉</li>
<li> 使用路径操作装饰器的参数<code>response_model_exclude_unset</code>、<code>response_model_exclude_defaults</code>和<code>response_model_exclude_none</code>来过滤掉符合条件的参数</li>
<li> 使用路径操作装饰器的参数<code>response_model_include</code>和<code>response_model_exclude</code>来指定字段进行过滤</li>
</ol>
<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>fastapi python</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶八（Handling Errors）</title>
    <url>/2020/09/09/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%E5%85%AB%EF%BC%88Handling%20Errors%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<p>在很多情况下，在服务端出现错误时，我们需要告诉客户端出现了什么错误，例如：</p>
<ul>
<li>客户端没有足够的权限进行该操作。</li>
<li>客户端无权访问该资源。</li>
<li>客户端尝试访问的项目不存在。</li>
</ul>
<span id="more"></span>

<p>这时，我们需要返回给客户端400-499范围内的HTTP状态码。接下来介绍如何通过fastapi对服务端错误进行处理并返回给客户端HTTP状态码</p>
<h2 id="HTTPException"><a href="#HTTPException" class="headerlink" title="HTTPException"></a>HTTPException</h2><p>如果希望将错误返回给客户端，可以使用<code>HTTPException</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">items = &#123;<span class="string">&quot;foo&quot;</span>: <span class="string">&quot;The Foo Wrestlers&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> item_id <span class="keyword">not</span> <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">&quot;Item not found&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item&quot;</span>: items[item_id]&#125;</span><br></pre></td></tr></table></figure>

<p>上面这个代码的含义是希望当查询的item_id不存在时，返回404状态码，并告诉客户端查询的id不存在。</p>
<p>我们先尝试请求<code>http://127.0.0.1:8000/items/a</code>，看看服务端会响应什么:<br><img src="https://img-blog.csdnimg.cn/2020090915000151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3i6smyYE-1599634775682)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p221)]"></p>
<p>回到代码中，我们注意到这里的<code>HTTPException</code>使用了<code>raise</code>，而不是<code>return</code>，这是为什么呢？</p>
<p>因为<code>HTTPException</code>本身是python的异常类，异常我们通常都是需要将它抛出，所以用了<code>raise</code>。这也就意味着，当我们触发了<code>HTTPException</code>这个异常，余下的代码将不会再执行，并且服务端会直接将错误通过<code>HTTPException</code>响应给客户端。</p>
<p>另外，当我们抛出<code>HTTPException</code>时，服务端会返回给我们:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;Item not found&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们想返回更具体的错误信息，可以对<code>detail</code>进行修改，它不仅可以接收字符串，也可以是json、dict、list等结构，例如我们修改代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">items = &#123;<span class="string">&quot;foo&quot;</span>: <span class="string">&quot;The Foo Wrestlers&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> item_id <span class="keyword">not</span> <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;Item not found&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item&quot;</span>: items[item_id]&#125;</span><br></pre></td></tr></table></figure>

<p>再次请求<code>http://127.0.0.1:8000/items/a</code>，此时的响应就发生了变化：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;detail&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;Item not found&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外，<code>HTTPException</code>还可以添加响应头：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">items = &#123;<span class="string">&quot;foo&quot;</span>: <span class="string">&quot;The Foo Wrestlers&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items-header/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item_header</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> item_id <span class="keyword">not</span> <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(</span><br><span class="line">            status_code=<span class="number">404</span>,</span><br><span class="line">            detail=<span class="string">&quot;Item not found&quot;</span>,</span><br><span class="line">            headers=&#123;<span class="string">&quot;X-Error&quot;</span>: <span class="string">&quot;There goes my error&quot;</span>&#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item&quot;</span>: items[item_id]&#125;</span><br></pre></td></tr></table></figure>

<p>再次请求<code>http://127.0.0.1:8000/items/a</code>，此时的响应头增加了<code>X-Error</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content-length: 27</span><br><span class="line">content-type: application/json</span><br><span class="line">date: Tue, 08 Sep 2020 09:15:21 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line">x-error: There goes my error</span><br></pre></td></tr></table></figure>

<h2 id="exception-handlers"><a href="#exception-handlers" class="headerlink" title="exception handlers"></a>exception handlers</h2><p>上面我们介绍了如何在一个接口中，抛出错误信息给客户端，如果此时有多个接口都抛出了异常响应，并且我们希望可以对全局的错误异常响应做统一的处理呢。这时候我们需要用到<code>@app.exception_handler()</code>这个装饰器:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnicornException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(<span class="params">UnicornException</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">unicorn_exception_handler</span>(<span class="params">request: Request, exc: UnicornException</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        status_code=<span class="number">418</span>,</span><br><span class="line">        content=&#123;<span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Oops! <span class="subst">&#123;exc.name&#125;</span> did something. There goes a rainbow...&quot;</span>&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/unicorns/&#123;name&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_unicorn</span>(<span class="params">name: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;yolo&quot;</span>:</span><br><span class="line">        <span class="keyword">raise</span> UnicornException(name=name)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;unicorn_name&quot;</span>: name&#125;</span><br></pre></td></tr></table></figure>

<p>尝试请求<code>http://127.0.0.1:8000/unicorns/yolo</code>，会响应:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Oops! yolo did something. There goes a rainbow...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子自定义了异常类<code>UnicornException</code>，当请求的name=yolo时，会抛出<code>UnicornException</code>。但是并不会立刻响应给客户端，而是先经过<code>unicorn_exception_handler</code>处理成统一的格式，最后才会响应给客户端，也就是我们上面看到的响应。</p>
<h2 id="重写默认的exception-handlers"><a href="#重写默认的exception-handlers" class="headerlink" title="重写默认的exception handlers"></a>重写默认的exception handlers</h2><p>fastapi有很多默认的异常处理器。这些处理器负责在引发HTTPException以及请求中包含无效数据时返回默认的JSON响应。</p>
<p>我们可以使用自己的方法重写这些异常处理器，下面我们来重写<code>RequestValidationError</code>和<code>HTTPException</code>的异常处理器:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"><span class="keyword">from</span> fastapi.exceptions <span class="keyword">import</span> RequestValidationError</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> PlainTextResponse</span><br><span class="line"><span class="keyword">from</span> starlette.exceptions <span class="keyword">import</span> HTTPException <span class="keyword">as</span> StarletteHTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(<span class="params">StarletteHTTPException</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">http_exception_handler</span>(<span class="params">request, exc</span>):</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="built_in">str</span>(exc.detail), status_code=exc.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(<span class="params">RequestValidationError</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">validation_exception_handler</span>(<span class="params">request, exc</span>):</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="built_in">str</span>(exc), status_code=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> item_id == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">418</span>, detail=<span class="string">&quot;Nope! I don&#x27;t like 3.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<p>当请求的参数是非法参数时，fastapi会主动抛出<code>RequestValidationError</code>，此时会通过<code>validation_exception_handler</code>处理这个异常，处理的结果是响应文本格式的结果，并设置状态码为400，我们尝试请求<code>http://127.0.0.1:8000/items/foo</code>，此时会返回：<br><img src="https://img-blog.csdnimg.cn/20200909150431329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LmkcvBcZ-1599634775699)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p223)]"></p>
<p>当请求参数item_id=3时，会触发<code>HTTPException</code>，并通过<code>http_exception_handler</code>响应文本格式的信息，并设置状态码为418，尝试请求<code>http://127.0.0.1:8000/items/3</code>，此时会返回：<br><img src="https://img-blog.csdnimg.cn/20200909150446458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tXVpVvNu-1599634775703)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p225)]"></p>
<h4 id="如何利用RequestValidationError结构体"><a href="#如何利用RequestValidationError结构体" class="headerlink" title="如何利用RequestValidationError结构体"></a>如何利用<code>RequestValidationError</code>结构体</h4><p>当我们希望可以知道出现错误的请求体以便可以记日志或debug时，我们可以使用<code>RequestValidationError</code>的<code>body</code>属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request, status</span><br><span class="line"><span class="keyword">from</span> fastapi.encoders <span class="keyword">import</span> jsonable_encoder</span><br><span class="line"><span class="keyword">from</span> fastapi.exceptions <span class="keyword">import</span> RequestValidationError</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(<span class="params">RequestValidationError</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">validation_exception_handler</span>(<span class="params">request: Request, exc: RequestValidationError</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,</span><br><span class="line">        content=jsonable_encoder(&#123;<span class="string">&quot;detail&quot;</span>: exc.errors(), <span class="string">&quot;body&quot;</span>: exc.body&#125;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    size: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">item: Item</span>):</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>尝试向<code>http://127.0.0.1:8000/items/</code>发送一个非法的请求体：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来看看会响应什么：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;detail&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;loc&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;body&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;value is not a valid integer&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;type_error.integer&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;body&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="string">&quot;aaa&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="FastAPI’s-HTTPException-vs-Starlette’s-HTTPException"><a href="#FastAPI’s-HTTPException-vs-Starlette’s-HTTPException" class="headerlink" title="FastAPI’s HTTPException vs Starlette’s HTTPException"></a>FastAPI’s HTTPException vs Starlette’s HTTPException</h4><p>通过上面的例子我们可以注意到有的例子用了<code>from fastapi import HTTPException</code>也有用<code>from starlette.exceptions import HTTPException as StarletteHTTPException</code>，那么这两种用法有什么区别呢？</p>
<p><img src="https://img-blog.csdnimg.cn/20200909150759733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2XIDY2Nb-1599634775711)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p226)]"></p>
<p>上面的源码告诉了我们，虽然FastAPI的HTTPException继承自Starlette的HTTPException，但是FastAPI的HTTPException允许添加响应头。<br>一般情况下，我们可以使用<code>from fastapi import HTTPException</code>，但是当我们去重写<code>HTTPException</code>处理器的时候，建议还是使用<code>from starlette.exceptions import HTTPException as StarletteHTTPException</code>。原因是，如果是starlette内部代码或相关插件引发了HTTPException，我们可以通过处理器捕捉到它。</p>
<h2 id="重用fastapi的exception-handlers"><a href="#重用fastapi的exception-handlers" class="headerlink" title="重用fastapi的exception handlers"></a>重用fastapi的exception handlers</h2><p>如果我们想用默认的异常处理器，但是希望在这之前加一些自己的东西，比如，在默认处理器之前打印一下错误信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"><span class="keyword">from</span> fastapi.exception_handlers <span class="keyword">import</span> (</span><br><span class="line">    http_exception_handler,</span><br><span class="line">    request_validation_exception_handler,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> fastapi.exceptions <span class="keyword">import</span> RequestValidationError</span><br><span class="line"><span class="keyword">from</span> starlette.exceptions <span class="keyword">import</span> HTTPException <span class="keyword">as</span> StarletteHTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(<span class="params">StarletteHTTPException</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">custom_http_exception_handler</span>(<span class="params">request, exc</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;OMG! An HTTP error!: <span class="subst">&#123;<span class="built_in">repr</span>(exc)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> http_exception_handler(request, exc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(<span class="params">RequestValidationError</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">validation_exception_handler</span>(<span class="params">request, exc</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;OMG! The client sent invalid data!: <span class="subst">&#123;exc&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> request_validation_exception_handler(request, exc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> item_id == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">418</span>, detail=<span class="string">&quot;Nope! I don&#x27;t like 3.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>返回<code>HTTPException</code>时，要用<code>raise</code>，不要用<code>return</code></li>
<li>我们可以自定义异常响应处理器，使用<code>@app.exception_handler()</code>来装饰处理器方法</li>
<li>我们也可以通过重写fastapi已有的异常响应处理器来达到我们的目的</li>
<li>注意FastAPI的HTTPException继承自Starlette的HTTPException的区别，防止出错的话，直接使用<code>from starlette.exceptions import HTTPException as StarletteHTTPException</code></li>
</ul>
<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶六（Response Status Code）</title>
    <url>/2020/09/03/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%E5%85%AD%EF%BC%88Response%20Status%20Code%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<p>在<a href="https://chuxiaoyi.blog.csdn.net/article/details/108336769">fastapi教程-进阶五（Response Model）</a>中我们学习了如何控制响应体结构，这节来学习如何使用http状态码：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=<span class="number">201</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">name: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;name&quot;</span>: name&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务，打开<code>http://127.0.0.1:8000/docs</code>，我们来看看response：<br><img src="https://img-blog.csdnimg.cn/20200903141853609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>这个例子通过<code>status_code</code>来自定义了状态码，201代表了新建资源，但是假如我们在使用状态码时忘记了对应的数字怎么办呢？这里fastapi就很贴心了，它为我们提供了枚举值:<br><img src="https://img-blog.csdnimg.cn/20200903141642786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>这里也可以使用<code>from starlette import status</code>。</p>
</blockquote>
<h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><ul>
<li>100以上表示“信息”。我们很少直接使用它们。具有这些状态码的响应不能带有主体。</li>
<li>200及以上表示“成功”响应。这些是最常使用的。<ul>
<li>默认状态代码为200，表示一切正常。</li>
<li>另一个示例是201，“已创建”。通常在数据库中创建新记录后使用。</li>
<li>特殊情况是204，“无内容”。当没有内容返回给客户端时使用此响应，因此该响应必须没有正文。</li>
</ul>
</li>
<li>300及更高版本用于“重定向”。具有这些状态代码的响应可能带有或可能没有主体，但304，“未修改”除外，该主体不能具有一个主体。</li>
<li>400及更高版本适用于“客户端错误”响应。这些可能最常使用的第二种类型。<ul>
<li>对于“未找到”响应，示例为404。</li>
<li>对于来自客户端的一般错误，您可以仅使用400。</li>
</ul>
</li>
<li>500及以上是服务器错误。我们几乎永远不会直接使用它们。当您的应用程序代码或服务器中的某些部分出现问题时，它将自动返回这些状态代码之一。</li>
</ul>
<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶四（cookie、header parameter）</title>
    <url>/2020/09/01/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%E5%9B%9B%EF%BC%88cookie%E3%80%81header%20parameter%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<p>在<a href="https://blog.csdn.net/weixin_40156487/article/details/108281234">fastapi教程-进阶（三）</a>和<a href="https://blog.csdn.net/weixin_40156487/article/details/108279120">fastapi教程-进阶（二）</a>中我们介绍了<code>Query</code>、<code>Path</code>和<code>Body</code>参数，这里介绍<code>cookie</code>和<code>header</code></p>
<span id="more"></span>

<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Cookie, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">ads_id: <span class="type">Optional</span>[<span class="built_in">str</span>] = Cookie(<span class="params"><span class="literal">None</span></span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;ads_id&quot;</span>: ads_id&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要获取cookie，必须需要使用<code>Cookie</code>来声明，否则参数将被解释为查询参数。</p>
</blockquote>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Header</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">user_agent: <span class="type">Optional</span>[<span class="built_in">str</span>] = Header(<span class="params"><span class="literal">None</span></span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;User-Agent&quot;</span>: user_agent&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务，并尝试请求<code>http://127.0.0.1:8000/items/</code>，会返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>我们会发现，代码中的<code>user_agent</code>会自动获取请求头中的<code>User-Agent</code>的值，但是他们的大小写和符号并不相同，这是为什么呢？</strong></p>
<blockquote>
<p>大部分请求头中的key是用<code>-</code>来分割的，比如<code>User-Agent</code>，但是这种命名在python中是不符合规范的，因此，<code>Header</code>会自动将参数名称中的下划线<code>_</code>转换为连字符<code>-</code>。另外，http请求头不区分大小写，因此我们可以用符合python规范的命名方法来表示他们。</p>
</blockquote>
<p>如果由于某种原因需要禁用下划线<code>_</code>到连字符<code>-</code>的自动转换，需要将Header的参数convert_underscores设置为False：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Header</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        user_agent: <span class="type">Optional</span>[<span class="built_in">str</span>] = Header(<span class="params"><span class="literal">None</span>, convert_underscores=<span class="literal">False</span></span>)</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;User-Agent&quot;</span>: user_agent&#125;</span><br></pre></td></tr></table></figure>

<p>这时我们在请求<code>http://127.0.0.1:8000/items/</code>时，会返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;User-Agent&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重复的请求头"><a href="#重复的请求头" class="headerlink" title="重复的请求头"></a>重复的请求头</h4><p>如果请求头中同一个key有多个value，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Token: foo</span><br><span class="line">X-Token: bar</span><br></pre></td></tr></table></figure>

<p>这时候应该如何定义呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Header</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">x_token: <span class="type">Optional</span>[<span class="type">List</span>[<span class="built_in">str</span>]] = Header(<span class="params"><span class="literal">None</span></span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;X-Token values&quot;</span>: x_token&#125;</span><br></pre></td></tr></table></figure>

<p>我们用postman模拟请求<br><img src="https://img-blog.csdnimg.cn/20200901110138328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ZcD2UYHg-1598929224418)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p215)]"></p>
<p>会返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;X-Token values&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bar&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li> 如果要获取cookie或header，必须要用<code>Cookie</code>或<code>Header</code>来声明参数，否则fastapi会把参数当作查询参数</li>
<li> <code>Header</code>会自动转换请求头中的参数，将参数名称中的下划线<code>_</code>转换为连字符<code>-</code>，因此在参数命名时我们可以遵守python规范</li>
<li> 如果不想让<code>Header</code>自动转换可以给<code>Header</code>设置<code>convert_underscores=False</code></li>
<li> 获取重复请求头时只需要用<code>List</code>来声明参数类型</li>
</ol>
<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶（三）</title>
    <url>/2020/08/28/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<p>在fastapi教程的前几篇教程里，我们学习了如何声明路径参数、查询参数和请求体，这篇我们会对这些参数进行扩展学习，学习更多的用法</p>
<span id="more"></span>

<h2 id="Query-Parameters"><a href="#Query-Parameters" class="headerlink" title="Query Parameters"></a>Query Parameters</h2><p>我们先看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, min_length=<span class="number">3</span>, max_length=<span class="number">50</span>, regex=<span class="string">&quot;^fixedquery$&quot;</span></span>)</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;items&quot;</span>: [&#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>与之前的例子相比，发生了一些改变：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, min_length=<span class="number">3</span>, max_length=<span class="number">50</span>, regex=<span class="string">&quot;^fixedquery$&quot;</span></span>)</span>):</span></span><br></pre></td></tr></table></figure>

<p>声明参数的时候，不再是单纯的指定<code>None</code>，而是调用了<code>Query</code>。<br>通过这种方式，对<code>q</code>做了验证限制：</p>
<ol>
<li> 非必填</li>
<li> 最大长度为50</li>
<li> 最小长度为3</li>
<li> 可以匹配正则表达式</li>
</ol>
<p>尝试请求<code>http://127.0.0.1:8000/items/?q=a</code>，会发现返回了错误提示：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;detail&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;loc&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;query&quot;</span>,</span><br><span class="line">        <span class="string">&quot;q&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;ensure this value has at least 3 characters&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;value_error.any_str.min_length&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ctx&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;limit_value&quot;</span>: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次尝试<code>http://127.0.0.1:8000/items/?q=test</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;detail&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;loc&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;query&quot;</span>,</span><br><span class="line">        <span class="string">&quot;q&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;string does not match regex \&quot;^fixedquery$\&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;value_error.str.regex&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ctx&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^fixedquery$&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外，<code>Query</code>还支持其他的属性：</p>
<ol>
<li><pre><code>alias: 参数别名
</code></pre>
</li>
<li><pre><code>description: 参数描述
</code></pre>
</li>
<li><pre><code>title：参数标题
</code></pre>
</li>
<li><pre><code>deprecated：表示该接口已被移除
</code></pre>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params">..., title=<span class="string">&quot;Query string&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="function">                                 description=<span class="string">&quot;Query string for the items to search in the database that have a good match&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="function">                                 alias=<span class="string">&quot;item-query&quot;</span></span>)</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;items&quot;</span>: [&#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>打开<code>http://127.0.0.1:8000/docs</code>， 我们会发现页面发生了变化，并且请求的参数名也变成了别名：<br><img src="https://img-blog.csdnimg.cn/20200828170100648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里我们会发现<code>item-query</code>变成了必填，这是因为，我们将<code>Query(None)</code>替换成了<code>Query(...)</code></p>
<h2 id="Path-Parameters"><a href="#Path-Parameters" class="headerlink" title="Path Parameters"></a>Path Parameters</h2><p>依旧是一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Path, Query</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        *,</span></span></span><br><span class="line"><span class="params"><span class="function">        item_id: <span class="built_in">int</span> = Path(<span class="params">..., title=<span class="string">&quot;The ID of the item to get&quot;</span>, ge=<span class="number">0</span>, le=<span class="number">1000</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="function">        q: <span class="built_in">str</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        size: <span class="built_in">float</span> = Query(<span class="params">..., gt=<span class="number">0</span>, lt=<span class="number">10.5</span></span>)</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>在这里，用<code>Path</code>来声明路径参数，通过这种方式，对<code>item_id</code>做了验证限制：</p>
<ol>
<li> <code>item_id</code>是必填的</li>
<li> <code>item_id</code>大于等于0</li>
<li> <code>item_id</code>小于等于1000</li>
</ol>
<p><strong>除此之外，我们可以发现方法的第一个参数是<code>*</code>，它的作用什么呢？</strong><br>如果我们想不用<code>Query</code>来声明<code>q</code>，并想将q设为必填的，并且想用<code>Path</code>来声明<code>item_id</code>，这时我们就要用到<code>*</code>。因为python并不会对<code>*</code>做任何操作，但是python会将<code>*</code>之后的参数作为关键字参数来看待，因此，即使没有用<code>Query</code>，python也会把它当作有<code>Query(...)</code>来待</p>
<blockquote>
<p>在从<code>fastapi</code>导入<code>Path</code>、<code>Query</code>时，其实导入的是方法，当它们被调用的时候，会返回同名的类。这些同名的类都是<code>Param</code>的子类，因此在声明参数时，他们都是有相同的属性的。<img src="https://img-blog.csdnimg.cn/20200828181006807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="Body-Parameters"><a href="#Body-Parameters" class="headerlink" title="Body Parameters"></a>Body Parameters</h2><h4 id="多个body参数"><a href="#多个body参数" class="headerlink" title="多个body参数"></a>多个body参数</h4><p>还是以一个例子开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item, user: User</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item, <span class="string">&quot;user&quot;</span>: user&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>在这个例子里，fastapi会注意到不止一个body参数，此时的请求体是这样的：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;item&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;tax&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;full_name&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fastapi会根据请求自动处理参数，以便用item和user可以接收到其内容<br>假如此时我们想在请求体中增加一个参数，例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;item&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The pretender&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="number">42.0</span>,</span><br><span class="line">        <span class="attr">&quot;tax&quot;</span>: <span class="number">3.2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;dave&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;full_name&quot;</span>: <span class="string">&quot;Dave Grohl&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;importance&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时我们该如何写参数呢</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body, FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    item_id: <span class="built_in">int</span>, item: Item, user: User, importance: <span class="built_in">int</span> = Body(<span class="params">...</span>)</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item, <span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;importance&quot;</span>: importance&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<h4 id="嵌入单一body参数"><a href="#嵌入单一body参数" class="headerlink" title="嵌入单一body参数"></a>嵌入单一body参数</h4><p>一般情况下，我们声明一个body参数时，fastapi会这样解析：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;tax&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们想要下面这样的结构呢</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;item&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;tax&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以这样写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body, FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><p>前面我们学习了如果给<code>Query</code>、<code>Path</code>增加验证限制，这里会介绍<code>Body</code>如何增加验证限制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body, FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(</span><br><span class="line">        <span class="literal">None</span>, title=<span class="string">&quot;The description of the item&quot;</span>, max_length=<span class="number">300</span></span><br><span class="line">    )</span><br><span class="line">    price: <span class="built_in">float</span> = Field(..., gt=<span class="number">0</span>, description=<span class="string">&quot;The price must be greater than zero&quot;</span>)</span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过上面的例子不难看出<code>Field</code>的属性和<code>Query</code>、<code>Path</code>是一样的。上面我们说过<code>Query</code>、<code>Path</code>是<code>Param</code>的子类，这里的<code>Field</code>本身是方法，返回了<code>FieldInfo</code>类，而<code>Param</code>是<code>FieldInfo</code>的子类，因此他们的属性都是一样的<img src="https://img-blog.csdnimg.cn/20200831142739112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><code>Body</code>也是一个方法，他返回了继承自<code>FieldInfo</code>的<code>Body</code>类<img src="https://img-blog.csdnimg.cn/20200831143036952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶（二）</title>
    <url>/2020/08/28/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<h2 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h2><p>这里我们来介绍一下POST请求时，fastapi是如何接收请求体的</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">item: Item</span>):</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>接下来，我们来拆解一下步骤：</p>
<p><strong>1. 导入<code>BaseModel</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br></pre></td></tr></table></figure>

<p><strong>2. 声明请求体结构，这个结构体是一个继承了<code>BaseModel</code>的类</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果指定了默认值，那么他就是非必填的；否则，这个参数就是必填的。<br>这里用None来表示参数为非必填，在传递参数时，可以不写这个参数<br>根据上面的结构体，我们可以这样传递参数：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;An optional description&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>: <span class="number">45.2</span>,</span><br><span class="line">    <span class="attr">&quot;tax&quot;</span>: <span class="number">3.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>: <span class="number">45.2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 将声明好的结构体添加到方法中</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">item: Item</span>):</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>这时，我们的接口已经初步完成，当有请求进来是，fastapi会这样做：</p>
<ol>
<li> 读取json格式的请求体</li>
<li> 将参数转换为对应的类型</li>
<li> 验证数据是否合法，如果不符合定义的类型会返回错误的字段及错误的原因</li>
</ol>
<p>运行服务，打开<code>http://127.0.0.1:8000/docs</code>，可以看到:<br><img src="https://img-blog.csdnimg.cn/20200828145020619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200828144920693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Request-body-path-query-parameters"><a href="#Request-body-path-query-parameters" class="headerlink" title="Request body + path + query parameters"></a>Request body + path + query parameters</h2><p>在<a href="https://blog.csdn.net/weixin_40156487/article/details/102496066">fastapi教程——进阶（一）</a>我们已经学过了如何声明path和query参数，接下来我们把它们整理到一起：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    result = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, **item.<span class="built_in">dict</span>()&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        result.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>这个接口的方法将会这样获取参数：</p>
<ol>
<li> 如果在路径中声明了该参数，那么他就会被传递给<code>item_id</code></li>
<li> 如果在查询参数中指定了参数，那么他就会被传递给<code>q</code></li>
<li> 如果在请求体中指定了参数，那么他就会被传递给<code>item</code></li>
</ol>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程——进阶（一）</title>
    <url>/2019/10/11/fastapi%E6%95%99%E7%A8%8B%E2%80%94%E2%80%94%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一个简单的栗子"><a href="#一个简单的栗子" class="headerlink" title="一个简单的栗子"></a>一个简单的栗子</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<blockquote>
<p>FASTAPI继承Starlette，因此在Starlette中的所有可调用的对象在FASTAPI中可以直接引用</p>
</blockquote>
<h2 id="编写步骤"><a href="#编写步骤" class="headerlink" title="编写步骤"></a>编写步骤</h2><p><strong>步骤一</strong>：导入FastAPI</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br></pre></td></tr></table></figure>

<p><strong>步骤二</strong>：创建FastAPI实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = FastAPI()</span><br></pre></td></tr></table></figure>

<p><strong>步骤三</strong>：创建访问路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>这个路径告诉FastAPI，该装饰器下的方法是用来处理路径是<code>“/”</code>的<code>GET</code>请求<br>步骤四：定义方法，处理请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">root</span>():</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤五</strong>：返回响应信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤六</strong>：运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>

<h2 id="获取路径参数"><a href="#获取路径参数" class="headerlink" title="获取路径参数"></a>获取路径参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<p>路径中的<code>item_id</code>将会被解析，传递给方法中的<code>item_id</code>。请求<code>http://127.0.0.1:8000/items/foo</code>会返回如下结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;item_id&quot;</span>:<span class="string">&quot;foo&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在方法中定义参数类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<p>继续请求<code>http://127.0.0.1:8000/items/3</code>，会返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;item_id&quot;</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>此时的<code>item_id</code>是<code>int</code>类型的3，而不是<code>string</code>类型，这是因为FastAPI在解析请求时，自动根据声明的类型进行了解析<br>如果请求<code>http://127.0.0.1:8000/items/foo</code>，此时会返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;detail&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;loc&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;path&quot;</span>,</span><br><span class="line">                <span class="string">&quot;item_id&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;value is not a valid integer&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;type_error.integer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是因为<code>foo</code>并不能转换成<code>int</code>类型。请求<code>http://127.0.0.1:8000/items/4.2</code>也会出现上述错误</p>
<blockquote>
<p>所有的数据类型验证，都是通过<code>Pydantic</code>完成的</p>
</blockquote>
<p>如果想对路径参数做一个<code>预定义</code>，可以使用<code>Enum</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName</span>(<span class="params"><span class="built_in">str</span>, Enum</span>):</span></span><br><span class="line">    alexnet = <span class="string">&quot;alexnet&quot;</span></span><br><span class="line">    resnet = <span class="string">&quot;resnet&quot;</span></span><br><span class="line">    lenet = <span class="string">&quot;lenet&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/model/&#123;model_name&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_model</span>(<span class="params">model_name: ModelName</span>):</span></span><br><span class="line">    <span class="keyword">if</span> model_name == ModelName.alexnet:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Deep Learning FTW!&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> model_name.value == <span class="string">&quot;lenet&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;LeCNN all the images&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Have some residuals&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>打开<code>http://127.0.0.1:8000/docs</code>:<br><img src="https://img-blog.csdnimg.cn/20191011113101177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>除此之外，假如想接收一个路径参数，它本身就是一个路径，就像<code>/files/&#123;file_path&#125;</code>，而这个file_path是<code>home/johndoe/myfile.txt</code>时，可以写成<code>/files/&#123;file_path:path&#125;</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/files/&#123;file_path:path&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_user_me</span>(<span class="params">file_path: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;file_path&quot;</span>: file_path&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>OpenAPI本身不支持在路径参数包含路径，但是可以当作Starlette内部的一个使用方法</p>
</blockquote>
<p>此时访问<code>http://127.0.0.1:8000/files/home/johndoe/myfile.txt</code>，返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;file_path&quot;</span>:<span class="string">&quot;home/johndoe/myfile.txt&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果将路径改为<code>/files/&#123;file_path&#125;</code>，会返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;detail&quot;</span>:<span class="string">&quot;Not Found&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取查询参数"><a href="#获取查询参数" class="headerlink" title="获取查询参数"></a>获取查询参数</h2><p>这里依旧是一个栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">fake_items_db = [&#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">10</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> fake_items_db[skip : skip + limit]</span><br></pre></td></tr></table></figure>

<p>尝试访问<code>http://127.0.0.1:8000/items/?skip=0&amp;limit=2</code>，返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&quot;item_name&quot;</span>:<span class="string">&quot;Foo&quot;</span>&#125;,&#123;<span class="string">&quot;item_name&quot;</span>:<span class="string">&quot;Bar&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>尝试访问<code>http://127.0.0.1:8000/items/</code>，返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&quot;item_name&quot;</span>:<span class="string">&quot;Foo&quot;</span>&#125;,&#123;<span class="string">&quot;item_name&quot;</span>:<span class="string">&quot;Bar&quot;</span>&#125;,&#123;<span class="string">&quot;item_name&quot;</span>:<span class="string">&quot;Baz&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>由于我们在定义方法的时候，分别赋予<code>skip</code>和<code>limit</code>默认值，当不添加querystring时，会使用默认值。当然，我们也可以将默认值赋值为<code>None</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">str</span>, q: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<p>此时，我们请求<code>http://127.0.0.1:8000/items/1?q=qqq</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;item_id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;q&quot;</span>:<span class="string">&quot;qqq&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值得放心的一点是，FastAPI很聪明，他知道参数来自哪里～</p>
</blockquote>
<p>假如，我们不给参数默认值会发生什么情况呢？这里还是一个栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_user_item</span>(<span class="params">item_id: <span class="built_in">str</span>, needy: <span class="built_in">str</span></span>):</span></span><br><span class="line">    item = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;needy&quot;</span>: needy&#125;</span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>继续请求<code>http://127.0.0.1:8000/items/1</code>，会发现，返回报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;detail&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;loc&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;query&quot;</span>,</span><br><span class="line">        <span class="string">&quot;needy&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;field required&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;value_error.missing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>fastapi python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask + SQLAlchemy设置读写分离</title>
    <url>/2019/12/04/flask%20+%20SQLAlchemy%E8%AE%BE%E7%BD%AE%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="https://www.jb51.net/article/174365.htm">https://www.jb51.net/article/174365.htm</a><br><a href="https://gist.github.com/trustrachel/6828122#file-routing-py">https://gist.github.com/trustrachel/6828122#file-routing-py</a></p>
</blockquote>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在配置中添加以下配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">SQLALCHEMY_BINDS = &#123;</span><br><span class="line">        <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>改写session</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy, get_state</span><br><span class="line"><span class="keyword">import</span> sqlalchemy.orm <span class="keyword">as</span> orm</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">log = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoRouteSession</span>(<span class="params">orm.Session</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, db, autocommit=<span class="literal">False</span>, autoflush=<span class="literal">False</span>, **options</span>):</span></span><br><span class="line">        self.app = db.get_app()</span><br><span class="line">        self._model_changes = &#123;&#125;</span><br><span class="line">        orm.Session.__init__(self, autocommit=autocommit, autoflush=autoflush,</span><br><span class="line">                             bind=db.engine,</span><br><span class="line">                             binds=db.get_binds(self.app), **options)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bind</span>(<span class="params">self, mapper=<span class="literal">None</span>, clause=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据配置及读写操作，自动更改数据库引擎</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            mapper:</span></span><br><span class="line"><span class="string">            clause:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            state = get_state(self.app)</span><br><span class="line">        <span class="keyword">except</span> (AssertionError, AttributeError, TypeError) <span class="keyword">as</span> err:</span><br><span class="line">            log.info(<span class="string">&quot;获取配置失败，使用默认数据库:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(err))</span><br><span class="line">            <span class="keyword">return</span> orm.Session.get_bind(self, mapper, clause)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果没有设置SQLALCHEMY_BINDS，则默认使用SQLALCHEMY_DATABASE_URI</span></span><br><span class="line">        <span class="keyword">if</span> state <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> self.app.config[<span class="string">&#x27;SQLALCHEMY_BINDS&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.app.debug:</span><br><span class="line">                log.debug(<span class="string">&quot;未获取数据库绑定信息(SQLALCHEMY_BINDS),使用默认数据库&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> orm.Session.get_bind(self, mapper, clause)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># insert、update、delete操作使用master</span></span><br><span class="line">        <span class="keyword">elif</span> self._flushing:</span><br><span class="line">            log.debug(<span class="string">&quot;当前使用master&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> state.db.get_engine(self.app, bind=<span class="string">&#x27;master&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 其他操作使用slave</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log.debug(<span class="string">&quot;当前使用slave&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> state.db.get_engine(self.app, bind=<span class="string">&#x27;slave&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoRouteSQLAlchemy</span>(<span class="params">SQLAlchemy</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_scoped_session</span>(<span class="params">self, options=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用于工厂类创建session</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            options:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> options <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            options = &#123;&#125;</span><br><span class="line">        scopefunc = options.pop(<span class="string">&#x27;scopefunc&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> orm.scoped_session(</span><br><span class="line">            partial(AutoRouteSession, self, **options), scopefunc=scopefunc</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>实例化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = AutoRouteSQLAlchemy()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>flask sqlalchemy flask sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode自测答题——2019-01-13</title>
    <url>/2019/01/13/leetcode%E8%87%AA%E6%B5%8B%E7%AD%94%E9%A2%98%E2%80%94%E2%80%942019-01-13/</url>
    <content><![CDATA[<p>emmmm决定从今天开始刷leetcode。。。在这里记录一下我的答题思路和结果吧。可能不是最棒的。如果大家有更好的解题思路请多多指教～</p>
<h2 id="给定一个字符串，请你找出其中不含有重复字符的-最长子串-的长度。"><a href="#给定一个字符串，请你找出其中不含有重复字符的-最长子串-的长度。" class="headerlink" title="给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。"></a>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</h2><span id="more"></span>

<p>原题：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a><br><img src="https://img-blog.csdnimg.cn/20190113172119403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这里利用了窗口滑动的效果。当已经确定[i, j]中没有重复元素的时候，就可以直接看j+1在不在[i-1, j]中就可以了。最后不要忘记，如果字符串长度为1的情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def lengthOfLongestSubstring(self, s):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        no_same = []</span><br><span class="line">        i = 0</span><br><span class="line">        max_len = 0</span><br><span class="line">        while i &lt; len(s):</span><br><span class="line">            if s[i] not in no_same:</span><br><span class="line">                no_same.append(s[i])</span><br><span class="line">                i += 1</span><br><span class="line">            else:</span><br><span class="line">                max_len = max([max_len, len(no_same)])</span><br><span class="line">                no_same.pop(0)</span><br><span class="line">        max_len = max([max_len, len(no_same)])</span><br><span class="line">        return max_len</span><br></pre></td></tr></table></figure>

<h2 id="寻找两个有序数组的中位数"><a href="#寻找两个有序数组的中位数" class="headerlink" title="寻找两个有序数组的中位数"></a>寻找两个有序数组的中位数</h2><p>原题：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190113172104682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里我用了最简单的合并，排序。但是时间复杂度是O(m+n)，并不符合题目= =。(待完成)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def findMedianSortedArrays(self, nums1, nums2):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type nums1: List[int]</span><br><span class="line">        :type nums2: List[int]</span><br><span class="line">        :rtype: float</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        nums1.extend(nums2)</span><br><span class="line">        new = sorted(nums1)</span><br><span class="line">        if len(new) % 2 == 0:</span><br><span class="line">            i = (0 + len(new)) // 2</span><br><span class="line">            middle = (new[i-1] + new[i]) / 2</span><br><span class="line">        else:</span><br><span class="line">            i = (0 + len(new) - 1) // 2</span><br><span class="line">            middle = new[i]</span><br><span class="line">        return middle</span><br></pre></td></tr></table></figure>

<h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p>原题：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190113172053140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>回文，说简单了就是顺序读和倒序读是一样的。或者说，从中心开始，依次往外依次扩散的字符都相同。因此，以这个为思路，从中心出发。但是，字符串长度可能是奇数，也可能是偶数。因此需要考虑这两种情况，以下是图解：</p>
<p><img src="https://img-blog.csdnimg.cn/20190113172025844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def longestPalindrome(self, s):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        longest_str = str()</span><br><span class="line">        for i in range(len(s)):</span><br><span class="line">            lstr = get_around_string(s, i, i)</span><br><span class="line">            rstr = get_around_string(s, i, i+1)</span><br><span class="line">            longe_str = lstr if len(lstr) &gt;= len(rstr) else rstr</span><br><span class="line">            longest_str = longe_str if len(longe_str) &gt;= len(longest_str) else longest_str</span><br><span class="line">        return longest_str</span><br><span class="line"></span><br><span class="line">def get_around_string(s, left, right):</span><br><span class="line">    while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</span><br><span class="line">        left -= 1</span><br><span class="line">        right += 1</span><br><span class="line">    left += 1</span><br><span class="line">    return s[left: right]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python 算法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql innodb索引结构及相关原理</title>
    <url>/2019/12/30/mysql%20innodb%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>最近在优化线上代码，优化过程中，对数据库进行了一系列的学习和基础巩固，看了很多大佬写的文章，整理了一下，记录在这里～</p>
</blockquote>
<p>参考文档：</p>
<ul>
<li><a href="https://juejin.im/post/5def29f2518825121f6994f7#heading-2">清空认知，然后重新理解MySQL索引结构</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></li>
</ul>
<span id="more"></span>

<h2 id="B-tree的结构"><a href="#B-tree的结构" class="headerlink" title="B+tree的结构"></a>B+tree的结构</h2><h3 id="页"><a href="#页" class="headerlink" title="页"></a>页</h3><p>在操作系统中，当我们往磁盘中取数据的时候，如果我们想要取出1kb的数据时，会发现，操作系统取出了4kb的数据，这是因为操作系统中<code>页</code>的大小是4kb。这是为什么呢？</p>
<p>当一个程序访问了一条数据之后，很有可能在此访问这条数据或访问这条数据相邻的数据。因此，干脆直接把4kb的数据全部取出，放到内存中，下次再来访问时，直接从内存中取出，减少了磁盘IO。</p>
<p>假设，我们现在有一张用户表，我们要找出id=5的数据，在没了解页这个概念之前，最原始的方法就是<code>遍历</code>。我们会不断的从磁盘中取出一条数据，然后判断这条数据是不是id=5，如果不等于，会继续向后遍历，此时，我们会查找5次，也就是经过了5次磁盘IO。</p>
<p>现在，我们将页引入，当我们取出id=1的数据时，操作系统会将id=1所在页的全部数据(id=1到id=4)取出，放到内存中，我们继续向后遍历，接下来的遍历，会从内存中取出；当取出id=5的数据时，操作系统会再次将该id所在页全部取出。此时我们会发现，只经过了2次磁盘IO</p>
<blockquote>
<p>在MySQL的InnoDb引擎中，页的大小是16KB，是操作系统的4倍，而int类型的数据是4个字节，其它类型的数据的字节数通常也在4000字节以内，所以一页是可以存放很多很多条数据的，而MySQL的数据正是以<code>页</code>为基本单位组合而成的。</p>
</blockquote>
<p>页的结构如下：<br><img src="https://img-blog.csdnimg.cn/2019122716195320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="页目录"><a href="#页目录" class="headerlink" title="页目录"></a>页目录</h3><blockquote>
<p>通过对上面页的了解，我们在查找数据的时候，已经可以做到减少磁盘IO了。但是我们可以发现其实页中的数据结构就是一个<code>链表</code>。<strong>链表的优点是插入和删除很快，但是查询需要按指针方向去遍历</strong>。假设现在一页中有上百万条数据，最坏的情况他可能会遍历上百万次，即使在内存中，效率也不高。</p>
</blockquote>
<p>页目录就像书目录一样，会告诉我们哪个标题从哪一页开始。页目录的结构如下：<br><img src="https://img-blog.csdnimg.cn/20191227164059671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lag5GLOy-1577436044948)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p158)]"></p>
<p>假设我们查找id=3的数据，首先会找到目录2，然后对目录2中的数据进行查找。当然我们能通过目录快速的找到数据，其实主要基于这些数据已经经过了排序。因此，可以得知，<strong>在我们插入数据时，数据库会对数据进行排序。</strong></p>
<p>当然，不可能只有一页数据，多页数据的结构如下：<img src="https://img-blog.csdnimg.cn/20191227171413247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是需要注意的是，<strong>在开辟新页的时候，数据并不一定在新开辟的页上，而是需要进行和所有页的数据的比较，从而来决定数据存放的位置</strong>。</p>
<h3 id="目录页"><a href="#目录页" class="headerlink" title="目录页"></a>目录页</h3><blockquote>
<p>从上图我们可以发现，多页之间也是通过指针相连，他们其实就是链表。如果页的数量过多，又会造成遍历过多，此时，我可以想到，有没有一个结构，可以像页目录那样，可以优化页内数据呢？</p>
</blockquote>
<p>页内数据和多页他们本质上都是链表，所以我们可以采用相同的方式优化，这种方式叫目录页。<br><img src="https://img-blog.csdnimg.cn/20191227182639980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要注意的是，<strong>目录页的本质也是页，但是，普通页中村的数据是项目数据，而目录页中村的数据是普通页的地址。</strong></p>
<h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B+tree"></a>B+tree</h3><p><img src="https://img-blog.csdnimg.cn/20191230114721619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上面的图我们已经可以看出，这其实就是b+tree的结构了。一般来说，树的深度是3层；每个叶子就是数据页，非叶子结点就是目录页；叶子结点存放真实的数据，而非叶子结点存放目录，也就是索引。</p>
<p>它的优势有以下几点：</p>
<ol>
<li> 由于叶子结点上存放了所有的数据，并且有指针相连，每个叶子结点在逻辑上是相连的，所以对范围查找比较友好；</li>
<li> B+tree所有的数据都在叶子结点上，所以查询效率稳定，一般都是查询三次；</li>
<li> 有利于数据库的扫描；</li>
<li> 有利于磁盘的IO，因为他的层高不会因为数据扩大而增高（三层树高大概可以存放2000万的数据量）；</li>
</ol>
<h2 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a>InnoDB索引</h2><p>我们都知道innodb索引的结构是B+tree，那么，他是怎样存放数据的呢？<br><img src="https://img-blog.csdnimg.cn/20191230142910144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过上面的图，我们可以得到以下信息：innodb的数据文件本身就是按B+tree组织的索引结构，<strong>叶子结点存放了表的完整数据</strong>，key是数据表的主键，因此，<strong>innodb数据表文件本身就是主索引</strong>。</p>
<blockquote>
<p>像这种叶子结点包含完整数据的结构，我们叫它<code>聚簇索引</code>。聚簇索引是按照每张表的主键构造的一颗B+树，树的叶子结点存放着表中行数据。由于每张表的主键只有一个，因此<strong>数据库中每张表只有一个聚簇索引。</strong><br>因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p>
</blockquote>
<p>除了主索引，还有辅助索引。每张表的辅助索引可以有多个，它的叶子结点不同于主索引，辅助索引存储着相应记录主键的值。也就是说，innodb的所有辅助索引都引用主键作为data。<br><img src="https://img-blog.csdnimg.cn/20191230142849309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>辅助索引也可以叫做<code>非聚簇索引</code>。非聚簇索引就是将数据和索引分开，查找时需要先查找到索引，然后通过索引回表找到相应的数据。</p>
</blockquote>
<p><strong>因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大，所以不建议使用过长的字段作为主键。</strong></p>
]]></content>
      <categories>
        <category>myql</category>
      </categories>
      <tags>
        <tag>数据库 mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>py3.7标准库-collections-ChainMap</title>
    <url>/2018/09/13/py3.7%E6%A0%87%E5%87%86%E5%BA%93-collections-ChainMap/</url>
    <content><![CDATA[<h2 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a><strong>ChainMap</strong></h2><p><code>ChainMap</code>类提供一个快速链接多个映射（字典）的操作。通常情况下，他会比创建字典然后调用<code>update()</code>快。</p>
<p>该类可用于模拟嵌套作用域，在模板中很有用。</p>
<span id="more"></span>

<p>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">collections</span>.<span class="title">ChainMap</span>(<span class="params">*maps</span>)</span></span><br></pre></td></tr></table></figure>

<p><code>ChainMap</code>类组合多个字典或其他映射到一个可更新的、单一的对象中。如果没有指定<code>maps</code>，就会提供一个空字典，以此来保证每个新链中都会有至少一个字典（映射）</p>
<p>底层映射存储在列表中。 该列表是公共的，可以使用<code>maps</code>属性访问或更新。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;guest&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m2 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;drfish&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain_map = ChainMap(m1, m2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain_map</span><br><span class="line">ChainMap(&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;guest&#x27;</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;drfish&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;18&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(chain_map.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">drfish</span><br></pre></td></tr></table></figure>

<p>支持所有常用的字典方法。除此之外，还支持以下属性：</p>
<ul>
<li><p><strong>maps</strong></p>
<p>返回一个用户可以更新的映射列表。他是按照搜索顺序排序的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; chain_map.maps</span><br><span class="line">[&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;user&#x27;: &#x27;guest&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;drfish&#x27;, &#x27;age&#x27;: &#x27;18&#x27;&#125;]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>new_child(m=None)</strong></p>
<p>返回一个新的ChainMap，这个新ChainMap包含新添加的map，并且这个map在首位。如果没有指定m，那么就会在最前面添加一个空dict。因此<code>d.new_child()</code>相当于<code>ChainMap(&#123;&#125;, *d.maps)</code>。</p>
<p>需要注意的是，这将产生一个全新的ChainMap，和之前的互不干扰</p>
<p>读一下源码会更容易理解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def new_child(self, m=None):                # like Django&#x27;s Context.push()</span><br><span class="line">  &#x27;&#x27;&#x27;New ChainMap with a new map followed by all previous maps.</span><br><span class="line">  If no map is provided, an empty dict is used.</span><br><span class="line">  &#x27;&#x27;&#x27;</span><br><span class="line">  if m is None:</span><br><span class="line">      m = &#123;&#125;</span><br><span class="line">  return self.__class__(m, *self.maps)</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m3 = &#123;&#x27;data&#x27;: &#x27;1-6&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; chain_map.new_child(m=m3)</span><br><span class="line">ChainMap(&#123;&#x27;data&#x27;: &#x27;1-6&#x27;&#125;, &#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;user&#x27;: &#x27;guest&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;drfish&#x27;, &#x27;age&#x27;: &#x27;18&#x27;&#125;)</span><br><span class="line">&gt;&gt;&gt; chain_map</span><br><span class="line">ChainMap(&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;user&#x27;: &#x27;guest&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;drfish&#x27;, &#x27;age&#x27;: &#x27;18&#x27;&#125;)</span><br><span class="line">&gt;&gt;&gt; id(chain_map.new_child(m=m3))</span><br><span class="line">4496700080</span><br><span class="line">&gt;&gt;&gt; id(chain_map)</span><br><span class="line">4496631176</span><br></pre></td></tr></table></figure></li>
<li><p><strong>parents</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@property</span><br><span class="line">def parents(self):                          # like Django&#x27;s Context.pop()</span><br><span class="line">  &#x27;New ChainMap from maps[1:].&#x27;</span><br><span class="line">  return self.__class__(*self.maps[1:])</span><br></pre></td></tr></table></figure>

<p>返回一个新的ChainMap，这个新ChainMap不包括第一个dict。这个对于跳过第一个map搜索很有用。<code>d.parents</code>大致相当于<code>ChainMap(*d.maps[1:])</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; chain_map.parents</span><br><span class="line">ChainMap(&#123;&#x27;name&#x27;: &#x27;drfish&#x27;, &#x27;age&#x27;: &#x27;18&#x27;&#125;)</span><br><span class="line">&gt;&gt;&gt; id(chain_map.parents)</span><br><span class="line">4492113680</span><br><span class="line">&gt;&gt;&gt; id(chain_map)</span><br><span class="line">4496631176</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python3.7标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>py3.7标准库-collections-Counter</title>
    <url>/2018/09/13/py3.7%E6%A0%87%E5%87%86%E5%BA%93-collections-Counter/</url>
    <content><![CDATA[<h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a><strong>Counter</strong></h2><p>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">collections</span>.<span class="title">Counter</span>(<span class="params">[iterable-<span class="keyword">or</span>-mapping]</span>)</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>源码中，简单介绍了一些用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(<span class="string">&#x27;abcdeabcdabcaba&#x27;</span>)  <span class="comment"># count elements from a string</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.most_common(<span class="number">3</span>)                <span class="comment"># three most common elements</span></span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(c)                       <span class="comment"># list all unique elements</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(c.elements()))   <span class="comment"># list elements with repetitions</span></span><br><span class="line"><span class="string">&#x27;aaaaabbbbcccdde&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(c.values())                 <span class="comment"># total of all counts</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;a&#x27;</span>]                          <span class="comment"># count of letter &#x27;a&#x27;</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> elem <span class="keyword">in</span> <span class="string">&#x27;shazam&#x27;</span>:           <span class="comment"># update counts from an iterable</span></span><br><span class="line"><span class="meta">... </span>    c[elem] += <span class="number">1</span>                <span class="comment"># by adding 1 to each element&#x27;s count</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;a&#x27;</span>]                          <span class="comment"># now there are seven &#x27;a&#x27;</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c[<span class="string">&#x27;b&#x27;</span>]                      <span class="comment"># remove all &#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;b&#x27;</span>]                          <span class="comment"># now there are zero &#x27;b&#x27;</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(<span class="string">&#x27;simsalabim&#x27;</span>)       <span class="comment"># make another counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.update(d)                     <span class="comment"># add in the second counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;a&#x27;</span>]                          <span class="comment"># now there are nine &#x27;a&#x27;</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.clear()                       <span class="comment"># empty the counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter()</span><br><span class="line"></span><br><span class="line">Note:  If a count <span class="keyword">is</span> <span class="built_in">set</span> to zero <span class="keyword">or</span> reduced to zero, it will remain</span><br><span class="line"><span class="keyword">in</span> the counter until the entry <span class="keyword">is</span> deleted <span class="keyword">or</span> the counter <span class="keyword">is</span> cleared:</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(<span class="string">&#x27;aaabbc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;b&#x27;</span>] -= <span class="number">2</span>                     <span class="comment"># reduce the count of &#x27;b&#x27; by two</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.most_common()                 <span class="comment"># &#x27;b&#x27; is still in, but its count is zero</span></span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure>

<p><code>Counter</code>是dict的子类，可以用来计算可哈希对象的数量。它是一个无序的集合，并且元素作为dict的key，数量作为dict的value。数量可以是任意整数值，包括0和负数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()                           <span class="comment"># a new, empty counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">&quot;adfadf&quot;</span>)                       <span class="comment"># a new counter from an iterables</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">2</span>&#125;)           </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(&#123;<span class="string">&#x27;red&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;blue&#x27;</span>: <span class="number">2</span>&#125;)          <span class="comment"># a new counter from a mapping</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;red&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;blue&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(cats=<span class="number">4</span>, dogs=<span class="number">8</span>)                 <span class="comment"># a new counter from keyword args</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;dogs&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;cats&#x27;</span>: <span class="number">4</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>对于那些不存在的元素，如果想要获取它，Counter会返回0，而不会引发<code>KeyError</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter([<span class="string">&#x27;eggs&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;bacon&#x27;</span>]                              <span class="comment"># count of a missing element is zero</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>从源码中可以看出来为什么不引发<code>KeyError</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__missing__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">    <span class="string">&#x27;The count of elements not in the Counter is zero.&#x27;</span></span><br><span class="line">    <span class="comment"># Needed so that self[missing_item] does not raise KeyError</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>如果count设置为零或减少为零，它将保留在counter中，直到删除该条目或清除计数器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;sausage&#x27;</span>] = <span class="number">0</span>                        <span class="comment"># counter entry with a zero count</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c[<span class="string">&#x27;sausage&#x27;</span>]  </span><br></pre></td></tr></table></figure>

<p>由于Counter是dict的子类，因此他具备dict的方法。除此之外，它还具备以下方法：</p>
<ul>
<li><p><strong>elements()</strong></p>
<p>返回每一个元素，元素会根据个数重复count次，并且是以任意顺序返回的。如果元素的个数小于1(包括负值)，那么就会被忽略不返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; c = Counter(a=4, b=2, c=0, d=-2)</span><br><span class="line">&gt;&gt;&gt; sorted(c.elements())</span><br><span class="line">[&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;b&#x27;]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>most_common([n])</strong></p>
<p>返回n个最常见元素及其计数的列表，从最常见到最少。 如果省略n或None，则most_common（）返回计数器中的所有元素。 具有相同计数的元素是任意排序的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Counter(&#x27;abracadabra&#x27;).most_common(3)  </span><br><span class="line">[(&#x27;a&#x27;, 5), (&#x27;r&#x27;, 2), (&#x27;b&#x27;, 2)]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>subtract([iterable-or-mapping])</strong></p>
<p>根据迭代器或映射中对当前元素进行加减操作。和<code>dict.update()</code>类似，但是注意，是操作，而不是替换。输入和输出可以为0或负数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; c = Counter(a=4, b=2, c=0, d=-2)</span><br><span class="line">&gt;&gt;&gt; d = Counter(a=1, b=2, c=3, d=4)</span><br><span class="line">&gt;&gt;&gt; c.subtract(d)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">Counter(&#123;&#x27;a&#x27;: 3, &#x27;b&#x27;: 0, &#x27;c&#x27;: -3, &#x27;d&#x27;: -6&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通常情况下，Counter对象和字典具有相同的方法。但是以下两个方法会有所不同：</p>
<ul>
<li><p><strong>fromkeys(iterable)</strong></p>
<p>Counter类没有实现这个方法</p>
</li>
<li><p><strong>update([iterable-or-mapping])</strong></p>
<p>和<code>dict.update()</code>相似，但是是进行加减操作，而不是替换。</p>
<p>从源码看，更容易理解一些：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  def update(*args, **kwds):</span><br><span class="line">&#x27;&#x27;&#x27;Like dict.update() but add counts instead of replacing them.</span><br><span class="line"></span><br><span class="line">Source can be an iterable, a dictionary, or another Counter instance.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; c = Counter(&#x27;which&#x27;)</span><br><span class="line">&gt;&gt;&gt; c.update(&#x27;witch&#x27;)           # add elements from another iterable</span><br><span class="line">&gt;&gt;&gt; d = Counter(&#x27;watch&#x27;)</span><br><span class="line">&gt;&gt;&gt; c.update(d)                 # add elements from another counter</span><br><span class="line">&gt;&gt;&gt; c[&#x27;h&#x27;]                      # four &#x27;h&#x27; in which, witch, and watch</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"># The regular dict.update() operation makes no sense here because the</span><br><span class="line"># replace behavior results in the some of original untouched counts</span><br><span class="line"># being mixed-in with all of the other counts for a mismash that</span><br><span class="line"># doesn&#x27;t have a straight-forward interpretation in most counting</span><br><span class="line"># contexts.  Instead, we implement straight-addition.  Both the inputs</span><br><span class="line"># and outputs are allowed to contain zero and negative counts.</span><br><span class="line"></span><br><span class="line">if not args:</span><br><span class="line">  raise TypeError(&quot;descriptor &#x27;update&#x27; of &#x27;Counter&#x27; object &quot;</span><br><span class="line">                  &quot;needs an argument&quot;)</span><br><span class="line">self, *args = args</span><br><span class="line">if len(args) &gt; 1:</span><br><span class="line">  raise TypeError(&#x27;expected at most 1 arguments, got %d&#x27; % len(args))</span><br><span class="line">iterable = args[0] if args else None</span><br><span class="line">if iterable is not None:</span><br><span class="line">  if isinstance(iterable, _collections_abc.Mapping):</span><br><span class="line">      if self:</span><br><span class="line">          self_get = self.get</span><br><span class="line">          for elem, count in iterable.items():</span><br><span class="line">              self[elem] = count + self_get(elem, 0)</span><br><span class="line">      else:</span><br><span class="line">          super(Counter, self).update(iterable) # fast path when counter is empty</span><br><span class="line">  else:</span><br><span class="line">      _count_elements(self, iterable)</span><br><span class="line">if kwds:</span><br><span class="line">  self.update(kwds)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>官网给出一些常见操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(c.values())                 <span class="comment"># total of all counts</span></span><br><span class="line">c.clear()                       <span class="comment"># reset all counts</span></span><br><span class="line"><span class="built_in">list</span>(c)                         <span class="comment"># list unique elements</span></span><br><span class="line"><span class="built_in">set</span>(c)                          <span class="comment"># convert to a set</span></span><br><span class="line"><span class="built_in">dict</span>(c)                         <span class="comment"># convert to a regular dictionary</span></span><br><span class="line">c.items()                       <span class="comment"># convert to a list of (elem, cnt) pairs</span></span><br><span class="line">Counter(<span class="built_in">dict</span>(list_of_pairs))    <span class="comment"># convert from a list of (elem, cnt) pairs</span></span><br><span class="line">c.most_common()[:-n-<span class="number">1</span>:-<span class="number">1</span>]       <span class="comment"># n least common elements</span></span><br><span class="line">+c                              <span class="comment"># remove zero and negative counts</span></span><br></pre></td></tr></table></figure>

<p>提供了几个数学运算来组合Counter对象以生成多个集合（计数大于零的计数器）。 加法和减法通过添加或减去相应元素的计数来组合计数器。 &amp;和 | 返回相应计数的最小值和最大值。 每个操作都可以接受带有符号计数的输入，但输出将排除计数为零或更少的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">3</span>, b=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c + d                       <span class="comment"># add two counters together:  c[x] + d[x]</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c - d                       <span class="comment"># subtract (keeping only positive counts)</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c &amp; d                       <span class="comment"># intersection:  min(c[x], d[x]) </span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c | d                       <span class="comment"># union:  max(c[x], d[x])</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>一元加法和减法是用于添加空计数器或从空计数器中减去的快捷方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">2</span>, b=-<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>+c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>注意 : Counter主要用于处理正整数的计数。但是也不要忘记考虑其他类型或负值的情况。Counter类继承自dict，对于key和value是没有限制的。value除了数字也可以存储其他。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python3.7标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>py3.7标准库-collections-OrderedDict</title>
    <url>/2018/09/14/py3.7%E6%A0%87%E5%87%86%E5%BA%93-collections-OrderedDict/</url>
    <content><![CDATA[<h2 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a><strong>OrderedDict</strong></h2><p>OrderedDict和Dict一样，但是它记住了item插入到字典的顺序。当对有序字典进行迭代时，item会按照第一次插入到字典的顺序返回。</p>
<p>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">collections</span>.<span class="title">OrderedDict</span>(<span class="params">[items]</span>)</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>OrderedDict是dict的子类，支持dict的方法。OrderedDict是一个能记住插入key的顺序的dict。如果有新的item覆盖现有item时，位置不变。但如果是删除该item，再次插入后，将会移到最后。</p>
<ul>
<li><p><strong>popitem(last=True)</strong></p>
<p>该方法返回key-value键值对，并删除该键值对。当<code>last</code>为<code>True</code>时，是按照LIFO(后进先出)的顺序弹出；如果<code>last</code>为<code>False</code>，是按照FIFO(先进先出)的顺序弹出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import OrderedDict</span><br><span class="line">&gt;&gt;&gt; od = OrderedDict(a=1, b=2)</span><br><span class="line">&gt;&gt;&gt; od</span><br><span class="line">OrderedDict([(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2)])</span><br><span class="line">&gt;&gt;&gt; od.popitem(last=True)</span><br><span class="line">(&#x27;b&#x27;, 2)</span><br><span class="line">&gt;&gt;&gt; od = OrderedDict(a=1, b=2)</span><br><span class="line">&gt;&gt;&gt; od</span><br><span class="line">OrderedDict([(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2)])</span><br><span class="line">&gt;&gt;&gt; od.popitem(last=False)</span><br><span class="line">(&#x27;a&#x27;, 1)</span><br><span class="line">&gt;&gt;&gt; od</span><br><span class="line">OrderedDict([(&#x27;b&#x27;, 2)])</span><br></pre></td></tr></table></figure></li>
<li><p><strong>move_to_end(key, last=True)</strong></p>
<p>将现有键移动到有序字典的任一端。 如果<code>last</code>为<code>True</code>（默认值），则将item移动到右端;如果<code>last</code>为<code>False</code>，则将item移动到开头。 如果key不存在，则引发<code>KeyError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = OrderedDict.fromkeys(&#x27;abcde&#x27;)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">OrderedDict([(&#x27;a&#x27;, None), (&#x27;b&#x27;, None), (&#x27;c&#x27;, None), (&#x27;d&#x27;, None), (&#x27;e&#x27;, None)])</span><br><span class="line">&gt;&gt;&gt; d.move_to_end(&#x27;b&#x27;)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">OrderedDict([(&#x27;a&#x27;, None), (&#x27;c&#x27;, None), (&#x27;d&#x27;, None), (&#x27;e&#x27;, None), (&#x27;b&#x27;, None)])</span><br><span class="line">&gt;&gt;&gt; d.move_to_end(&#x27;b&#x27;, last=False)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">OrderedDict([(&#x27;b&#x27;, None), (&#x27;a&#x27;, None), (&#x27;c&#x27;, None), (&#x27;d&#x27;, None), (&#x27;e&#x27;, None)])</span><br></pre></td></tr></table></figure></li>
</ul>
<p>除了常用方法外，OrderedDict还支持<code>reversed()</code>来反转</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">reversed</span>(d)</span><br><span class="line">&lt;odict_iterator <span class="built_in">object</span> at <span class="number">0x10f813888</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(d):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e</span><br><span class="line">d</span><br><span class="line">c</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<p>由于OrderedDict会记住插入的顺序，因此它可以结合排序一起使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;banana&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;apple&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;pear&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>OrderedDict(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> t: t[<span class="number">0</span>]))</span><br><span class="line">OrderedDict([(<span class="string">&#x27;apple&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;banana&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;pear&#x27;</span>, <span class="number">1</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>OrderedDict(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> t: t[<span class="number">1</span>]))</span><br><span class="line">OrderedDict([(<span class="string">&#x27;pear&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;banana&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;apple&#x27;</span>, <span class="number">4</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>OrderedDict(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> t: <span class="built_in">len</span>(t[<span class="number">0</span>])))</span><br><span class="line">OrderedDict([(<span class="string">&#x27;pear&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;apple&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;banana&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>)])</span><br></pre></td></tr></table></figure>

<p>当删除排序后的OrderedDict的item时，顺序不会变；但如果是插入新的item到OrderedDict中，item会直接加在最后，并不会根据排序插入。</p>
<p>如果想自定义一个OrderedDict，当出现key值相同的item想插入时，希望可以插入，而不是覆盖，可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LastUpdatedOrderedDict</span>(<span class="params">OrderedDict</span>):</span></span><br><span class="line">    <span class="string">&#x27;Store items in the order the keys were last added&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">del</span> self[key]</span><br><span class="line">        OrderedDict.__setitem__(self, key, value)</span><br></pre></td></tr></table></figure>

<p>我们也可以同时继承<code>Counter</code>和<code>OrderedDict</code>。通过这个多继承，可以实现一个根据第一次遇到的不同元素的顺序来对元素进行计数。可能这样说起来有些绕嘴也很糊涂，还是上代码吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap, Counter, OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedCounter</span>(<span class="params">Counter, OrderedDict</span>):</span></span><br><span class="line">    <span class="string">&#x27;Counter that remembers the order elements are first encountered&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s(%r)&#x27;</span> % (self.__class__.__name__, OrderedDict(self))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__class__, (OrderedDict(self),)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    oc = OrderedCounter(<span class="string">&#x27;adddddbracadabra&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(oc)</span><br><span class="line"></span><br><span class="line">OrderedCounter(OrderedDict([(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">6</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>)]))</span><br></pre></td></tr></table></figure>

<p>原理是这样的：</p>
<p>调用类方法时，Python必须找到要执行的正确方法。有一个定义了搜索类顺序的一个排序，称为方法解析顺序或<code>mro</code>。<code>mro</code>可以通过<code>__mro__</code>查看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(OrderedCounter.__mro__)</span><br><span class="line"></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">OrderedCounter</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">collections</span>.<span class="title">Counter</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">collections</span>.<span class="title">OrderedDict</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;)</span></span><br></pre></td></tr></table></figure>

<p>当OrderedDict的实例调用<code>__setitem __()</code>时，它按顺序搜索类：<code>OrderedCounter</code>，<code>Counter</code>，<code>OrderedDict</code>(在这个类找到了调用的方法)。 所以像<code>oc[&#39;a&#39;] = 0</code>这样的语句最终会调用<code>OrderedDict.__setitem__()</code>。</p>
<p>相反，<code>__getitem__</code>不会被<code>mro</code>中的任何子类覆盖，因此<code>count = oc[&#39;a&#39;]</code>由<code>dict.__getitem__()</code>处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">oc = OrderedCounter()    </span><br><span class="line">oc[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>             <span class="comment"># this call uses OrderedDict.__setitem__</span></span><br><span class="line">count = oc[<span class="string">&#x27;a&#x27;</span>]         <span class="comment"># this call uses dict.__getitem__</span></span><br></pre></td></tr></table></figure>

<p>对于像<code>oc.update(&#39;foobar&#39;)</code>这样的语句，会发生更有趣的调用序列。首先，调用<code>Counter.update()</code>。<code>Counter.update()</code>的代码使用<code>self[elem] = count + self_get(elem, 0)</code>，然后它变成对<code>OrderedDict.__setitem__()</code>的调用。 并且该代码调用<code>dict.__setitem__()</code>。</p>
<p>注意:如果基类顺序颠倒，则不再有效。因为mro不同，从而导致调用过程中会调用错误的方法。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python3.7标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>py3.7标准库-collections-namedtuple</title>
    <url>/2018/09/10/py3.7%E6%A0%87%E5%87%86%E5%BA%93-collections-namedtuple/</url>
    <content><![CDATA[<p>collection模块实现了专门的容器数据类型，为Python的通用内置容器<code>dict</code>，<code>list</code>，<code>set</code>和<code>tuple</code>提供了替代方案。接下来，将分别介绍他们。</p>
<h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple()"></a><strong>namedtuple()</strong></h2><p>包含命名字段的元组工厂方法<br>命名元组为元组中的每个位置赋予含义，并允许更可读，自文档代码。<br>它们可以在使用常规元组的任何地方使用，并且它们添加了按名称而不是位置索引访问字段的功能。</p>
<span id="more"></span>

<p>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collections.namedtuple(typename, field_names, *, rename=<span class="literal">False</span>, defaults=<span class="literal">None</span>, module=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>返回一个名为<code>typename</code>的新元组子类。 新子类用于创建类似元组的对象，这些对象具有可通过属性查找访问的字段以及可索引和可迭代的字段。 子类的实例还有一个有用的文档字符串（带有<code>typename</code>和<code>field_names</code>）和一个有用的<code>__repr __()</code>方法，它以<code>name = value</code>格式列出元组内容。</p>
</li>
<li><p><code>field_names</code>是一系列字符串，例如<code>[&#39;x&#39;，&#39;y&#39;]</code>。 或者，<code>field_names</code>可以是单个字符串，每个字段名由<code>空格</code>和<code>/</code>或<code>逗号</code>分隔，例如<code>&#39;x y&#39;</code>或<code>&#39;x，y&#39;</code>。</p>
</li>
<li><p>除了以下划线开头的名称外，任何有效的Python标识符都可用于字段名。有效标识符由字母，数字和下划线组成，但不以数字或下划线开头，也不能是类，for，return，global，pass或raise等关键字。</p>
</li>
<li><p>如果<code>rename</code>为<code>true</code>，则无效的字段名称将自动替换为位置名称。 例如，<code>[&#39;abc&#39;，&#39;def&#39;，&#39;ghi&#39;，&#39;abc&#39;]</code>被转换为<code>[&#39;abc&#39;，&#39;_1&#39;，&#39;ghi&#39;，&#39;_3&#39;]</code>，消除了关键字<code>def</code>和重复的字段名<code>abc</code>。</p>
</li>
<li><p><code>defaults</code>可以是None或可迭代的默认值。 由于具有默认值的字段必须位于没有默认值的任何字段之后，因此默认值将应用于最右侧的参数。 例如，如果字段名是[‘x’，’y’，’z’]并且默认值是（1,2），则x将是必需参数，y将默认为1，z将默认为2。</p>
</li>
<li><p>如果定义了<code>module</code>，则将命名元组的<code>__module__</code>属性设置为该值。</p>
</li>
<li><p>命名的元组实例没有每个实例的字典，因此它们是轻量级的，并且不需要比常规元组更多的内存。</p>
</li>
</ul>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Basic example</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">11</span>, y=<span class="number">22</span>)     <span class="comment"># instantiate with positional or keyword arguments</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] + p[<span class="number">1</span>]             <span class="comment"># indexable like the plain tuple (11, 22)</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = p                <span class="comment"># unpack like a regular tuple</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y</span><br><span class="line">(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x + p.y               <span class="comment"># fields also accessible by name</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p                       <span class="comment"># readable __repr__ with a name=value style</span></span><br><span class="line">Point(x=<span class="number">11</span>, y=<span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>命名元组对于将字段名称分配给csv或sqlite3模块返回的结果元组特别有用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">EmployeeRecord = namedtuple(<span class="string">&#x27;EmployeeRecord&#x27;</span>, <span class="string">&#x27;name, age, title, department, paygrade&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">for</span> emp <span class="keyword">in</span> <span class="built_in">map</span>(EmployeeRecord._make, csv.reader(<span class="built_in">open</span>(<span class="string">&quot;employees.csv&quot;</span>, <span class="string">&quot;rb&quot;</span>))):</span><br><span class="line">    <span class="built_in">print</span>(emp.name, emp.title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;/companydata&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;SELECT name, age, title, department, paygrade FROM employees&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> emp <span class="keyword">in</span> <span class="built_in">map</span>(EmployeeRecord._make, cursor.fetchall()):</span><br><span class="line">    <span class="built_in">print</span>(emp.name, emp.title)</span><br></pre></td></tr></table></figure>

<p>除了从元组继承的方法之外，命名元组还支持三个额外的方法和两个属性。 为防止与字段名称冲突，方法和属性名称以下划线开头。</p>
<ul>
<li><p><strong>classmethod somenamedtuple._make(iterable)</strong></p>
<p>从现有序列或可迭代对象生成新的实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = [11, 22]</span><br><span class="line">&gt;&gt;&gt; Point._make(t)</span><br><span class="line">Point(x=11, y=22)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>somenamedtuple._asdict()</strong></p>
<p>返回一个新的OrderedDict，它将字段名称映射到它们对应的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; p = Point(x=11, y=22)</span><br><span class="line">&gt;&gt;&gt; p._asdict()</span><br><span class="line">OrderedDict([(&#x27;x&#x27;, 11), (&#x27;y&#x27;, 22)])</span><br></pre></td></tr></table></figure></li>
<li><p><strong>somenamedtuple._replace(**kwargs)</strong></p>
<p>返回namedtuple的新实例，用新值替换特定字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; p = Point(x=11, y=22)</span><br><span class="line">&gt;&gt;&gt; p._replace(x=33)</span><br><span class="line">Point(x=33, y=22)</span><br><span class="line">&gt;&gt;&gt;id(p._replace(x=66))</span><br><span class="line">4572244008</span><br><span class="line">&gt;&gt;&gt;id(p)</span><br><span class="line">4569821544</span><br></pre></td></tr></table></figure></li>
<li><p><strong>somenamedtuple._fields</strong></p>
<p>列出字段名称的字符串元组。 用于内省和从现有命名元组创建新的命名元组类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;p._fields            # view the field names</span><br><span class="line">(&#x27;x&#x27;, &#x27;y&#x27;)</span><br><span class="line">&gt;&gt;&gt; Color = namedtuple(&#x27;Color&#x27;, &#x27;red green blue&#x27;)</span><br><span class="line">&gt;&gt;&gt; Pixel = namedtuple(&#x27;Pixel&#x27;, Point._fields + Color._fields)</span><br><span class="line">&gt;&gt;&gt; Pixel(11, 22, 128, 255, 0)</span><br><span class="line">Pixel(x=11, y=22, red=128, green=255, blue=0)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>somenamedtuple._fields_defaults</strong></p>
<p>字典将字段名称映射到默认值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Account = namedtuple(&#x27;Account&#x27;, [&#x27;type&#x27;, &#x27;balance&#x27;], defaults=[0])</span><br><span class="line">&gt;&gt;&gt; Account._fields_defaults</span><br><span class="line">&#123;&#x27;balance&#x27;: 0&#125;</span><br><span class="line">&gt;&gt;&gt; Account(&#x27;premium&#x27;)</span><br><span class="line">Account(type=&#x27;premium&#x27;, balance=0)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>要检索一个对象的字段，使用<code>getattr()</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(p, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>

<p>要将字典转化为一个命名元组，使用<code>**x</code>的方式赋值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">22</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point(**d)</span><br><span class="line">Point(x=<span class="number">11</span>, y=<span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>由于命名元组是常规Python类，因此很容易使用子类添加或更改功能。 以下是添加计算字段和固定宽度打印格式的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Point(namedtuple(&#x27;Point&#x27;, [&#x27;x&#x27;, &#x27;y&#x27;])):</span><br><span class="line">...     __slots__ = ()</span><br><span class="line">...     @property</span><br><span class="line">...     def hypot(self):</span><br><span class="line">...         return (self.x ** 2 + self.y ** 2) ** 0.5</span><br><span class="line">...     def __str__(self):</span><br><span class="line">...         return &#x27;Point: x=%6.3f  y=%6.3f  hypot=%6.3f&#x27; % (self.x, self.y, self.hypot)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for p in Point(3, 4), Point(14, 5/7):</span><br><span class="line">...     print(p)</span><br><span class="line">Point: x= 3.000  y= 4.000  hypot= 5.000</span><br><span class="line">Point: x=14.000  y= 0.714  hypot=14.018</span><br></pre></td></tr></table></figure>

<p>上面显示的子类将<strong>slots</strong>设置为空元组。 这有助于防止创建实例字典，从而降低内存需求。</p>
<p>子类化对于添加新的存储字段没有用。 相反，只需从_fields属性创建一个新的命名元组类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Point3D = namedtuple(&#x27;Point3D&#x27;, Point._fields + (&#x27;z&#x27;,))</span><br></pre></td></tr></table></figure>

<p>可以通过直接分配<code>__doc__</code>字段来自定义文档字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Book = namedtuple(&#x27;Book&#x27;, [&#x27;id&#x27;, &#x27;title&#x27;, &#x27;authors&#x27;])</span><br><span class="line">&gt;&gt;&gt; Book.__doc__ += &#x27;: Hardcover book in active collection&#x27;</span><br><span class="line">&gt;&gt;&gt; Book.id.__doc__ = &#x27;13-digit ISBN&#x27;</span><br><span class="line">&gt;&gt;&gt; Book.title.__doc__ = &#x27;Title of first printing&#x27;</span><br><span class="line">&gt;&gt;&gt; Book.authors.__doc__ = &#x27;List of authors sorted by last name&#x27;</span><br></pre></td></tr></table></figure>

<p>通过使用<code>_replace()</code>对定制的已经有默认值的原型实例进行改造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Account = namedtuple(&#x27;Account&#x27;, &#x27;owner balance transaction_count&#x27;)</span><br><span class="line">&gt;&gt;&gt; default_account = Account(&#x27;&lt;owner name&gt;&#x27;, 0.0, 0)</span><br><span class="line">&gt;&gt;&gt; johns_account = default_account._replace(owner=&#x27;John&#x27;)</span><br><span class="line">&gt;&gt;&gt; janes_account = default_account._replace(owner=&#x27;Jane&#x27;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python3.7标准库 python python3.7标准库 python3.7标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>py3.7标准库-itertools</title>
    <url>/2018/09/07/py3.7%E6%A0%87%E5%87%86%E5%BA%93-itertools/</url>
    <content><![CDATA[<p>Python的内建模块itertools提供了非常有用的用于操作迭代对象的函数。</p>
<h3 id="itertools-count-start-0-step-1"><a href="#itertools-count-start-0-step-1" class="headerlink" title="itertools.count(start=0, step=1)"></a><strong>itertools.count(start=0, step=1)</strong></h3><p>创建一个迭代器，生成从n开始的连续整数，如果忽略n，则从0开始计算（注意：此迭代器不支持长整数)</p>
<span id="more"></span>

<p>如果超出了sys.maxint，计数器将溢出并继续从-sys.maxint-1开始计算。</p>
<p>当使用浮点数进行计数时，有时可以通过替换乘法代码来实现更高的准确率，例如：<code>(start + step * i for i in count())</code></p>
<p>该方法等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">start=<span class="number">0</span>, step=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="comment"># count(10) --&gt; 10 11 12 13 14 ...</span></span><br><span class="line">    <span class="comment"># count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...</span></span><br><span class="line">    n = start</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n += step</span><br></pre></td></tr></table></figure>

<h3 id="itertools-cycle-iterable"><a href="#itertools-cycle-iterable" class="headerlink" title="itertools.cycle(iterable)"></a><strong>itertools.cycle(iterable)</strong></h3><p>创造一个迭代器，复制从当前迭代器返回的每一个元素并将其保存到创建的迭代器中。当当前迭代器耗尽时，从创造的迭代器循环返回元素。</p>
<p>简单理解就是，传入一个序列，无限循环下去</p>
<p>大致相当于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="comment"># cycle(&#x27;ABCD&#x27;) --&gt; A B C D A B C D A B C D ...</span></span><br><span class="line">    saved = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> element</span><br><span class="line">        saved.append(element)</span><br><span class="line">    <span class="keyword">while</span> saved:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> saved:</span><br><span class="line">              <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure>

<h3 id="itertools-repeat-object-times"><a href="#itertools-repeat-object-times" class="headerlink" title="itertools.repeat(object[, times])"></a><strong>itertools.repeat(object[, times])</strong></h3><p>让迭代器一次又一次地返回对象。无限运行，除非指定了<code>times</code>参数控制重复次数</p>
<p>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span>(<span class="params"><span class="built_in">object</span>, times=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># repeat(10, 3) --&gt; 10 10 10</span></span><br><span class="line">    <span class="keyword">if</span> times <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">object</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p>repeat的一个常见用法是提供一个用于map或zip的常数流:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(map(pow, range(10), repeat(2)))</span><br><span class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure>

<h3 id="itertools-accumulate-iterable-func"><a href="#itertools-accumulate-iterable-func" class="headerlink" title="itertools.accumulate(iterable[, func])"></a><strong>itertools.accumulate(iterable[, func])</strong></h3><p>创建一个迭代器，它返回计算的累积和，或其他二进制函数的计算结果（这个二进制函数可以通过func参数指定）。如果指定了func参数，必须保证这个参数对应的函数可以接收两个参数。</p>
<p>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span>(<span class="params">iterable, func=operator.add</span>):</span></span><br><span class="line">    <span class="string">&#x27;Return running totals&#x27;</span></span><br><span class="line">    <span class="comment"># accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</span></span><br><span class="line">    <span class="comment"># accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120</span></span><br><span class="line">    it = <span class="built_in">iter</span>(iterable)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = <span class="built_in">next</span>(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">yield</span> total</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">        total = func(total, element)</span><br><span class="line">        <span class="keyword">yield</span> total</span><br></pre></td></tr></table></figure>

<p>如果很难理解，可以这样理解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于默认func来说，结果就是[p0, p0+p1, p0+p1+p2, …]</span><br></pre></td></tr></table></figure>

<h3 id="itertools-chain-iterables"><a href="#itertools-chain-iterables" class="headerlink" title="itertools.chain(*iterables)"></a><strong>itertools.chain(*iterables)</strong></h3><p>创建一个迭代器，该迭代器从第一个迭代返回元素，直到它被耗尽，然后继续到下一个迭代，直到所有的迭代都被耗尽。用于将连续序列视为单个序列。<br>大致相当于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chain</span>(<span class="params">*iterables</span>):</span></span><br><span class="line">    <span class="comment"># chain(&#x27;ABC&#x27;, &#x27;DEF&#x27;) --&gt; A B C D E F</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure>

<h3 id="classmethod-chain-from-iterable-iterable"><a href="#classmethod-chain-from-iterable-iterable" class="headerlink" title="classmethod chain.from_iterable(iterable)"></a><strong>classmethod chain.from_iterable(iterable)</strong></h3><p>改变<code>chain()</code>的结构，从一个懒加载的可迭代对象中获取输入值。大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_iterable</span>(<span class="params">iterables</span>):</span></span><br><span class="line">    <span class="comment"># chain.from_iterable([&#x27;ABC&#x27;, &#x27;DEF&#x27;]) --&gt; A B C D E F</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure>

<h3 id="itertools-compress-data-selectors"><a href="#itertools-compress-data-selectors" class="headerlink" title="itertools.compress(data, selectors)"></a><strong>itertools.compress(data, selectors)</strong></h3><p>过滤迭代器中的元素，只返回在selectors中计算为<code>True</code>的对应元素。当迭代器或选择器结束后，就停止。<br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span>(<span class="params">data, selectors</span>):</span></span><br><span class="line">    <span class="comment"># compress(&#x27;ABCDEF&#x27;, [1,0,1,0,1,1]) --&gt; A C E F</span></span><br><span class="line">    <span class="keyword">return</span> (d <span class="keyword">for</span> d, s <span class="keyword">in</span> <span class="built_in">zip</span>(data, selectors) <span class="keyword">if</span> s)</span><br></pre></td></tr></table></figure>

<h3 id="itertools-dropwhile-predicate-iterable"><a href="#itertools-dropwhile-predicate-iterable" class="headerlink" title="itertools.dropwhile(predicate, iterable)"></a><strong>itertools.dropwhile(predicate, iterable)</strong></h3><p>去除predicate为true的元素，当第一次遇到predicate为false的情况时，直接将其与后面的全都一起返回<br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile</span>(<span class="params">predicate, iterable</span>):</span></span><br><span class="line">    <span class="comment"># dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 4 1</span></span><br><span class="line">    iterable = <span class="built_in">iter</span>(iterable)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure>

<h3 id="itertools-filterfalse-predicate-iterable"><a href="#itertools-filterfalse-predicate-iterable" class="headerlink" title="itertools.filterfalse(predicate, iterable)"></a><strong>itertools.filterfalse(predicate, iterable)</strong></h3><p>从迭代器中过滤出所有使predicate为<code>False</code>的元素，并返回<br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filterfalse</span>(<span class="params">predicate, iterable</span>):</span></span><br><span class="line">    <span class="comment"># filterfalse(lambda x: x%2, range(10)) --&gt; 0 2 4 6 8</span></span><br><span class="line">    <span class="keyword">if</span> predicate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        predicate = <span class="built_in">bool</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure>

<h3 id="itertools-groupby-iterable-key-None"><a href="#itertools-groupby-iterable-key-None" class="headerlink" title="itertools.groupby(iterable, key=None)"></a><strong>itertools.groupby(iterable, key=None)</strong></h3><p>创建一个从迭代中返回连续键和组的迭代器。 关键是计算每个元素的键值的函数。 如果未指定或为None，则键默认为标识函数并返回元素不变。 通常，迭代需要在相同的键函数上排序。</p>
<p>groupby（）的操作类似于Unix中的uniq过滤器。 每次键函数的值发生变化时，它都会生成一个中断或新组（这就是为什么通常需要使用相同的键函数对数据进行排序）。 这种行为不同于SQL的GROUP BY，它聚合了常见元素而不管它们的输入顺序如何。</p>
<p>返回的组本身是一个迭代器，它与groupby（）共享底层的iterable。 由于源是共享的，因此当groupby（）对象被迭代时，前一个组被迭代的将不再可见。 因此，如果以后需要该数据，则应将其存储为列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">groups = []</span><br><span class="line">uniquekeys = []</span><br><span class="line">data = <span class="built_in">sorted</span>(data, key=keyfunc)</span><br><span class="line"><span class="keyword">for</span> k, g <span class="keyword">in</span> groupby(data, keyfunc):</span><br><span class="line">    groups.append(<span class="built_in">list</span>(g))      <span class="comment"># Store group iterator as a list</span></span><br><span class="line">    uniquekeys.append(k)</span><br></pre></td></tr></table></figure>

<p><code>groupby()</code>相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">groupby</span>:</span></span><br><span class="line">    <span class="comment"># [k for k, g in groupby(&#x27;AAAABBBCCDAABBB&#x27;)] --&gt; A B C D A B</span></span><br><span class="line">    <span class="comment"># [list(g) for k, g in groupby(&#x27;AAAABBBCCD&#x27;)] --&gt; AAAA BBB CC D</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, iterable, key=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            key = <span class="keyword">lambda</span> x: x</span><br><span class="line">        self.keyfunc = key</span><br><span class="line">        self.it = <span class="built_in">iter</span>(iterable)</span><br><span class="line">        self.tgtkey = self.currkey = self.currvalue = <span class="built_in">object</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">object</span>()</span><br><span class="line">        <span class="keyword">while</span> self.currkey == self.tgtkey:</span><br><span class="line">            self.currvalue = <span class="built_in">next</span>(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line">        self.tgtkey = self.currkey</span><br><span class="line">        <span class="keyword">return</span> (self.currkey, self._grouper(self.tgtkey, self.<span class="built_in">id</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_grouper</span>(<span class="params">self, tgtkey, <span class="built_in">id</span></span>):</span></span><br><span class="line">        <span class="keyword">while</span> self.<span class="built_in">id</span> <span class="keyword">is</span> <span class="built_in">id</span> <span class="keyword">and</span> self.currkey == tgtkey:</span><br><span class="line">            <span class="keyword">yield</span> self.currvalue</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.currvalue = <span class="built_in">next</span>(self.it)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line">qs = [&#123;<span class="string">&#x27;date&#x27;</span> : <span class="number">1</span>&#125;,&#123;<span class="string">&#x27;date&#x27;</span> : <span class="number">2</span>&#125;]</span><br><span class="line">[(name, <span class="built_in">list</span>(group)) <span class="keyword">for</span> name, group <span class="keyword">in</span> itertools.groupby(qs, <span class="keyword">lambda</span> p:p[<span class="string">&#x27;date&#x27;</span>])]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">77</span>]: [(<span class="number">1</span>, [&#123;<span class="string">&#x27;date&#x27;</span>: <span class="number">1</span>&#125;]), (<span class="number">2</span>, [&#123;<span class="string">&#x27;date&#x27;</span>: <span class="number">2</span>&#125;])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bcd&#x27;</span>, <span class="string">&#x27;abcde&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, k <span class="keyword">in</span> groupby(a, <span class="built_in">len</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> i, <span class="built_in">list</span>(k)</span><br><span class="line">...</span><br><span class="line"><span class="number">2</span> [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>]</span><br><span class="line"><span class="number">3</span> [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bcd&#x27;</span>]</span><br><span class="line"><span class="number">5</span> [<span class="string">&#x27;abcde&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="itertools-islice-iterable-start-stop-step-和itertools-islice-iterable-stop"><a href="#itertools-islice-iterable-start-stop-step-和itertools-islice-iterable-stop" class="headerlink" title="itertools.islice(iterable, start, stop[, step])和itertools.islice(iterable, stop)"></a><strong>itertools.islice(iterable, start, stop[, step])<strong>和</strong>itertools.islice(iterable, stop)</strong></h3><p>创建一个迭代器，该迭代器从iterable返回选中的元素。如果start是非零的，则跳过可迭代的元素，直到到达start为止。之后，元素会连续返回，除非step设置得比step高，这会导致跳过项。如果stop为None，则继续迭代，直到迭代器耗尽为止;否则，它将在指定位置停止。与常规切片不同，islice（）不支持start，stop或step的负值。可以用于从内部结构已被扁平化的数据中提取相关字段(例如，多行报告可能每隔一行列出一个name字段)。<br>大致相当于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islice</span>(<span class="params">iterable, *args</span>):</span></span><br><span class="line">    <span class="comment"># islice(&#x27;ABCDEFG&#x27;, 2) --&gt; A B</span></span><br><span class="line">    <span class="comment"># islice(&#x27;ABCDEFG&#x27;, 2, 4) --&gt; C D</span></span><br><span class="line">    <span class="comment"># islice(&#x27;ABCDEFG&#x27;, 2, None) --&gt; C D E F G</span></span><br><span class="line">    <span class="comment"># islice(&#x27;ABCDEFG&#x27;, 0, None, 2) --&gt; A C E G</span></span><br><span class="line">    s = <span class="built_in">slice</span>(*args)</span><br><span class="line">    start, stop, step = s.start <span class="keyword">or</span> <span class="number">0</span>, s.stop <span class="keyword">or</span> sys.maxsize, s.step <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">    it = <span class="built_in">iter</span>(<span class="built_in">range</span>(start, stop, step))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        nexti = <span class="built_in">next</span>(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># Consume *iterable* up to the *start* position.</span></span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(start), iterable):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(iterable):</span><br><span class="line">            <span class="keyword">if</span> i == nexti:</span><br><span class="line">                <span class="keyword">yield</span> element</span><br><span class="line">                nexti = <span class="built_in">next</span>(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># Consume to *stop*.</span></span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(i + <span class="number">1</span>, stop), iterable):</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>如果start为None，那么迭代从0开始。如果step是None，那么step默认为1。</p>
<h3 id="itertools-starmap-function-iterable"><a href="#itertools-starmap-function-iterable" class="headerlink" title="itertools.starmap(function, iterable)"></a><strong>itertools.starmap(function, iterable)</strong></h3><p>将<code>iterable</code>中的每一项，映射到<code>function</code>中，并执行<code>function</code><br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starmap</span>(<span class="params">function, iterable</span>):</span></span><br><span class="line">    <span class="comment"># starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1000</span></span><br><span class="line">    <span class="keyword">for</span> args <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> function(*args)</span><br></pre></td></tr></table></figure>

<h3 id="itertools-takewhile-predicate-iterable"><a href="#itertools-takewhile-predicate-iterable" class="headerlink" title="itertools.takewhile(predicate, iterable)"></a><strong>itertools.takewhile(predicate, iterable)</strong></h3><p>只要使<code>predicate</code>为true，就返回。当遇到第一个为<code>False</code>的值就停止。与<a href="#dropwhile"><code>dropwhile</code></a>相反<br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takewhile</span>(<span class="params">predicate, iterable</span>):</span></span><br><span class="line">    <span class="comment"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 4</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="itertools-tee-iterable-n-2"><a href="#itertools-tee-iterable-n-2" class="headerlink" title="itertools.tee(iterable, n=2)"></a><strong>itertools.tee(iterable, n=2)</strong></h3><p>从一个可迭代对象中返回n个独立的可迭代对象。</p>
<p>下面的代码会解释<code>tee</code>做了什么（虽然实际的解释会更复杂一些，并且只是用了一个单独的FIFO先进先出队列）。<br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tee</span>(<span class="params">iterable, n=<span class="number">2</span></span>):</span></span><br><span class="line">    it = <span class="built_in">iter</span>(iterable)</span><br><span class="line">    deques = [collections.deque() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">mydeque</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mydeque:             <span class="comment"># when the local deque is empty</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    newval = <span class="built_in">next</span>(it)   <span class="comment"># fetch a new value and</span></span><br><span class="line">                <span class="keyword">except</span> StopIteration:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> deques:        <span class="comment"># load it to all the deques</span></span><br><span class="line">                    d.append(newval)</span><br><span class="line">            <span class="keyword">yield</span> mydeque.popleft()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(gen(d) <span class="keyword">for</span> d <span class="keyword">in</span> deques)</span><br></pre></td></tr></table></figure>

<p>实际这样用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> tee</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tee([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">3</span>))  <span class="comment"># ==&gt;(&lt;itertools._tee object at 0x10cf787c8&gt;, &lt;itertools._tee object at 0x10cf78808&gt;, &lt;itertools._tee object at 0x10cf78848&gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> tee([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#    1 2 3                  </span></span><br><span class="line"><span class="comment">#    1 2 3 </span></span><br><span class="line"><span class="comment">#    1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a, b, c <span class="keyword">in</span> tee([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"><span class="comment">#    1 2 3                  </span></span><br><span class="line"><span class="comment">#    1 2 3 </span></span><br><span class="line"><span class="comment">#    1 2 3</span></span><br></pre></td></tr></table></figure>

<p>一旦tee（）进行了拆分，原始的iteable不应该在其他任何地方使用; 否则，迭代可以在没有通知tee对象的情况下进行。</p>
<p>这个itertool可能需要大量的辅助存储（取决于需要存储多少临时数据）。 通常，如果一个迭代器在另一个迭代器启动之前使用大部分或全部数据，则使用list（）而不是tee（）会更快。</p>
<h3 id="itertools-zip-longest-iterables-fillvalue-None"><a href="#itertools-zip-longest-iterables-fillvalue-None" class="headerlink" title="itertools.zip_longest(*iterables, fillvalue=None)"></a><strong>itertools.zip_longest(*iterables, fillvalue=None)</strong></h3><p>聚合每一个可迭代对象的元素。如果迭代的长度不均匀，则使用<code>fillvalue</code>填充缺失值。 迭代继续，直到最长的可迭代用尽。<br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_longest</span>(<span class="params">*args, fillvalue=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># zip_longest(&#x27;ABCD&#x27;, &#x27;xy&#x27;, fillvalue=&#x27;-&#x27;) --&gt; Ax By C- D-</span></span><br><span class="line">    iterators = [<span class="built_in">iter</span>(it) <span class="keyword">for</span> it <span class="keyword">in</span> args]</span><br><span class="line">    num_active = <span class="built_in">len</span>(iterators)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        values = []</span><br><span class="line">        <span class="keyword">for</span> i, it <span class="keyword">in</span> <span class="built_in">enumerate</span>(iterators):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                value = <span class="built_in">next</span>(it)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                num_active -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                iterators[i] = repeat(fillvalue)</span><br><span class="line">                value = fillvalue</span><br><span class="line">            values.append(value)</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(values)</span><br></pre></td></tr></table></figure>

<p>如果其中一个iterables可能是无限的，那么<code>zip_longest()</code>函数应该包含一些限制调用次数的东西（例如<code>islice()</code>或<code>takewhile()</code>）。 如果未指定，则fillvalue默认为None。</p>
<h3 id="itertools-product-iterables-repeat-1"><a href="#itertools-product-iterables-repeat-1" class="headerlink" title="itertools.product(*iterables, repeat=1)"></a><strong>itertools.product(*iterables, repeat=1)</strong></h3><p>对放入的可迭代对象进行笛卡尔积运算。</p>
<p>大致相当于生成器表达式中的嵌套for循环。例如，<code>product(A, B)</code>的返回和<code>((x,y) for x in A for y in B)</code>一样</p>
<p>要计算iterable与其自身的乘积，请使用可选的repeat关键字参数指定重复次数。 例如，<code>product(A, repeat=4)</code>相当于<code>product(A, A, A, A)</code></p>
<p>此函数大致等同于以下代码，但实际实现不会在内存中构建中间结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span>(<span class="params">*args, repeat=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="comment"># product(&#x27;ABCD&#x27;, &#x27;xy&#x27;) --&gt; Ax Ay Bx By Cx Cy Dx Dy</span></span><br><span class="line">    <span class="comment"># product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111</span></span><br><span class="line">    pools = [<span class="built_in">tuple</span>(pool) <span class="keyword">for</span> pool <span class="keyword">in</span> args] * repeat</span><br><span class="line">    result = [[]]</span><br><span class="line">    <span class="keyword">for</span> pool <span class="keyword">in</span> pools:</span><br><span class="line">        result = [x+[y] <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">for</span> y <span class="keyword">in</span> pool]</span><br><span class="line">    <span class="keyword">for</span> prod <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(prod)</span><br></pre></td></tr></table></figure>

<h3 id="itertools-permutations-iterable-r-None"><a href="#itertools-permutations-iterable-r-None" class="headerlink" title="itertools.permutations(iterable, r=None)"></a><strong>itertools.permutations(iterable, r=None)</strong></h3><p>对可迭代对象进行组合排列，组合长度为<code>r</code><br>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span>(<span class="params">iterable, r=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># permutations(&#x27;ABCD&#x27;, 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line">    <span class="comment"># permutations(range(3)) --&gt; 012 021 102 120 201 210</span></span><br><span class="line">    pool = <span class="built_in">tuple</span>(iterable)</span><br><span class="line">    n = <span class="built_in">len</span>(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(n))</span><br><span class="line">    cycles = <span class="built_in">list</span>(<span class="built_in">range</span>(n, n-r, -<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(r)):</span><br><span class="line">            cycles[i] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cycles[i] == <span class="number">0</span>:</span><br><span class="line">                indices[i:] = indices[i+<span class="number">1</span>:] + indices[i:i+<span class="number">1</span>]</span><br><span class="line">                cycles[i] = n - i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = cycles[i]</span><br><span class="line">                indices[i], indices[-j] = indices[-j], indices[i]</span><br><span class="line">                <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<h3 id="itertools-combinations-iterable-r"><a href="#itertools-combinations-iterable-r" class="headerlink" title="itertools.combinations(iterable, r)"></a><strong>itertools.combinations(iterable, r)</strong></h3><p>和<a href="#permutations"><code>permutations</code></a>类似。但是不同的是，不会有忽略元素顺序的相同的组合</p>
<p>其相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span>(<span class="params">iterable, r</span>):</span></span><br><span class="line">    <span class="comment"># combinations(&#x27;ABCD&#x27;, 2) --&gt; AB AC AD BC BD CD</span></span><br><span class="line">    <span class="comment"># combinations(range(4), 3) --&gt; 012 013 023 123</span></span><br><span class="line">    pool = <span class="built_in">tuple</span>(iterable)</span><br><span class="line">    n = <span class="built_in">len</span>(pool)</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(r))</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure>

<h3 id="itertools-combinations-with-replacement-iterable-r"><a href="#itertools-combinations-with-replacement-iterable-r" class="headerlink" title="itertools.combinations_with_replacement(iterable, r)"></a><strong>itertools.combinations_with_replacement(iterable, r)</strong></h3><p>和<a href="combinations"><code>combinations</code></a>相似。但不同的是，此方法返回的组合中，会有相同元素<br>其大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations_with_replacement</span>(<span class="params">iterable, r</span>):</span></span><br><span class="line">    <span class="comment"># combinations_with_replacement(&#x27;ABC&#x27;, 2) --&gt; AA AB AC BB BC CC</span></span><br><span class="line">    pool = <span class="built_in">tuple</span>(iterable)</span><br><span class="line">    n = <span class="built_in">len</span>(pool)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">and</span> r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = [<span class="number">0</span>] * r</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i:] = [indices[i] + <span class="number">1</span>] * (r - i)</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python3.7标准库</category>
      </categories>
      <tags>
        <tag>python python python3.7标准库 python3.7标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>python2-mac10.13下安装mysql-python</title>
    <url>/2018/12/28/python2-mac10.13%E4%B8%8B%E5%AE%89%E8%A3%85mysql-python/</url>
    <content><![CDATA[<p>安装环境：OS X 操作系统，Python 2.7.3。</p>
<p>MySQLdb 其实包含在 MySQL-python 包中，因此无论下载还是在 pip 中 search，都应该是搜寻 MySQL-python。</p>
<p>以下为安装步骤</p>
<span id="more"></span>

<h4 id="安装MYSQLdb"><a href="#安装MYSQLdb" class="headerlink" title="安装MYSQLdb"></a>安装MYSQLdb</h4><p>在 SourceForge 可以下载 <a href="https://sourceforge.net/projects/mysql-python/">MySQL-python-1.2.4b4.tar</a>，下载后解压，然后在终端 Terminal 中执行以下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) ➜  MySQL-python-<span class="number">1.2</span><span class="number">.4</span>b4    python setup.py install</span><br></pre></td></tr></table></figure>

<p>但是，可能会出现这样的问题：<br><img src="https://img-blog.csdnimg.cn/20181228132213220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>不要慌，接下来在终端中输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) ➜  MySQL-python-<span class="number">1.2</span><span class="number">.4</span>b4 wget https://pypi.python.org/packages/source/d/distribute/distribute-<span class="number">0.6</span><span class="number">.28</span>.tar.gz</span><br></pre></td></tr></table></figure>

<p>接下来，继续安装，会发现可以安装了！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) ➜  MySQL-python-<span class="number">1.2</span><span class="number">.4</span>b4 sudo python setup.py install</span><br></pre></td></tr></table></figure>

<p>但是你会发现，又出现了另外一个错误<br><img src="https://img-blog.csdnimg.cn/20181228132241849.png" alt="在这里插入图片描述"></p>
<p>此时，在终端输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) ➜  MySQL-python-<span class="number">1.2</span><span class="number">.4</span>b4 brew install mysql-connector-c </span><br></pre></td></tr></table></figure>

<p>然后继续执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) ➜  MySQL-python-<span class="number">1.2</span><span class="number">.4</span>b4 sudo python setup.py install</span><br></pre></td></tr></table></figure>

<p>这时，你会发现安装成功了！<br><img src="https://img-blog.csdnimg.cn/20181228132304145.png" alt="在这里插入图片描述"><br>最后安装MYSQL-python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip2 install MYSQL-python</span><br></pre></td></tr></table></figure>

<p>打开python进行验证，发现又遇到了另一个问题<br><img src="https://img-blog.csdnimg.cn/20181228132318540.png" alt="在这里插入图片描述"><br>在终端输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/mysql/lib/libmysqlclient<span class="number">.21</span>.dylib /usr/local/lib/libmysqlclient<span class="number">.21</span>.dylib</span><br></pre></td></tr></table></figure>

<p>但是会发现有权限问题，解决方法是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重启电脑，开机时按住 cmd + R，进入 Recovery 模式。然后打开终端工具 ，输入命令：csrutil diable，然后再次重启电脑即可。</span><br></pre></td></tr></table></figure>

<p>然后继续在终端输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) ➜  lib sudo ln -s /usr/local/mysql/lib/libmysqlclient<span class="number">.21</span>.dylib /usr/local/lib/libmysqlclient<span class="number">.21</span>.dylib</span><br><span class="line">(venv) ➜  lib sudo ln -s /usr/local/mysql/lib/libmysqlclient<span class="number">.21</span>.dylib /usr/lib/libmysqlclient<span class="number">.21</span>.dylib</span><br></pre></td></tr></table></figure>

<p>好啦。现在再次检查，成功！<br><img src="https://img-blog.csdnimg.cn/20181228132336290.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>myql python2.7 mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>py3.7标准库-collections-deque</title>
    <url>/2018/09/10/py3.7%E6%A0%87%E5%87%86%E5%BA%93-collections-deque/</url>
    <content><![CDATA[<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a><strong>deque</strong></h2><p>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">collections</span>.<span class="title">deque</span>(<span class="params">[iterable[, maxlen]]</span>)</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>


<p>返回一个新的deque（双端队列）对象，它初始化自<code>iterable</code>。 如果未指定iterable，则新的deque为空。</p>
<p>Deques是堆栈和队列的泛化(名称发音为“deck”，是“双端队列”的缩写)。Deques支持从deque的任意一侧线程安全、内存高效的<code>appends</code>和<code>pop</code>，在任何方向上的性能都大致相同都是O(1)。</p>
<p>尽管<code>list</code>对象支持类似的操作，但它们针对快速固定长度操作进行了优化，并导致pop(0)和insert(0，v)操作有O(n)内存移动成本，这些操作改变了底层数据表示的大小和位置。</p>
<p>如果未指定<code>maxlen</code>或为None，则deques可能会增长到任意长度。 否则，双端队列限制为指定的最大长度。 一旦有界长度双端队列已满，当添加新项时，则会从对方端丢弃相应数量的项。 有界长度deques提供类似于Unix中的<code>tail</code>过滤器的功能。 它们还可用于跟踪仅涉及最近活动的事务和其他数据池。</p>
<p>Deque对象支持以下方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">append(x)   <span class="comment"># 从deque的右边加入x</span></span><br><span class="line"></span><br><span class="line">appendleft(x)   <span class="comment">#从deque的左边加入x</span></span><br><span class="line"></span><br><span class="line">clear()     <span class="comment">#清除deque中的每一个元素，使其长度为0</span></span><br><span class="line"></span><br><span class="line">copy()      <span class="comment"># 创建一个deque的浅拷贝</span></span><br><span class="line"></span><br><span class="line">count(x)    <span class="comment"># deque中元素等于x的数量</span></span><br><span class="line"></span><br><span class="line">extend(iterable)    <span class="comment"># 从右侧扩展deque</span></span><br><span class="line"></span><br><span class="line">extendleft(iterable)    <span class="comment"># 从左侧扩展deque。但是，左边扩展的序列是反转iterable的顺序</span></span><br><span class="line"></span><br><span class="line">index(x[, start[, stop]])   <span class="comment"># 返回deque中的x位置（在索引开始时或索引停止之前）。返回第一个匹配的对象，如果没找到，会抛出`ValueError`</span></span><br><span class="line"></span><br><span class="line">insert(i, x)    <span class="comment"># 将x插入到deque的位置i。如果插入后导致deque超过`maxlen`，会抛出`IndexError`</span></span><br><span class="line"></span><br><span class="line">pop()   <span class="comment"># 从deque的右侧移除并返回一个元素。 如果没有元素，则会抛出IndexError。</span></span><br><span class="line"></span><br><span class="line">popleft()   <span class="comment"># 从deque的左侧移除并返回一个元素。 如果没有元素，则会抛出IndexError。</span></span><br><span class="line"></span><br><span class="line">remove(value)   <span class="comment"># 删除第一次出现的值。 如果未找到，则会抛出ValueError</span></span><br><span class="line"></span><br><span class="line">reverse()       <span class="comment"># 在原位反转deque的元素，然后返回None</span></span><br><span class="line"></span><br><span class="line">rotate(n=<span class="number">1</span>)     <span class="comment"># 向右旋转deque n步。 如果n为负数，则向左旋转。</span></span><br><span class="line">                <span class="comment"># 当双端队列不为空时，向右旋转一步相当于d.appendleft(d.pop())，向左旋转一步相当于d.append(d.popleft())。</span></span><br></pre></td></tr></table></figure>

<p>Deque对象还提供一个只读属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maxlen  <span class="comment"># deque的大小，如果无界，则为None</span></span><br></pre></td></tr></table></figure>

<p>除上述之外，deques支持迭代，pickling, len(d), reverse(d), copy.copy(d), copy.deepcopy(d), 使用<code>in</code>运算符进行成员资格测试，以及下标引用，例如d[-1]。 索引访问在两端都是O(1), 但在中间减慢到O(n)。 对于快速随机访问，请改用list。</p>
<p>栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = deque(<span class="string">&#x27;ghi&#x27;</span>)                 <span class="comment"># make a new deque with three items</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> elem <span class="keyword">in</span> d:                   <span class="comment"># iterate over the deque&#x27;s elements</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(elem.upper())</span><br><span class="line">G</span><br><span class="line">H</span><br><span class="line">I</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.append(<span class="string">&#x27;j&#x27;</span>)                    <span class="comment"># add a new entry to the right side</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.appendleft(<span class="string">&#x27;f&#x27;</span>)                <span class="comment"># add a new entry to the left side</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d                                <span class="comment"># show the representation of the deque</span></span><br><span class="line">deque([<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop()                          <span class="comment"># return and remove the rightmost item</span></span><br><span class="line"><span class="string">&#x27;j&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popleft()                      <span class="comment"># return and remove the leftmost item</span></span><br><span class="line"><span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(d)                          <span class="comment"># list the contents of the deque</span></span><br><span class="line">[<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">0</span>]                             <span class="comment"># peek at leftmost item</span></span><br><span class="line"><span class="string">&#x27;g&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[-<span class="number">1</span>]                            <span class="comment"># peek at rightmost item</span></span><br><span class="line"><span class="string">&#x27;i&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">reversed</span>(d))                <span class="comment"># list the contents of a deque in reverse</span></span><br><span class="line">[<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> d                         <span class="comment"># search the deque</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extend(<span class="string">&#x27;jkl&#x27;</span>)                  <span class="comment"># add multiple elements at once</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">1</span>)                      <span class="comment"># right rotation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(-<span class="number">1</span>)                     <span class="comment"># left rotation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>deque(<span class="built_in">reversed</span>(d))               <span class="comment"># make a new deque in reverse order</span></span><br><span class="line">deque([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()                        <span class="comment"># empty the deque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop()                          <span class="comment"># cannot pop from an empty deque</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">&quot;&lt;pyshell#6&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> -toplevel-</span><br><span class="line">        d.pop()</span><br><span class="line">IndexError: pop <span class="keyword">from</span> an empty deque</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extendleft(<span class="string">&#x27;abc&#x27;</span>)              <span class="comment"># extendleft() reverses the input order</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>接下来，介绍一些deque的使用方法</p>
<p>有界长度deques提供类似于Unix中的<code>tail</code>过滤器的功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span>(<span class="params">filename, n=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;Return the last n lines of a file&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> deque(f, n)</span><br></pre></td></tr></table></figure>

<p>使用deques的另一种方法是通过向右追加并弹出到左侧来维护一系列最近添加的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moving_average</span>(<span class="params">iterable, n=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="comment"># moving_average([40, 30, 50, 46, 39, 44]) --&gt; 40.0 42.0 45.0 43.0</span></span><br><span class="line">    <span class="comment"># http://en.wikipedia.org/wiki/Moving_average</span></span><br><span class="line">    it = <span class="built_in">iter</span>(iterable)</span><br><span class="line">    d = deque(itertools.islice(it, n-<span class="number">1</span>))</span><br><span class="line">    d.appendleft(<span class="number">0</span>)</span><br><span class="line">    s = <span class="built_in">sum</span>(d)</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> it:</span><br><span class="line">        s += elem - d.popleft()</span><br><span class="line">        d.append(elem)</span><br><span class="line">        <span class="keyword">yield</span> s / n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> moving_average([<span class="number">40</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">46</span>, <span class="number">39</span>, <span class="number">44</span>]):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">40.0</span></span><br><span class="line"><span class="number">42.0</span></span><br><span class="line"><span class="number">45.0</span></span><br><span class="line"><span class="number">43.0</span></span><br></pre></td></tr></table></figure>

<p>可以使用存储在双端队列中的输入迭代器来实现循环调度程序。 值从位置零处的活动迭代器产生。 如果该迭代器耗尽，可以使用popleft()删除它; 否则，它可以使用rotate()方法循环回到最后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roundrobin</span>(<span class="params">*iterables</span>):</span></span><br><span class="line">    <span class="string">&quot;roundrobin(&#x27;ABC&#x27;, &#x27;D&#x27;, &#x27;EF&#x27;) --&gt; A D E B F C&quot;</span></span><br><span class="line">    iterators = deque(<span class="built_in">map</span>(<span class="built_in">iter</span>, iterables))</span><br><span class="line">    <span class="keyword">while</span> iterators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="built_in">next</span>(iterators[<span class="number">0</span>])</span><br><span class="line">                iterators.rotate(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="comment"># Remove an exhausted iterator.</span></span><br><span class="line">            iterators.popleft()</span><br></pre></td></tr></table></figure>

<p><code>rotate()</code>方法提供了一种实现双端切片和删除的方法。 例如，<code>del d[n]</code>的纯Python实现依赖于<code>rotate()</code>方法来定位要弹出的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_nth</span>(<span class="params">d, n</span>):</span></span><br><span class="line">    d.rotate(-n)</span><br><span class="line">    d.popleft()</span><br><span class="line">    d.rotate(n)</span><br></pre></td></tr></table></figure>

<p>要实现双端切片，请使用类似的方法应用<code>rotate()</code>将目标元素置于双端队列的左侧。 使用<code>popleft()</code>删除旧条目，使用<code>extend()</code>添加新条目，然后反转旋转。 通过该方法的微小变化，可以轻松实现Forth样式堆栈操作，例如dup，drop，swap，over，pick，rot和roll。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python3.7标准库 python python3.7标准库 python3.7标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>python打包发布pypi及更新流程</title>
    <url>/2020/08/05/python%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83pypi%E5%8F%8A%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li> <a href="http://yangfangs.github.io/2018/08/06/python-distribution-packages/#%E5%9C%A8pypi%E5%AE%98%E7%BD%91%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AApypi%E4%B8%AA%E4%BA%BA%E8%B4%A6%E6%88%B7%E5%A6%82%E4%B8%8B">Python 快速打包发布软件PyPi上</a></li>
<li> <a href="https://www.it-swarm.dev/zh/python/%E5%8C%85%E5%90%ABsetuppy%E7%9A%84%E9%9D%9Epython%E6%96%87%E4%BB%B6/968888625/">包含setup.py的非Python文件</a></li>
<li> <a href="https://blog.csdn.net/weixin_41855010/article/details/105506343">五步法更新pypi包体</a></li>
</ol>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><span id="more"></span>

<h3 id="1-安装打包依赖工具"><a href="#1-安装打包依赖工具" class="headerlink" title="1. 安装打包依赖工具"></a>1. 安装打包依赖工具</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install setuptools</span><br></pre></td></tr></table></figure>

<h3 id="2-安装上传工具"><a href="#2-安装上传工具" class="headerlink" title="2. 安装上传工具"></a>2. 安装上传工具</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></table></figure>

<h3 id="3-注册PYPI官网个人用户"><a href="#3-注册PYPI官网个人用户" class="headerlink" title="3. 注册PYPI官网个人用户"></a>3. 注册<a href="https://pypi.org/">PYPI官网</a>个人用户</h3><p><img src="https://img-blog.csdnimg.cn/20200805113342473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="4-在和项目同级目录创建setup-py"><a href="#4-在和项目同级目录创建setup-py" class="headerlink" title="4. 在和项目同级目录创建setup.py"></a>4. 在和项目同级目录创建setup.py</h3><p><img src="https://img-blog.csdnimg.cn/20200805113414940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"></span><br><span class="line">GFICLEE_VERSION = <span class="string">&#x27;2020.8.4.6&#x27;</span></span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;cfastproject&#x27;</span>,</span><br><span class="line">    version=GFICLEE_VERSION,</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="string">&quot;console_scripts&quot;</span>: [<span class="string">&#x27;cfastproject = fastproject.main:main&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&quot;django&quot;</span>, <span class="string">&quot;fastapi&quot;</span>, <span class="string">&quot;gcp_mixed_logging&quot;</span>, <span class="string">&quot;asgi_request_id&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uvicorn&quot;</span>, <span class="string">&quot;google-cloud-secret-manager&quot;</span>, <span class="string">&quot;pandas&quot;</span>,</span><br><span class="line">        <span class="string">&quot;peewee_async&quot;</span>, <span class="string">&quot;aiopg&quot;</span>, <span class="string">&quot;aiohttp&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    url=<span class="string">&#x27;https://github.com/ChuXiaoYi/fastproject&#x27;</span>,</span><br><span class="line">    license=<span class="string">&#x27;GNU General Public License v3.0&#x27;</span>,</span><br><span class="line">    author=<span class="string">&#x27;Xiaoyi Chu&#x27;</span>,</span><br><span class="line">    author_email=<span class="string">&#x27;895706056@qq.com&#x27;</span>,</span><br><span class="line">    description=<span class="string">&#x27;More convenient to create fastapi project&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>setup参数说明：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>项目名称</td>
<td>不可重复</td>
</tr>
<tr>
<td>version</td>
<td>项目版本</td>
<td>保证每次发布都是版本都是唯一的</td>
</tr>
<tr>
<td>packages</td>
<td>项目本身的代码</td>
<td></td>
</tr>
<tr>
<td>include_package_data</td>
<td>是否包括非包文件</td>
<td></td>
</tr>
<tr>
<td>entry_points</td>
<td>项目主入口</td>
<td>安装成功后，在命令行输入<code>cfastproject</code> 就相当于执行了<code>fastproject.main.py</code>中的<code>main()</code>了</td>
</tr>
<tr>
<td>install_requires</td>
<td>项目依赖包</td>
<td></td>
</tr>
<tr>
<td>url</td>
<td>项目地址</td>
<td></td>
</tr>
<tr>
<td>license</td>
<td>license</td>
<td></td>
</tr>
<tr>
<td>author</td>
<td>项目作者</td>
<td></td>
</tr>
<tr>
<td>author_email</td>
<td>项目邮箱</td>
<td></td>
</tr>
<tr>
<td>description</td>
<td>项目描述</td>
<td></td>
</tr>
</tbody></table>
<h3 id="5-打包前检查"><a href="#5-打包前检查" class="headerlink" title="5. 打包前检查"></a>5. 打包前检查</h3><blockquote>
<p>通过这一步可以检查setup.py中是否有错误，例如版本号错误</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py check</span><br></pre></td></tr></table></figure>

<h3 id="6-打包"><a href="#6-打包" class="headerlink" title="6. 打包"></a>6. 打包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py sdist</span><br></pre></td></tr></table></figure>

<h3 id="7-发布前准备"><a href="#7-发布前准备" class="headerlink" title="7. 发布前准备"></a>7. 发布前准备</h3><ol>
<li><p>在home目录下创建.pypirc 文件，写入pypi账户密码，这样每次上传就不需要在重复输入了</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers =</span><br><span class="line">pypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">username:username</span><br><span class="line">password:password</span><br></pre></td></tr></table></figure></li>
<li><p>本地测试</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p> 安装成功后，可以通过上面定义的命令执行一次，如果成功证明安装成功，可以继续打包了</p>
</li>
</ol>
<h3 id="8-注册"><a href="#8-注册" class="headerlink" title="8. 注册"></a>8. 注册</h3><blockquote>
<p>上传前需要注册一下包的名称，因为这个名称必须独一无二，如被占用则注册不通过。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py register</span><br></pre></td></tr></table></figure>

<h3 id="9-检查是否符合pypi要求"><a href="#9-检查是否符合pypi要求" class="headerlink" title="9. 检查是否符合pypi要求"></a>9. 检查是否符合pypi要求</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">twine check dist/**_.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200805114338643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="10-上传"><a href="#10-上传" class="headerlink" title="10. 上传"></a>10. 上传</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">twine upload dist/**_.tar.gz</span><br></pre></td></tr></table></figure>

<p>上传成功后，到官网上搜索看看包有木有吧～<br><img src="https://img-blog.csdnimg.cn/20200805114403402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="1-更新代码，并修改setup-py中的版本号"><a href="#1-更新代码，并修改setup-py中的版本号" class="headerlink" title="1. 更新代码，并修改setup.py中的版本号"></a>1. 更新代码，并修改setup.py中的版本号</h3><h3 id="2-更新包"><a href="#2-更新包" class="headerlink" title="2. 更新包"></a>2. 更新包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py sdist bdist</span><br></pre></td></tr></table></figure>

<h3 id="3-上传"><a href="#3-上传" class="headerlink" title="3. 上传"></a>3. 上传</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">twine upload dist/**_.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="4-更新包"><a href="#4-更新包" class="headerlink" title="4. 更新包"></a>4. 更新包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install --upgrade cfastproject</span><br></pre></td></tr></table></figure>

<h2 id="关于上传非包文件"><a href="#关于上传非包文件" class="headerlink" title="关于上传非包文件"></a>关于上传非包文件</h2><p>在<code>setup.py</code>同级目录下创建<code>MANIFEST.in</code>文件，里面的内容是需要上传的文件，例如，如果要包括项目下的所有文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">recursive-include fastproject *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了将这些文件在安装时复制到site-packages中的包文件夹，需要将setup中的include_package_data设置为True</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 打包 pypi</tag>
      </tags>
  </entry>
  <entry>
    <title>tornado(二)——源码分析（一）</title>
    <url>/2019/02/26/tornado(%E4%BA%8C)%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>这里将从服务开启到请求进入之后的顺序进行源码解析。分析有误的地方希望大家指出哦～</p>
<p>开发环境：</p>
<ul>
<li>python3.7、tornado5.0</li>
</ul>
<p>我们先创建一个最简单的tornado应用，从简单的栗子开始进行源码分析：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line"></span><br><span class="line">define(<span class="string">&quot;port&quot;</span>, default=<span class="number">8000</span>, <span class="built_in">help</span>=<span class="string">&quot;run on the given port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        greeting = self.get_argument(<span class="string">&#x27;greeting&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">        self.write(greeting + <span class="string">&#x27;, friendly user!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>, IndexHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><p>首先，进入main中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tornado.options.parse_command_line()</span><br></pre></td></tr></table></figure>

<p>这一句通常是配合<code>define(&quot;port&quot;, default=8000, help=&quot;run on the given port&quot;, type=int)</code>一起用的。他会解析命令行参数</p>
<h2 id="实例化tornado-web-Application"><a href="#实例化tornado-web-Application" class="headerlink" title="实例化tornado.web.Application"></a>实例化tornado.web.Application</h2><p>接下来，实例化<code>tornado.web.Application</code>对象，最简单的方式，就是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>, IndexHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>在初始化的过程中，发生了什么呢？<br>在源码中，我们发现，官方对他的解释是<code>A collection of request handlers that make up a web application</code>，也就是说，其实他就是一个handler的集合，并且他可以自己本身成为一个web应用。我们发现他继承<code>ReversibleRouter</code>类，它本身是一个抽象类，在ReversibleRouter类中，只有一个方法，这个方法可以理解为路由的反向解析。继续深挖，ReversibleRouter类又继承了<code>Router</code>类，Router类又继承了<code>httputil.HTTPServerConnectionDelegate</code>，因此，这样我们可以梳理出来一个<code>tornado.web.Application</code>的继承顺序。<br><img src="https://img-blog.csdnimg.cn/20190226190935616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>我们继续说初始化发生的事情。在<code>Application</code>的<code>__init__()</code>方法中有四个参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, handlers=<span class="literal">None</span>, default_host=<span class="literal">None</span>, transforms=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 **settings</span>):</span></span><br></pre></td></tr></table></figure>

<ul>
<li>handlers：是一个url路由列表，每一个路由都由一个元组组成；</li>
<li>default_host：当tornado接受到request但是没有指定handler或者没有能够匹配的handler的时候，使用default_host做自动跳转</li>
<li>transforms：HTTP传输压缩等，默认GZipContentEncoding 和 ChunkedTransferEncoding</li>
<li>settings：对于一些静态文件、debug配置、ui的设置</li>
</ul>
<p>当实例化Application的时候，主要做了以下操作：</p>
<p>加载ui模版</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, handlers=<span class="literal">None</span>, default_host=<span class="literal">None</span>, transforms=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               **settings</span>):</span></span><br><span class="line">      ··········</span><br><span class="line">      self.ui_modules = &#123;<span class="string">&#x27;linkify&#x27;</span>: _linkify,</span><br><span class="line">                         <span class="string">&#x27;xsrf_form_html&#x27;</span>: _xsrf_form_html,</span><br><span class="line">                         <span class="string">&#x27;Template&#x27;</span>: TemplateModule,</span><br><span class="line">                         &#125;</span><br><span class="line">      self.ui_methods = &#123;&#125;</span><br><span class="line">      self._load_ui_modules(settings.get(<span class="string">&quot;ui_modules&quot;</span>, &#123;&#125;))</span><br><span class="line">      self._load_ui_methods(settings.get(<span class="string">&quot;ui_methods&quot;</span>, &#123;&#125;))</span><br><span class="line">··········</span><br></pre></td></tr></table></figure>

<p>获取静态文件路径配置，并将favicon.ico和robots.txt添加到handlers中。这也是为什么当我们第一次请求的时候会发现找不到favicon.ico，tornado会自己到<code>/static/favicon.ico</code>找。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, handlers=<span class="literal">None</span>, default_host=<span class="literal">None</span>, transforms=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               **settings</span>):</span></span><br><span class="line">      ········</span><br><span class="line">      <span class="keyword">if</span> self.settings.get(<span class="string">&quot;static_path&quot;</span>):</span><br><span class="line">          path = self.settings[<span class="string">&quot;static_path&quot;</span>]</span><br><span class="line">          handlers = <span class="built_in">list</span>(handlers <span class="keyword">or</span> [])</span><br><span class="line">          static_url_prefix = settings.get(<span class="string">&quot;static_url_prefix&quot;</span>,</span><br><span class="line">                                           <span class="string">&quot;/static/&quot;</span>)</span><br><span class="line">          static_handler_class = settings.get(<span class="string">&quot;static_handler_class&quot;</span>,</span><br><span class="line">                                              StaticFileHandler)</span><br><span class="line">          static_handler_args = settings.get(<span class="string">&quot;static_handler_args&quot;</span>, &#123;&#125;)</span><br><span class="line">          static_handler_args[<span class="string">&#x27;path&#x27;</span>] = path</span><br><span class="line">          <span class="keyword">for</span> pattern <span class="keyword">in</span> [re.escape(static_url_prefix) + <span class="string">r&quot;(.*)&quot;</span>,</span><br><span class="line">                          <span class="string">r&quot;/(favicon\.ico)&quot;</span>, <span class="string">r&quot;/(robots\.txt)&quot;</span>]:</span><br><span class="line">              handlers.insert(<span class="number">0</span>, (pattern, static_handler_class,</span><br><span class="line">                                  static_handler_args))</span><br><span class="line">·······</span><br></pre></td></tr></table></figure>

<p>获取<code>debug</code>参数，如果为<code>True</code>他会在代码修改后，自动重启。但是生产环境下不要打开debug。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, handlers=<span class="literal">None</span>, default_host=<span class="literal">None</span>, transforms=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               **settings</span>):</span></span><br><span class="line">·············</span><br><span class="line">      <span class="keyword">if</span> self.settings.get(<span class="string">&#x27;debug&#x27;</span>):</span><br><span class="line">          self.settings.setdefault(<span class="string">&#x27;autoreload&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">          self.settings.setdefault(<span class="string">&#x27;compiled_template_cache&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">          self.settings.setdefault(<span class="string">&#x27;static_hash_cache&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">          self.settings.setdefault(<span class="string">&#x27;serve_traceback&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">··············</span><br><span class="line">      <span class="comment"># Automatically reload modified modules</span></span><br><span class="line">      <span class="keyword">if</span> self.settings.get(<span class="string">&#x27;autoreload&#x27;</span>):</span><br><span class="line">          <span class="keyword">from</span> tornado <span class="keyword">import</span> autoreload</span><br><span class="line">          autoreload.start()</span><br></pre></td></tr></table></figure>

<p>将Application与handlers进行绑定，内部会将handlers的对应关系告诉Application</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, handlers=<span class="literal">None</span>, default_host=<span class="literal">None</span>, transforms=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               **settings</span>):</span></span><br><span class="line">···········</span><br><span class="line">      self.wildcard_router = _ApplicationRouter(self, handlers)</span><br><span class="line">      self.default_router = _ApplicationRouter(self, [</span><br><span class="line">          Rule(AnyMatches(), self.wildcard_router)</span><br><span class="line">      ])</span><br><span class="line">···········</span><br></pre></td></tr></table></figure>

<p>到此为止，Application已经初始化结束。关于<code>tornado.web.RequestHandler</code>具体的实现后续会讲，小小的期待哦～</p>
<h2 id="实例化tornado-httpserver-HTTPServer"><a href="#实例化tornado-httpserver-HTTPServer" class="headerlink" title="实例化tornado.httpserver.HTTPServer"></a>实例化tornado.httpserver.HTTPServer</h2><p>实例化<code>HTTPServer</code>时，会将Application传入，就像这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http_server = tornado.httpserver.HTTPServer(app)</span><br></pre></td></tr></table></figure>

<p><code>tornado.httpserver.HTTPServer</code>是一个单线程非阻塞的HTTP服务，它多继承自<code>TCPServer</code>,<code>Configurable</code>, <code>httputil.HTTPServerConnectionDelegate</code>。通常情况下，在实例化一个类的时候，会依次调用<code>__new__()</code>和<code>__init__()</code>，但是在tornado.httpserver.HTTPServer的<code>__init__()</code>注释中，它是这样解释的：<code>Ignore args to __init__; real initialization belongs in initialize since we&#39;re Configurable. (there&#39;s something weird in initialization order between this class, Configurable, and TCPServer so we can&#39;t leave __init__ out completely)</code>，也就是说，HTTPServer初始化会通过Configurable类找到HTTPServer的<code>initialize()</code>（HTTPServer，Configurable和TCPServer之间的初始化顺序有些奇怪，所以我们不能完全抛弃<code>__init__()</code>）。</p>
<p>通过debug的方式，我们发现，他会首先进入<code>Configurable</code>的<code>__new__()</code>中，其实当前真正的类对象是<code>HTTPServer</code>，因为HTTPServer继承自Configurable。简单一点来讲，在这里主要做的就是调用<code>HTTPServer</code>的<code>initialize()</code>，并且HTTPServer是单例的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configurable</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    __impl_class = <span class="literal">None</span>  <span class="comment"># type: <span class="built_in">type</span></span></span><br><span class="line">    __impl_kwargs = <span class="literal">None</span>  <span class="comment"># type: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        base = cls.configurable_base()</span><br><span class="line">        init_kwargs = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">is</span> base:</span><br><span class="line">            impl = cls.configured_class()</span><br><span class="line">            <span class="keyword">if</span> base.__impl_kwargs:</span><br><span class="line">                init_kwargs.update(base.__impl_kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            impl = cls</span><br><span class="line">        init_kwargs.update(kwargs)</span><br><span class="line">        <span class="keyword">if</span> impl.configurable_base() <span class="keyword">is</span> <span class="keyword">not</span> base:</span><br><span class="line">            <span class="comment"># The impl class is itself configurable, so recurse.</span></span><br><span class="line">            <span class="keyword">return</span> impl(*args, **init_kwargs)</span><br><span class="line">        instance = <span class="built_in">super</span>(Configurable, cls).__new__(impl)</span><br><span class="line">        <span class="comment"># initialize vs __init__ chosen for compatibility with AsyncHTTPClient</span></span><br><span class="line">        <span class="comment"># singleton magic.  If we get rid of that we can switch to __init__</span></span><br><span class="line">        <span class="comment"># here too.</span></span><br><span class="line">        instance.initialize(*args, **init_kwargs)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>

<p>进入到HTTPServer.initialize()之后，我们发现<code>request_callback</code>是一个必传的参数，这个参数对应的就是我们传入的Application对象了。</p>
<h2 id="http-server-listen-options-port"><a href="#http-server-listen-options-port" class="headerlink" title="http_server.listen(options.port)"></a>http_server.listen(options.port)</h2><p>实例化tornado.httpserver.HTTPServer对象后，我们需要调用listen()，开始监听端口并接受给定端口上的连接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span>(<span class="params">self, port, address=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Starts accepting connections on the given port.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This method may be called more than once to listen on multiple ports.</span></span><br><span class="line"><span class="string">    `listen` takes effect immediately; it is not necessary to call</span></span><br><span class="line"><span class="string">    `TCPServer.start` afterwards.  It is, however, necessary to start</span></span><br><span class="line"><span class="string">    the `.IOLoop`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sockets = bind_sockets(port, address=address)</span><br><span class="line">    self.add_sockets(sockets)</span><br></pre></td></tr></table></figure>

<p>在这个方法里，做了两件事：</p>
<ol>
<li> 通过调用bind_sockets(port, address=address)，在给定端口创建监听socket</li>
<li> 告诉socket开始接收请求，并将每一个socket都加入到IOLoop中，通过，为这个socket绑定事件</li>
</ol>
]]></content>
      <categories>
        <category>tornado</category>
      </categories>
      <tags>
        <tag>tornado 源码</tag>
      </tags>
  </entry>
  <entry>
    <title>tornado（一）——基础介绍</title>
    <url>/2019/02/12/tornado%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>参考文档：</p>
<ul>
<li><a href="https://docs.pythontab.com/tornado/introduction-to-tornado/ch1.html#ch1-2-1-1">https://docs.pythontab.com/tornado/introduction-to-tornado/ch1.html#ch1-2-1-1</a></li>
<li><a href="https://www.tornadoweb.org/en/stable/guide/intro.html">https://www.tornadoweb.org/en/stable/guide/intro.html</a></li>
</ul>
<p>开发环境：</p>
<span id="more"></span>

<ul>
<li>python3.7</li>
<li>tornado5.1</li>
</ul>
<h1 id="Tornado是什么？"><a href="#Tornado是什么？" class="headerlink" title="Tornado是什么？"></a>Tornado是什么？</h1><p>Tornado是一个Python Web框架和异步网络库，最初是在FriendFeed上开发的。通过使用非阻塞网络I / O，Tornado可以扩展到数万个开放连接，使其成为长轮询， WebSockets和其他需要与每个用户建立长期连接的应用程序的理想选择 。</p>
<p>不同于那些最多只能达到10,000个并发连接的传统网络服务器，Tornado在设计之初就考虑到了性能因素，旨在解决<a href="#1">C10K</a>问题，这样的设计使得其成为一个拥有非常高性能的框架。此外，它还拥有处理安全性、用户验证、社交网络以及与外部服务（如数据库和网站API）进行异步交互的工具。</p>
<p>tornado大致分为四个部分：</p>
<ol>
<li> <a href="http://tornado.web/">tornado.web</a></li>
<li> tornado.ioloop</li>
<li> tornado.httpserver</li>
<li> tornado.gen(当前版本可以使用<code>async def</code>代替)</li>
</ol>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure>

<h1 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h1><p>我们从简单的栗子开始，逐渐深入了解tornado吧～</p>
<h3 id="Hello-Tornado"><a href="#Hello-Tornado" class="headerlink" title="Hello Tornado"></a>Hello Tornado</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/28 上午11:43</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : hello.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : </span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line"></span><br><span class="line">define(<span class="string">&quot;port&quot;</span>, default=<span class="number">8000</span>, <span class="built_in">help</span>=<span class="string">&quot;run on the given port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        greeting = self.get_argument(<span class="string">&#x27;greeting&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">        self.write(greeting + <span class="string">&#x27;, friendly user!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>, IndexHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<p>编写一个Tornado应用中最多的工作是定义类继承Tornado的RequestHandler类。在这个例子中，我们创建了一个简单的应用，在给定的端口监听请求，并在根目录（”/“）响应请求。</p>
<p>你可以在命令行里尝试运行这个程序以测试输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python hello.py --port=8000</span><br></pre></td></tr></table></figure>

<p>现在你可以在浏览器中打开<a href="http://localhost:8000/">http://localhost:8000</a>, 或者打开另一个终端窗口使用curl测试我们的应用:<br><img src="https://img-blog.csdnimg.cn/2019021211242430.png" alt="在这里插入图片描述"><br>此时，你会在终端中看到：<br><img src="https://img-blog.csdnimg.cn/20190212112536829.png" alt="在这里插入图片描述"></p>
<hr>
<p><strong>让我们把这个例子分成小块，逐步分析它们：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br></pre></td></tr></table></figure>

<p>在程序的最顶部，我们导入了一些Tornado模块。虽然Tornado还有另外一些有用的模块，但在这个例子中我们必须至少包含这四个模块。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">&quot;port&quot;</span>, default=<span class="number">8000</span>, <span class="built_in">help</span>=<span class="string">&quot;run on the given port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>

<p>Tornado包括了一个有用的模块（<code>tornado.options</code>）来从命令行中读取设置。我们在这里使用这个模块指定我们的应用监听HTTP请求的端口。它的工作流程如下：如果一个与<code>define</code>语句中同名的设置在命令行中被给出，那么它将成为全局<code>options</code>的一个属性。如果用户运行程序时使用了<code>--help</code>选项，程序将打印出所有你定义的选项以及你在define函数的help参数中指定的文本。如果用户没有为这个选项指定值，则使用<code>default</code>的值进行代替。Tornado使用<code>type</code>参数进行基本的参数类型验证，当不合适的类型被给出时抛出一个异常。因此，我们允许一个整数的port参数作为options.port来访问程序。如果用户没有指定值，则默认为<code>8000</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        greeting = self.get_argument(<span class="string">&#x27;greeting&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">        self.write(greeting + <span class="string">&#x27;, friendly user!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这是Tornado的请求处理函数类。当处理一个请求时，Tornado将这个类实例化，并调用与HTTP请求方法所对应的方法。在这个例子中，我们只定义了一个get方法，也就是说这个处理函数将对HTTP的GET请求作出响应。我们稍后将看到实现不止一个HTTP方法的处理函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">greeting = self.get_argument(<span class="string">&#x27;greeting&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Tornado的<code>RequestHandler</code>类有一系列有用的内建方法，包括<code>get_argument</code>，我们在这里从一个querystring中取得参数greeting的值。（如果这个参数没有出现在querystring中，Tornado将使用<code>get_argument</code>的第二个参数作为默认值。）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.write(greeting + <span class="string">&#x27;, friendly user!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>RequestHandler的另一个有用的方法是<code>write</code>，它以一个字符串作为函数的参数，并将其写入到HTTP响应中。在这里，我们使用请求中greeting参数提供的值赋值到greeting中，并写回到响应中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>, IndexHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>这是真正使得Tornado运转起来的语句。首先，我们使用Tornado的<code>options</code>模块来解析命令行。然后我们创建了一个Tornado的<code>Application</code>类的实例。传递给Application类<code>__init__</code>方法的最重要的参数是<code>handlers</code>。它告诉Tornado应该用哪个类来响应请求。</p>
<p>这里的参数handlers非常重要，它应该是一个元组组成的列表，其中每个元组的第一个元素是一个用于匹配的正则表达式，第二个元素是一个RequestHanlder类。在hello.py中，我们只指定了一个<code>正则表达式-RequestHanlder</code>对，但你可以按你的需要指定任意多个。</p>
<p>Tornado在元组中使用正则表达式来匹配HTTP请求的路径。（这个路径是URL中主机名后面的部分，不包括查询字符串和碎片。）Tornado把这些正则表达式看作已经包含了行开始和结束锚点（即，字符串”/“被看作为”^/$“）。</p>
<p>如果一个正则表达式包含一个捕获分组（即，正则表达式中的部分被括号括起来），匹配的内容将作为相应HTTP请求的参数传到RequestHandler对象中。我们将在下个例子中看到它的用法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">http_server.listen(options.port)</span><br><span class="line">tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<p>从这里开始的代码将会被反复使用：一旦<code>Application</code>对象被创建，我们可以将其传递给Tornado的<code>HTTPServer</code>对象，然后使用我们在命令行指定的端口进行监听（通过options对象取出。）最后，在程序准备好接收HTTP请求后，我们创建一个Tornado的<code>IOLoop</code>的实例。</p>
<h3 id="关于RequestHandler的更多知识"><a href="#关于RequestHandler的更多知识" class="headerlink" title="关于RequestHandler的更多知识"></a>关于RequestHandler的更多知识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/2/12 上午11:33</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : string_service.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : </span></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line"></span><br><span class="line">define(<span class="string">&quot;port&quot;</span>, default=<span class="number">8000</span>, <span class="built_in">help</span>=<span class="string">&quot;run on the given port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReverseHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        self.write(<span class="built_in">input</span>[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        text = self.get_argument(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        width = self.get_argument(<span class="string">&#x27;width&#x27;</span>, <span class="number">40</span>)</span><br><span class="line">        self.write(textwrap.fill(text, <span class="built_in">int</span>(width)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r&quot;/reverse/(\w+)&quot;</span>, ReverseHandler),</span><br><span class="line">            (<span class="string">r&quot;/wrap&quot;</span>, WrapHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<p>如同运行第一个例子，你可以在命令行中运行这个例子使用如下的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python string_service.py --port=8000</span><br></pre></td></tr></table></figure>

<p>这个程序是一个通用的字符串操作的Web服务端基本框架。到目前为止，你可以用它做两件事情。</p>
<p>其一，到/reverse/string的GET请求将会返回URL路径中指定字符串的反转形式。<br><img src="https://img-blog.csdnimg.cn/2019021212252356.png" alt="在这里插入图片描述"></p>
<p>其二，到/wrap的POST请求将从参数text中取得指定的文本，并返回按照参数width指定宽度装饰的文本。下面的请求指定一个没有宽度的字符串，所以它的输出宽度被指定为程序中的get_argument的默认值40个字符。<br><img src="https://img-blog.csdnimg.cn/20190212122514506.png" alt="在这里插入图片描述"></p>
<p><code>string_service.py</code>和<code>hello.py</code>示例代码中大部分是一样的。让我们关注那些新的代码。首先，让我们看看传递给Application构造函数的<code>handlers</code>参数的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r&quot;/reverse/(\w+)&quot;</span>, ReverseHandler),</span><br><span class="line">            (<span class="string">r&quot;/wrap&quot;</span>, WrapHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，Application类在<code>handlers</code>参数中实例化了两个RequestHandler类对象。第一个引导Tornado传递路径匹配下面的正则表达式的请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/reverse/(\w+)</span><br></pre></td></tr></table></figure>

<p>正则表达式告诉Tornado匹配任何以字符串<code>/reverse/</code>开始并紧跟着一个或多个字母的路径。括号的含义是让Tornado保存匹配括号里面表达式的字符串，并将其作为请求方法的一个参数传递给RequestHandler类。让我们检查ReverseHandler的定义来看看它是如何工作的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ReverseHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self, input):</span><br><span class="line">        self.write(input[::-1])</span><br></pre></td></tr></table></figure>

<p>你可以看到这里的<code>get</code>方法有一个额外的参数<code>input</code>。这个参数将包含匹配处理函数正则表达式第一个括号里的字符串。（如果正则表达式中有一系列额外的括号，匹配的字符串将被按照在正则表达式中出现的顺序作为额外的参数传递进来。）</p>
<p>现在，让我们看一下<code>WrapHandler</code>的定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        text = self.get_argument(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        width = self.get_argument(<span class="string">&#x27;width&#x27;</span>, <span class="number">40</span>)</span><br><span class="line">        self.write(textwrap.fill(text, <span class="built_in">int</span>(width)))</span><br></pre></td></tr></table></figure>

<p>WrapHandler类处理匹配路径为<code>/wrap</code>的请求。这个处理函数定义了一个post方法，也就是说它接收HTTP的POST方法的请求。</p>
<p>我们之前使用RequestHandler对象的<code>get_argument</code>方法来捕获请求查询字符串的的参数。同样，我们也可以使用相同的方法来获得POST请求传递的参数。（Tornado可以解析URLencoded和multipart结构的POST请求）。一旦我们从POST中获得了文本和宽度的参数，我们使用Python内建的textwrap模块来以指定的宽度装饰文本，并将结果字符串写回到HTTP响应中。</p>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>http的状态码我们都十分熟悉，你可以使用RequestHandler类的<code>set_status()</code>方法显式地设置HTTP状态码。然而，你需要记住在某些情况下，Tornado会自动地设置HTTP状态码。下面是一个常用情况的纲要：</p>
<ul>
<li><p><strong>404 Not Found</strong><br>Tornado会在HTTP请求的路径无法匹配任何RequestHandler类相对应的模式时返回404（Not Found）响应码。</p>
</li>
<li><p><strong>400 Bad Request</strong><br>如果你调用了一个没有默认值的get_argument函数，并且没有发现给定名称的参数，Tornado将自动返回一个400（Bad Request）响应码。</p>
</li>
<li><p><strong>405 Method Not Allowed</strong><br>如果传入的请求使用了RequestHandler中没有定义的HTTP方法（比如，一个POST请求，但是处理函数中只有定义了get方法），Tornado将返回一个405（Methos Not Allowed）响应码。</p>
</li>
<li><p><strong>500 Internal Server Error</strong></p>
</li>
<li><p>当程序遇到任何不能让其退出的错误时，Tornado将返回500（Internal Server Error）响应码。你代码中任何没有捕获的异常也会导致500响应码。</p>
</li>
<li><p><strong>200 OK</strong><br>如果响应成功，并且没有其他返回码被设置，Tornado将默认返回一个200（OK）响应码。</p>
</li>
</ul>
<p>当上述任何一种错误发生时，Tornado将默认向客户端发送一个包含状态码和错误信息的简短片段。如果你想使用自己的方法代替默认的错误响应，你可以重写<code>write_error</code>方法在你的RequestHandler类中。比如，以下代码是hello.py示例添加了常规的错误消息的版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/28 上午11:43</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : hello-errors.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : </span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line"></span><br><span class="line">define(<span class="string">&quot;port&quot;</span>, default=<span class="number">8000</span>, <span class="built_in">help</span>=<span class="string">&quot;run on the given port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        greeting = self.get_argument(<span class="string">&#x27;greeting&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">        self.write(greeting + <span class="string">&#x27;, friendly user!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_error</span>(<span class="params">self, status_code, **kwargs</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Gosh darnit, user! You caused a %d error.&quot;</span> % status_code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>, IndexHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<p>当我们尝试一个POST请求时，会得到下面的响应。一般来说，我们应该得到Tornado默认的错误响应，但因为我们覆写了<code>write_error</code>，我们会得到不一样的东西：<br><img src="https://img-blog.csdnimg.cn/20190212122501749.png" alt="在这里插入图片描述"></p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h3 id="C10K问题"><a href="#C10K问题" class="headerlink" title="C10K问题"></a>C10K问题</h3><p>基于线程的服务器，如Apache，为了传入的连接，维护了一个操作系统的线程池。Apache会为每个HTTP连接分配线程池中的一个线程，如果所有的线程都处于被占用的状态并且尚有内存可用时，则生成一个新的线程。尽管不同的操作系统会有不同的设置，大多数Linux发布版中都是默认线程堆大小为8MB。Apache的架构在大负载下变得不可预测，为每个打开的连接维护一个大的线程池等待数据极易迅速耗光服务器的内存资源。</p>
<p>大多数社交网络应用都会展示实时更新来提醒新消息、状态变化以及用户通知，这就要求客户端需要保持一个打开的连接来等待服务器端的任何响应。这些长连接或推送请求使得Apache的最大线程池迅速饱和。一旦线程池的资源耗尽，服务器将不能再响应新的请求。</p>
<p>异步服务器在这一场景中的应用相对较新，但他们正是被设计用来减轻基于线程的服务器的限制的。当负载增加时，诸如Node.js，lighttpd和Tornodo这样的服务器使用协作的多任务的方式进行优雅的扩展。也就是说，如果当前请求正在等待来自其他资源的数据（比如数据库查询或HTTP请求）时，一个异步服务器可以明确地控制以挂起请求。异步服务器用来恢复暂停的操作的一个常见模式是当合适的数据准备好时调用回调函数。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>tornado tornado</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制求和</title>
    <url>/2019/10/11/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<p>原题链接：<a href="https://leetcode-cn.com/problems/add-binary">https://leetcode-cn.com/problems/add-binary</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个二进制字符串，返回他们的和（用二进制表示）。<br>输入为非空字符串且只包含数字 1 和 0。<br>示例 1:</p>
<span id="more"></span>

<blockquote>
<p>输入: a = “11”, b = “1” 输出: “100”</p>
</blockquote>
<p>示例 2:</p>
<blockquote>
<p>输入: a = “1010”, b = “1011” 输出: “10101”</p>
</blockquote>
<h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span>(<span class="params">self, a: <span class="built_in">str</span>, b: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(a,<span class="number">2</span>)+<span class="built_in">int</span>(b,<span class="number">2</span>))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python python</tag>
      </tags>
  </entry>
  <entry>
    <title>解决python3.7 + celery4.2.1运行时找不到async</title>
    <url>/2019/01/09/%E8%A7%A3%E5%86%B3python3.7%20+%20celery4.2.1%E8%BF%90%E8%A1%8C%E6%97%B6%E6%89%BE%E4%B8%8D%E5%88%B0async/</url>
    <content><![CDATA[<p>参考文档：</p>
<ul>
<li><a href="https://github.com/celery/celery/issues/4500">https://github.com/celery/celery/issues/4500</a></li>
</ul>
<p>最近在使用python3.7去运行celery4.2.1时，发现会报以下错误：<br><img src="https://img-blog.csdnimg.cn/20190109203309807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>原因是python3.7中<code>async</code>已经变成了关键字。因此出现这个错误时，需要将报错文件中所有的<code>async</code>改为<code>asynchronous</code>，并编写如下shell脚本运行：</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TARGET=/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/celery/backends</span><br><span class="line">cd $TARGET</span><br><span class="line">if [ -e async.py ]</span><br><span class="line">then</span><br><span class="line">    mv async.py asynchronous.py</span><br><span class="line">    sed -n &#x27;s/async/asynchronous/g&#x27; redis.py</span><br><span class="line">    sed -n &#x27;s/async/asynchronous/g&#x27; rpc.py</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>运行后，你会发现celery可以正常使用了</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery python3.7 celery</tag>
      </tags>
  </entry>
  <entry>
    <title>计算字符串相似度的一些方法</title>
    <url>/2018/09/30/%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>产品出了一个奇怪的需求，想通过字符串相似度取匹配城市= =（当然，最后证实通过字符串相似度取判断两个字符串是不是一个城市是不对的！！！）</p>
<p>这里就记录一下我计算字符串(英文字符串)相似度的方法吧～</p>
<span id="more"></span>

<p>参考文档：</p>
<ul>
<li><a href="https://www.jianshu.com/p/06370a33e1ee">python_levenshtein 的安装和使用</a></li>
<li><a href="https://blog.csdn.net/zz_dd_yy/article/details/51926305">相似度算法之余弦相似度</a></li>
</ul>
<h3 id="Levenshtein"><a href="#Levenshtein" class="headerlink" title="Levenshtein"></a><strong>Levenshtein</strong></h3><ul>
<li><p>Levenshtein.hamming(str1, str2)</p>
<p>计算汉明距离。要求str1和str2必须长度一致。是描述两个等长字串之间对应位置上不同字符的个数。</p>
<p>用法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import Levenshtein</span>     </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Levenshtein.hamming(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>)</span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Levenshtein.hamming(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>)</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li>
<li><p>Levenshtein.distance(str1, str2)</p>
<p>计算编辑距离（也成Levenshtein距离）。是描述由一个字串转化成另一个字串最少的操作次数，在其中的操作包括插入、删除、替换。</p>
<p>用法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Levenshtein.distance(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Levenshtein.distance(<span class="string">&#x27;cxy&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li>
<li><p>Levenshtein.ratio(str1, str2)</p>
<p>计算莱文斯坦比。计算公式 r = (sum - ldist) / sum, 其中sum是指str1 和 str2 字串的长度总和，ldist是类编辑距离</p>
<p>注意：这里的类编辑距离不是<code>Levenshtein.distance(str1, str2)</code>所说的编辑距离，<code>Levenshtein.distance(str1, str2)</code>中三种操作中每个操作+1，而在此处，删除、插入依然+1，但是替换+2<br>这样设计的目的：ratio(‘a’, ‘c’)，sum=2,按2中计算为（2-1）/2 = 0.5,’a’,’c’没有重合，显然不合算，但是替换操作+2，就可以解决这个问题。</p>
<p>用法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Levenshtein.ratio(<span class="string">&#x27;a,cdsf&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>)</span>		      </span><br><span class="line">0.6</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="difflib"><a href="#difflib" class="headerlink" title="difflib"></a><strong>difflib</strong></h3><p>我主要用的是<code>SequenceMatcher</code>， 因此，本次只介绍<code>SequenceMatcher</code>.</p>
<p><code>SequenceMatcher</code>是可以对两个可序列化的对象进行比较的类</p>
<p>官网上的用法是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; s = SequenceMatcher(lambda x: x == <span class="string">&quot; &quot;</span>,</span></span><br><span class="line">   ...                     &quot;private Thread currentThread;&quot;,</span><br><span class="line">   ...                     &quot;private volatile Thread currentThread;&quot;)</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(round(s.ratio(), 3))</span></span><br><span class="line">   0.866</span><br></pre></td></tr></table></figure>

<p>第一个参数为一个函数，主要用来去掉自己不想算在内的元素；如果没有，可以写<code>None</code><br>后面两个参数就是需要比较的两个对象了</p>
<h3 id="余弦定理"><a href="#余弦定理" class="headerlink" title="余弦定理"></a><strong>余弦定理</strong></h3><p><a href="https://blog.csdn.net/zz_dd_yy/article/details/51926305">相似度算法之余弦相似度</a></p>
<p>通过阅读上面的文章，我们可以简单总结计算相似度的几个步骤：</p>
<ol>
<li><p>列出所有出现的字母，并分别统计两个字符串出现这些字母的次数。这里我是这样写的，利用<code>from collections import Counter, OrderedDict</code></p>
<p> 方法：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from collections import Counter, OrderedDict</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from copy import deepcopy</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = <span class="string">&#x27;abc&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = <span class="string">&#x27;bcde&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; item = <span class="built_in">set</span>(a) | <span class="built_in">set</span>(b)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; item</span></span><br><span class="line">&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;d&#x27;, &#x27;a&#x27;&#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model = OrderedDict().fromkeys(item)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model</span></span><br><span class="line">OrderedDict([(&#x27;b&#x27;, None), (&#x27;c&#x27;, None), (&#x27;e&#x27;, None), (&#x27;d&#x27;, None), (&#x27;a&#x27;, None)])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model1 = deepcopy(model)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model2 = deepcopy(model)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model1.update(Counter(a))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model1</span></span><br><span class="line">OrderedDict([(&#x27;b&#x27;, 1), (&#x27;c&#x27;, 1), (&#x27;e&#x27;, None), (&#x27;d&#x27;, None), (&#x27;a&#x27;, 1)])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model2.update(Counter(b))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; model2</span></span><br><span class="line">OrderedDict([(&#x27;b&#x27;, 1), (&#x27;c&#x27;, 1), (&#x27;e&#x27;, 1), (&#x27;d&#x27;, 1), (&#x27;a&#x27;, None)])</span><br></pre></td></tr></table></figure>

<p> 这样写的原因是，在比较词频的时候，要保证每个字母的顺序是一样的～</p>
</li>
<li><p>利用余弦公式计算相似度</p>
<p> 方法：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; import math</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; sum = 0	<span class="comment">#分子</span></span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; q1 = 0	<span class="comment">#分母</span></span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; q2 = 0	<span class="comment">#分母</span></span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> item:</span></span><br><span class="line">a = model1[i] if type(model1[i]) != type(None) else 0</span><br><span class="line">b = model2[i] if type(model2[i]) != type(None) else 0</span><br><span class="line">sum += a * b</span><br><span class="line">q1 += pow(a, 2)</span><br><span class="line">q2 += pow(b, 2)</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; sum</span></span><br><span class="line">   2</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; q1</span></span><br><span class="line">   3</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; q2</span></span><br><span class="line">   4</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; result = <span class="built_in">float</span>(sum) / (math.sqrt(q1) * math.sqrt(q2))</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash">&gt;&gt; result</span></span><br><span class="line">   0.5773502691896258</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样就算出相似度啦～</p>
<p>ps：本文说的计算的字符串，全是英文字符串～～</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>字符串相似度</tag>
      </tags>
  </entry>
  <entry>
    <title>django项目开发实战——博客</title>
    <url>/2018/08/08/django%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="p个大s："><a href="#p个大s：" class="headerlink" title="p个大s："></a>p个大s：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里用的是python3.7和Django2.0.假设全都安装成功= =</span><br><span class="line">然后这个是我做个人网站的一个过程=。=</span><br><span class="line">然后这个也不能算是个教程吧=。=</span><br><span class="line">然后这只是粗糙的记录=。=</span><br><span class="line">最后，防脱发用霸王=3=</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="生成一个完整的django项目"><a href="#生成一个完整的django项目" class="headerlink" title="生成一个完整的django项目"></a>生成一个完整的django项目</h3><ul>
<li><p><strong>创建Django项目</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin.py startproject MySite</span><br></pre></td></tr></table></figure>

<p>此时，你会看到这样的文件夹：<br><img src="http://static.zybuluo.com/chuxiaoyi/49h3i95aw0oqoecmvefqd8l1/image_1cjvd08ra1bil15seqb71p312or9.png" alt="image_1cjvd08ra1bil15seqb71p312or9.png-6.5kB"></p>
</li>
<li><p><strong>运行一下你的项目，看看有没有成功</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py runserver</span><br></pre></td></tr></table></figure>

<p>终端会显示这些：<br><img src="http://static.zybuluo.com/chuxiaoyi/i4gc0elqc605ajy3f3vf69n8/image_1cjvd8tjj4aq48ihk21n4d1b38m.png" alt="image_1cjvd8tjj4aq48ihk21n4d1b38m.png-79kB"><br>有红字也不要担心，因为还没有设置呢！<br>接下来去<code>http://127.0.0.1:8000/</code>看一看：<br><img src="http://static.zybuluo.com/chuxiaoyi/n2ym6tgwxd9plj2uhzugpaxi/image_1cjvdb63b1bcl1jnpupct2610j423.png" alt="image_1cjvdb63b1bcl1jnpupct2610j423.png-121.7kB"><br>成功了！<br><strong>ps：</strong>如果想要外部机器（同一网络）访问本机的Django服务的话，要写成<code>./manage.py runserver 0.0.0.0:9999</code>,并将<code>setting.py</code>中的<code>ALLOWED_HOSTS</code>改为<code>ALLOWED_HOSTS = [&#39;*&#39;, ]</code>，一定要加<strong>逗号</strong>！</p>
</li>
<li><p><strong>改一些配置</strong><br><strong>ps</strong>：这里的顺序可能不对。= =</p>
<ol>
<li>更改<code>/MySite/MySite/settings.py</code>中的内容<br>Django默认的<code>DATABASES</code>是<code>sqlite</code>，是这样的：<br><img src="http://static.zybuluo.com/chuxiaoyi/v5k5xmi0xg796sduhoai22xt/image_1cjvdpm002a81skaf2714pr1f2t2g.png" alt="image_1cjvdpm002a81skaf2714pr1f2t2g.png-13.3kB"><br>这里我是用的是<code>MySQL</code>数据库，因此，我要改成这样：</li>
</ol>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;MySite&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;xxxxx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  这里一定要确保数据库已经存在了。在这之前，需要创建数据库，像这样滴：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database MySite CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>  还要更改<strong>时区</strong>和<strong>语言</strong><br>  <img src="http://static.zybuluo.com/chuxiaoyi/t8bc491f1uw4z71ij3vplcb1/image_1cjveevfspif39o6hm2mnucn3d.png" alt="image_1cjveevfspif39o6hm2mnucn3d.png-5.8kB"></p>
<ol start="2">
<li> 向<code>/MySite/MySite/__init__.py</code>中添加内容</li>
</ol>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li>
<li><p><strong>数据库迁移</strong><br>首先，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py makemigrations</span><br></pre></td></tr></table></figure>

<p>然后，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py migrate</span><br></pre></td></tr></table></figure>

<p>这样就成功啦～<br><img src="http://static.zybuluo.com/chuxiaoyi/ekq7zlcwi70z8znyr2jy1now/image_1cjvfbgkulc0gvt1gl9cu01sgd4a.png" alt="image_1cjvfbgkulc0gvt1gl9cu01sgd4a.png-70.9kB"></p>
</li>
<li><p><strong>创建超级用户</strong><br>创建超级用户是用来登陆到admin后台管理中的<br>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<p>然后按照提示填写就好啦～<br><strong>ps：</strong>一定要先进行数据库迁移，再创建用户。否则，会出现<img src="http://static.zybuluo.com/chuxiaoyi/du4zwcl0gkr8x9jc5o7vhpm1/image_1cjvfv00s1kuo119k1t8dh581ug84n.png" alt="image_1cjvfv00s1kuo119k1t8dh581ug84n.png-6.3kB"></p>
</li>
<li><p><strong>进入admin看看</strong><br>在浏览器中输入<code>http://127.0.0.1:8000/admin</code>，会出现登录页面，此时会发现全都变成中文了，说明之前的设置生效了。<br><img src="http://static.zybuluo.com/chuxiaoyi/tfogy4umjmduw5t0utatz3o2/image_1cjvg4n791bobtht1smbf1f1u7t54.png" alt="image_1cjvg4n791bobtht1smbf1f1u7t54.png-41.6kB"><br>接下来，就可以用刚刚创建的用户登陆了，查看后台数据了！</p>
</li>
</ul>
<h3 id="项目正式开始"><a href="#项目正式开始" class="headerlink" title="项目正式开始"></a>项目正式开始</h3><ul>
<li><p><strong>创建app</strong><br>执行<code>./manage.py startapp Post</code>,查看项目结构，如下：<br><img src="http://static.zybuluo.com/chuxiaoyi/gmgmt3mz41l9swzbv1axotyg/image_1cjvibkvpei29mk1doucvv12j15h.png" alt="image_1cjvibkvpei29mk1doucvv12j15h.png-10kB"></p>
<p>完成上步操作后，需要在<code>/MySite/MySite/settings.py</code>中将app添加进去：<br><img src="http://static.zybuluo.com/chuxiaoyi/cqlxbmom3dcu4sskz3s9jkd8/image_1cjvifci91ss01v9l1l1g1m5moo25u.png" alt="image_1cjvifci91ss01v9l1l1g1m5moo25u.png-14.5kB"><br>接下来，需要在app文件夹下添加<code>urls.py</code>，用于路由映射：<br><img src="http://static.zybuluo.com/chuxiaoyi/wv0tgog0pl8u2q8zcoq112um/image_1cjvilv4o14lf9a9371jkjhcr7o.png" alt="image_1cjvilv4o14lf9a9371jkjhcr7o.png-9.4kB"><br>在<code>urls.py</code>中这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app_name = <span class="string">&#x27;Post&#x27;</span>   <span class="comment"># 这里是为了url反向解析用</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">  <span class="comment"># 这里放映射的view</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>同时，在<code>/MySite/MySite/urls.py</code>中需要添加对<code>Post.urls</code>的映射：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">  path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">  path(<span class="string">r&#x27;&#x27;</span>, include(<span class="string">&#x27;Post.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>创建模型</strong><br>在app下的<code>models.py</code>创建自己的模型就可以啦~</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;分类&quot;&quot;&quot;</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;标签&quot;&quot;&quot;</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;文章&quot;&quot;&quot;</span></span><br><span class="line">  title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">  body = models.TextField()</span><br><span class="line">  created_time = models.DateTimeField()</span><br><span class="line">  modified_time = models.DateTimeField()</span><br><span class="line">  excerpt = models.CharField(max_length=<span class="number">200</span>, blank=<span class="literal">True</span>)  <span class="comment"># 文章摘要，可为空</span></span><br><span class="line">  category = models.ForeignKey(Category, on_delete=<span class="literal">True</span>)  <span class="comment"># ForeignKey表示1对多（多个post对应1个category）</span></span><br><span class="line">  tags = models.ManyToManyField(Tag, blank=<span class="literal">True</span>)</span><br><span class="line">  views = models.PositiveIntegerField(default=<span class="number">0</span>)  <span class="comment"># 阅读量</span></span><br></pre></td></tr></table></figure>

<p>然后一定不要忘记再进行<strong>数据库迁移</strong>啊！！</p>
</li>
<li><p><strong>前端模版</strong><br>这里的前端模板使用的是模板之家的<br>链接��：<a href="http://www.cssmoban.com/tags.asp?n=html5">http://www.cssmoban.com/tags.asp?n=html5</a></p>
<p>首先创建templates目录，结构如下：<br><img src="http://static.zybuluo.com/chuxiaoyi/clj4spcx26385unz62hwxg26/image_1cjvlp6q840k17eg1cubd8i1qpi8i.png" alt="image_1cjvlp6q840k17eg1cubd8i1qpi8i.png-12.8kB"><br>此时，需要在<code>setting.py</code>中添加关于模板的配置：<br><img src="http://static.zybuluo.com/chuxiaoyi/qp8cowqr7rlu64tu0znzihgn/image_1cjvls24ohf91gngccsuk5ce8v.png" alt="image_1cjvls24ohf91gngccsuk5ce8v.png-39.8kB"></p>
<p>接下来是static目录，结构如下：<br><img src="http://static.zybuluo.com/chuxiaoyi/gfdqcztquhucuf7urxraech7/image_1cjvlvc96ir9hk4ubn1jk73uq9c.png" alt="image_1cjvlvc96ir9hk4ubn1jk73uq9c.png-9.5kB"><br>显而易见，这里放的是一些css、js文件等</p>
</li>
<li><p><strong>index视图</strong><br>首先，在<code>Post/views.py</code>中实现<code>index</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  主页</span></span><br><span class="line"><span class="string">  :param request:</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">return</span> render(request=request, template_name=<span class="string">&#x27;Post/index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>request</code>为请求对象;<br><code>template_name</code>为渲染的前端页面的路径字符串（相对templates目录）</p>
<p>然后，在<code>Post/urls.py</code>中进行路由映射：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">  url(<span class="string">r&#x27;^$&#x27;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意：如果你主页的url是空，正则必须写成<strong>^$</strong></p>
<p>最后，一定要要修改静态页面中引用的路径。<br>对于Django来说，可以使用<code>static</code>标签。<br>在页面开头引入<code>&#123;% load static %&#125;</code>，这个对应的配置信息是<img src="http://static.zybuluo.com/chuxiaoyi/1oihspdgm87u6fs8xsyi7rs3/image_1ck6k15rg1j1lfei3j1aoepvha9.png" alt="image_1ck6k15rg1j1lfei3j1aoepvha9.png-2.7kB"><br>并将页面中的路径改为<img src="http://static.zybuluo.com/chuxiaoyi/yij56j7cs2lce5bzsd4d4mdp/image_1ck6k35as1gm97pr1gng1ch41ns7am.png" alt="image_1ck6k35as1gm97pr1gng1ch41ns7am.png-4.5kB"><br><strong>ps：</strong>对于css或者js中的引用也不要忘了改！</p>
<p>运行一下。<br><img src="http://static.zybuluo.com/chuxiaoyi/d5dremlh2i930xisccmz8d62/image_1ck6k74sv5p3212h1osclqub3.png" alt="image_1ck6k74sv5p3212h1osclqub3.png-422.3kB"><br>搞定！</p>
</li>
<li><p><strong>向前端渲染及分页</strong><br>首先，更改<code>index()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  主页</span></span><br><span class="line"><span class="string">  :param request:</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  post = Post.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">  limit = <span class="number">3</span></span><br><span class="line">  paginator = Paginator(post, limit)</span><br><span class="line">  page = request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  result = paginator.page(page)</span><br><span class="line">  context = &#123;</span><br><span class="line">      <span class="string">&quot;post_list&quot;</span>: result,</span><br><span class="line">      <span class="string">&quot;page&quot;</span>: page</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> render(request=request, template_name=<span class="string">&#x27;Post/index.html&#x27;</span>, context=context)</span><br></pre></td></tr></table></figure>

<p>然后修改<code>index.html</code><br><img src="http://static.zybuluo.com/chuxiaoyi/y1tnpxlnteb4sdpfe39lh6hh/image_1ck6ueleqhgg1ml215qg8461hpkbg.png" alt="image_1ck6ueleqhgg1ml215qg8461hpkbg.png-122kB"></p>
<p>运行看一下<br><img src="http://static.zybuluo.com/chuxiaoyi/rl9rr4j86xh9eqzlhuk8vm2u/image_1ck6uhi34mt1nqi1a3i46p204bt.png" alt="image_1ck6uhi34mt1nqi1a3i46p204bt.png-173.5kB"><br>搞定！</p>
</li>
<li><p><strong>更改index.html中的所有跳转链接</strong><br>在这里，我用的是url的反向解析。这样可以减轻后期维护成本。因此，就需要在urls.py中添加如下信息：<br><img src="http://static.zybuluo.com/chuxiaoyi/xb662pip3z8x1271lcahbb35/image_1ck6vajq31hn72jkr4hjpe1dt1ca.png" alt="image_1ck6vajq31hn72jkr4hjpe1dt1ca.png-11.1kB"></p>
<p><img src="http://static.zybuluo.com/chuxiaoyi/mrayby38anpbctc28d2dmf3q/image_1ck6vb9cieha182n1eg12rt7qfcn.png" alt="image_1ck6vb9cieha182n1eg12rt7qfcn.png-7.8kB"><br>在html中修改成如下：<br><img src="http://static.zybuluo.com/chuxiaoyi/gz98bcgfeuyk3wl41rrswsi0/image_1ck6vcgaqlpe8dqsf8qnn17rndk.png" alt="image_1ck6vcgaqlpe8dqsf8qnn17rndk.png-3.5kB"></p>
</li>
<li><p><strong>博客文章页面</strong><br>别忘了改跳转链接！！！！<br>文章详情页和主页大体结构是相似的，因此，这里使用了模版继承。<br>在基类模版里，使用这个，将子类模版需要填充的位置占位<br><img src="http://static.zybuluo.com/chuxiaoyi/49j3eahshzer64j9h6nqpuoj/image_1ck99cgjpsqtjq41hnk148j1ak9.png" alt="image_1ck99cgjpsqtjq41hnk148j1ak9.png-4.6kB"><br>然后在子类模板中，使用相同的标签将填充的内容进行包裹<br>最后，不要忘了在子类模板中再写上<code>&#123;% extends 'Post/base.html' %&#125;</code>和<code>&#123;% load static %&#125;</code></p>
<p>在<code>Post/urls.py</code>中添加详情页的url：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url(r&#x27;^detail/post-(?P&lt;pk&gt;\d+)$&#x27;, views.detail, name=&quot;detail&quot;),</span><br></pre></td></tr></table></figure>

<p>并添加detail视图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, pk</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">:param request: </span></span><br><span class="line"><span class="string">:param pk: 接收到的文章的主键id</span></span><br><span class="line"><span class="string">:return: </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> render(request, template_name=<span class="string">&#x27;Post/blog.html&#x27;</span>, )</span><br></pre></td></tr></table></figure>

<p>运行看一下吧！<br><img src="http://static.zybuluo.com/chuxiaoyi/y4kk578e16p5tyeiyd7mhecl/image_1ck99kovo16t218tb11lo19k441mm.png" alt="image_1ck99kovo16t218tb11lo19k441mm.png-257kB"><br>搞定！<br>继续在视图中添加内容，将假数据改为真实的文章数据<br>对于多对多的关系来说，可以写成这样：<br><img src="http://static.zybuluo.com/chuxiaoyi/rnf7dr6w65lrn908p5f73rfu/image_1ck9hp2bkhnqamtcnbbm415813.png" alt="image_1ck9hp2bkhnqamtcnbbm415813.png-10.1kB"><br>看一看效果吧！<br><img src="http://static.zybuluo.com/chuxiaoyi/iplx5zoz3up0mlsm7k75j2ie/image_1ck9i8vcll104c16qd1i9r2k01g.png" alt="image_1ck9i8vcll104c16qd1i9r2k01g.png-264.3kB"></p>
<p>**接下来就是让我可以上传markdown格式的文本了！<br>这个暂时先不解决了= =，小本本记下来**</p>
</li>
<li><p><strong>添加分类栏</strong><br>这里使用自定义模版标签！<br>首先，在app文件夹下，创建<code>templatetags</code>文件夹，然后创建一个py文件，里面定义模版标签，目录是这样滴：<br><img src="http://static.zybuluo.com/chuxiaoyi/el867o3qwzqlek2v3f39bn9z/image_1ckc3ee0n117f10is15k8idd402d.png" alt="image_1ckc3ee0n117f10is15k8idd402d.png-9.9kB"></p>
<p>然后定义一个分类目录的标签：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> ..models <span class="keyword">import</span> Category</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_categories</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  分类目录标签</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">return</span> Category.objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<p>在前端引用自定义标签时，一定要开头加载自定义的模版标签所在的py文件，<code>&#123;% load simple_tags %&#125;</code>,然后再使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% get_categories as category_list %&#125;</span><br><span class="line">&#123;% for category in category_list %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; category.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>看一下效果吧！<br><img src="http://static.zybuluo.com/chuxiaoyi/4i86entcw88n7jzapw847n57/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_f1e71885-52fc-43e6-b722-a51dc80c8934.png" alt="企业微信截图_f1e71885-52fc-43e6-b722-a51dc80c8934.png-364.8kB"><br>搞定！</p>
</li>
<li><p><strong>评论功能</strong><br>评论功能新建一个app</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py startapp comment </span><br></pre></td></tr></table></figure>

<p>不要忘了把它注册到django中<br><img src="http://static.zybuluo.com/chuxiaoyi/cjebk0cdfykz15cnb347inx9/image_1ckc6rca21j8d73ogvq16a01cl01e.png" alt="image_1ckc6rca21j8d73ogvq16a01cl01e.png-15.2kB"></p>
<p>创建模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">  email = models.EmailField(max_length=<span class="number">50</span>)</span><br><span class="line">  website = models.URLField(blank=<span class="literal">True</span>)</span><br><span class="line">  text = models.TextField()</span><br><span class="line">  created_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">  post = models.ForeignKey(<span class="string">&#x27;Post.Post&#x27;</span>, on_delete=<span class="literal">True</span>)  <span class="comment"># 一篇文章有多个评论</span></span><br></pre></td></tr></table></figure>

<p>不要忘了注册到admin中啊！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin.site.register(Comment)</span><br></pre></td></tr></table></figure>

<p>最重要的一步。数据库迁移啊！！！</p>
<p>这里要实现的是点击submit按钮，会提交评论<br>在<code>comment/views.py</code>中添加视图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> Post.models <span class="keyword">import</span> Post</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_comment</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  处理提交的评论</span></span><br><span class="line"><span class="string">  :param request:</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  post = request.POST</span><br><span class="line">  comment = Comment()</span><br><span class="line">  comment.name = post.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">  comment.email = post.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">  comment.website = post.get(<span class="string">&#x27;website&#x27;</span>)</span><br><span class="line">  comment.text = post.get(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">  comment.post = Post.objects.get(<span class="built_in">id</span>=pk)</span><br><span class="line">  comment.save()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;Post:detail&#x27;</span>, kwargs=&#123;<span class="string">&quot;pk&quot;</span>: pk&#125;))</span><br></pre></td></tr></table></figure>

<p>更改前端页面中的评论部分：<br><img src="http://static.zybuluo.com/chuxiaoyi/f5e47hed0uv3grf7qtdo1w8g/image_1ckcba269rui1u8a8rt1chqulf2r.png" alt="image_1ckcba269rui1u8a8rt1chqulf2r.png-37.9kB"></p>
<p>在<code>comment/urls.py</code>中添加映射：<br><img src="http://static.zybuluo.com/chuxiaoyi/19pzrwbl1kb170pul5v7x023/image_1ckcc3v5apog1quqljj7lrrh21p.png" alt="image_1ckcc3v5apog1quqljj7lrrh21p.png-13.1kB"><br>试一下吧！<br><img src="http://static.zybuluo.com/chuxiaoyi/jdgsbihsi0hdw5b56idjitl1/image_1ckcc59nn17vv1dqq1lot1lak8tk26.png" alt="image_1ckcc59nn17vv1dqq1lot1lak8tk26.png-24.9kB"><br>搞定！</p>
<p><strong>后面再完善一下。搞成可以回复的啵！小本本记下来～</strong></p>
</li>
<li><p><strong>最新评论</strong><br>这个也写成自定义标签啵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_latest_comment</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  获取最新评论</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  comment_list = Comment.objects.<span class="built_in">all</span>()[:<span class="number">5</span>].only(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;text&#x27;</span>)   <span class="comment"># 只获取特定字段</span></span><br><span class="line">  <span class="keyword">return</span> comment_list</span><br></pre></td></tr></table></figure>

<p><img src="http://static.zybuluo.com/chuxiaoyi/8ls7ecfp6838j3n0e0uzfgfv/image_1ckceclnl10r41ocn18rlu2mpfc2j.png" alt="image_1ckceclnl10r41ocn18rlu2mpfc2j.png-17.4kB"></p>
<p>看一下效果<br><img src="http://static.zybuluo.com/chuxiaoyi/4688zzma09v6kdfe0dorx8yv/image_1ckcef75i1ie51q421seb1rcu1lmm30.png" alt="image_1ckcef75i1ie51q421seb1rcu1lmm30.png-20.2kB"><br>搞定！</p>
</li>
<li><p><strong>阅读量</strong><br>在<code>Post/models.py</code>中添加：<br><img src="http://static.zybuluo.com/chuxiaoyi/1cm876ipp9l2m0ahh4hrjw1o/image_1ckcf0alj1l1u12a450avgf14323d.png" alt="image_1ckcf0alj1l1u12a450avgf14323d.png-71.1kB"></p>
<p>在<code>Post/views.py</code>中添加：<br><img src="http://static.zybuluo.com/chuxiaoyi/8bz7aaw3iqj6lxcx0vkvdgdd/image_1ckcf1coerbg1j2lroe2l91q9b3q.png" alt="image_1ckcf1coerbg1j2lroe2l91q9b3q.png-48.6kB"></p>
<p>在前端页面添加：<br><img src="http://static.zybuluo.com/chuxiaoyi/fy60nesb0nih1f8bnt2id1yh/image_1ckcf2edjfd11i6qg8e1vq51pfo47.png" alt="image_1ckcf2edjfd11i6qg8e1vq51pfo47.png-4.3kB"></p>
<p>搞定！<br><img src="http://static.zybuluo.com/chuxiaoyi/z7b8c2kehww2oufikser9o0d/image_1ckcf3k481u62unqtur1iis10ne5k.png" alt="image_1ckcf3k481u62unqtur1iis10ne5k.png-7.5kB"></p>
</li>
</ul>
<p>好啦～到这里博客基本成型了。就是不好看= =。然后后面继续完善。小本本记下来。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django python django</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi教程-进阶九（Dependencies-1）</title>
    <url>/2020/09/18/fastapi%E6%95%99%E7%A8%8B-%E8%BF%9B%E9%98%B6%E4%B9%9D%EF%BC%88Dependencies-1%EF%BC%89/</url>
    <content><![CDATA[<p><strong>参考内容</strong>：</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></li>
</ul>
<p>fastapi有非常强大的<strong>依赖注入</strong>系统，虽然听起来会很难，但是用起来非常简单，并且非常方便我们集成各种组件</p>
<span id="more"></span>

<h2 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h2><p>依赖注入是指在我们的项目中，定义了一些方法，这些方法是我们某些路径方法需要依赖的，这些方法叫做<code>依赖项</code>，当代码运行时，fastapi会将这个依赖项<strong>注入</strong>到路径方法中。</p>
<p>如果很难理解，我们可以通过了解他的使用场景来理解他的意思。依赖注入可以用在下面的场景：</p>
<ul>
<li>有共享逻辑时，也就是重复的业务逻辑</li>
<li>共享数据连接</li>
<li>安全机制、权限校验、角色管理等等</li>
<li>其他的可以复用或重复的逻辑</li>
</ul>
<p>通过使用依赖注入，可以大大减少重复代码。</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>我们先来看一个简单的例子，从而理解fastapi的依赖注入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">common_parameters</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;q&quot;</span>: q, <span class="string">&quot;skip&quot;</span>: skip, <span class="string">&quot;limit&quot;</span>: limit&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">commons: <span class="built_in">dict</span> = Depends(<span class="params">common_parameters</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> commons</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_users</span>(<span class="params">commons: <span class="built_in">dict</span> = Depends(<span class="params">common_parameters</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> commons</span><br></pre></td></tr></table></figure>

<p>在这里个例子中，我们可以发现<code>read_items</code>和<code>read_users</code>这两个路径方法都使用了<code>common_parameters</code>这个依赖项，这个依赖项希望得到：</p>
<ul>
<li>string类型的q参数</li>
<li>int类型的，默认值是0的skip参数</li>
<li>int类型，默认值是0的limit参数</li>
</ul>
<p>并且，这个依赖项会返回一个由参数组成的dict</p>
<blockquote>
<p>需要注意的一点，<code>common_parameters</code>是一个方法，是一个可调用对象，也就意味着<code>Depends</code>需要接收一个可调用对象作为参数</p>
</blockquote>
<p>我们先来启动服务，打开<code>http://127.0.0.1:8000/docs</code>，看一看她会生成怎样的api：</p>
<p><img src="https://img-blog.csdnimg.cn/2020091815543814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-mwaIPrBF-1600415650020)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p227)]"><br><img src="https://img-blog.csdnimg.cn/20200918155449869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>不难发现，api接收的参数就是依赖项的参数，到这里，我们尝试一下请求这两个api，其实我们可以分析出来当一个请求进来时fastapi是如何使用依赖注入的了：</p>
<ol>
<li> 先调用依赖项这个方法，并传入正确的参数</li>
<li> 执行依赖项，得到返回</li>
<li> 将依赖项返回结果指派给路径方法对应的参数</li>
</ol>
<p>如果很难理解，可以看下面这个图：</p>
<style>#mermaid-svg-s00DO82jbQvVmlVK .label{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);fill:#333;color:#333}#mermaid-svg-s00DO82jbQvVmlVK .label text{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .node rect,#mermaid-svg-s00DO82jbQvVmlVK .node circle,#mermaid-svg-s00DO82jbQvVmlVK .node ellipse,#mermaid-svg-s00DO82jbQvVmlVK .node polygon,#mermaid-svg-s00DO82jbQvVmlVK .node path{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-s00DO82jbQvVmlVK .node .label{text-align:center;fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .node.clickable{cursor:pointer}#mermaid-svg-s00DO82jbQvVmlVK .arrowheadPath{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-svg-s00DO82jbQvVmlVK .flowchart-link{stroke:#333;fill:none}#mermaid-svg-s00DO82jbQvVmlVK .edgeLabel{background-color:#e8e8e8;text-align:center}#mermaid-svg-s00DO82jbQvVmlVK .edgeLabel rect{opacity:0.9}#mermaid-svg-s00DO82jbQvVmlVK .edgeLabel span{color:#333}#mermaid-svg-s00DO82jbQvVmlVK .cluster rect{fill:#ffffde;stroke:#aa3;stroke-width:1px}#mermaid-svg-s00DO82jbQvVmlVK .cluster text{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-svg-s00DO82jbQvVmlVK .actor{stroke:#ccf;fill:#ECECFF}#mermaid-svg-s00DO82jbQvVmlVK text.actor>tspan{fill:#000;stroke:none}#mermaid-svg-s00DO82jbQvVmlVK .actor-line{stroke:grey}#mermaid-svg-s00DO82jbQvVmlVK .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333}#mermaid-svg-s00DO82jbQvVmlVK .messageLine1{stroke-width:1.5;stroke-dasharray:2, 2;stroke:#333}#mermaid-svg-s00DO82jbQvVmlVK #arrowhead path{fill:#333;stroke:#333}#mermaid-svg-s00DO82jbQvVmlVK .sequenceNumber{fill:#fff}#mermaid-svg-s00DO82jbQvVmlVK #sequencenumber{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK #crosshead path{fill:#333;stroke:#333}#mermaid-svg-s00DO82jbQvVmlVK .messageText{fill:#333;stroke:#333}#mermaid-svg-s00DO82jbQvVmlVK .labelBox{stroke:#ccf;fill:#ECECFF}#mermaid-svg-s00DO82jbQvVmlVK .labelText,#mermaid-svg-s00DO82jbQvVmlVK .labelText>tspan{fill:#000;stroke:none}#mermaid-svg-s00DO82jbQvVmlVK .loopText,#mermaid-svg-s00DO82jbQvVmlVK .loopText>tspan{fill:#000;stroke:none}#mermaid-svg-s00DO82jbQvVmlVK .loopLine{stroke-width:2px;stroke-dasharray:2, 2;stroke:#ccf;fill:#ccf}#mermaid-svg-s00DO82jbQvVmlVK .note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-s00DO82jbQvVmlVK .noteText,#mermaid-svg-s00DO82jbQvVmlVK .noteText>tspan{fill:#000;stroke:none}#mermaid-svg-s00DO82jbQvVmlVK .activation0{fill:#f4f4f4;stroke:#666}#mermaid-svg-s00DO82jbQvVmlVK .activation1{fill:#f4f4f4;stroke:#666}#mermaid-svg-s00DO82jbQvVmlVK .activation2{fill:#f4f4f4;stroke:#666}#mermaid-svg-s00DO82jbQvVmlVK .mermaid-main-font{font-family:"trebuchet ms", verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .section{stroke:none;opacity:0.2}#mermaid-svg-s00DO82jbQvVmlVK .section0{fill:rgba(102,102,255,0.49)}#mermaid-svg-s00DO82jbQvVmlVK .section2{fill:#fff400}#mermaid-svg-s00DO82jbQvVmlVK .section1,#mermaid-svg-s00DO82jbQvVmlVK .section3{fill:#fff;opacity:0.2}#mermaid-svg-s00DO82jbQvVmlVK .sectionTitle0{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .sectionTitle1{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .sectionTitle2{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .sectionTitle3{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .sectionTitle{text-anchor:start;font-size:11px;text-height:14px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .grid .tick{stroke:#d3d3d3;opacity:0.8;shape-rendering:crispEdges}#mermaid-svg-s00DO82jbQvVmlVK .grid .tick text{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .grid path{stroke-width:0}#mermaid-svg-s00DO82jbQvVmlVK .today{fill:none;stroke:red;stroke-width:2px}#mermaid-svg-s00DO82jbQvVmlVK .task{stroke-width:2}#mermaid-svg-s00DO82jbQvVmlVK .taskText{text-anchor:middle;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .taskText:not([font-size]){font-size:11px}#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-svg-s00DO82jbQvVmlVK .task.clickable{cursor:pointer}#mermaid-svg-s00DO82jbQvVmlVK .taskText.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutsideLeft.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutsideRight.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold}#mermaid-svg-s00DO82jbQvVmlVK .taskText0,#mermaid-svg-s00DO82jbQvVmlVK .taskText1,#mermaid-svg-s00DO82jbQvVmlVK .taskText2,#mermaid-svg-s00DO82jbQvVmlVK .taskText3{fill:#fff}#mermaid-svg-s00DO82jbQvVmlVK .task0,#mermaid-svg-s00DO82jbQvVmlVK .task1,#mermaid-svg-s00DO82jbQvVmlVK .task2,#mermaid-svg-s00DO82jbQvVmlVK .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutside0,#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutside2{fill:#000}#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutside1,#mermaid-svg-s00DO82jbQvVmlVK .taskTextOutside3{fill:#000}#mermaid-svg-s00DO82jbQvVmlVK .active0,#mermaid-svg-s00DO82jbQvVmlVK .active1,#mermaid-svg-s00DO82jbQvVmlVK .active2,#mermaid-svg-s00DO82jbQvVmlVK .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-svg-s00DO82jbQvVmlVK .activeText0,#mermaid-svg-s00DO82jbQvVmlVK .activeText1,#mermaid-svg-s00DO82jbQvVmlVK .activeText2,#mermaid-svg-s00DO82jbQvVmlVK .activeText3{fill:#000 !important}#mermaid-svg-s00DO82jbQvVmlVK .done0,#mermaid-svg-s00DO82jbQvVmlVK .done1,#mermaid-svg-s00DO82jbQvVmlVK .done2,#mermaid-svg-s00DO82jbQvVmlVK .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-svg-s00DO82jbQvVmlVK .doneText0,#mermaid-svg-s00DO82jbQvVmlVK .doneText1,#mermaid-svg-s00DO82jbQvVmlVK .doneText2,#mermaid-svg-s00DO82jbQvVmlVK .doneText3{fill:#000 !important}#mermaid-svg-s00DO82jbQvVmlVK .crit0,#mermaid-svg-s00DO82jbQvVmlVK .crit1,#mermaid-svg-s00DO82jbQvVmlVK .crit2,#mermaid-svg-s00DO82jbQvVmlVK .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-svg-s00DO82jbQvVmlVK .activeCrit0,#mermaid-svg-s00DO82jbQvVmlVK .activeCrit1,#mermaid-svg-s00DO82jbQvVmlVK .activeCrit2,#mermaid-svg-s00DO82jbQvVmlVK .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-svg-s00DO82jbQvVmlVK .doneCrit0,#mermaid-svg-s00DO82jbQvVmlVK .doneCrit1,#mermaid-svg-s00DO82jbQvVmlVK .doneCrit2,#mermaid-svg-s00DO82jbQvVmlVK .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-svg-s00DO82jbQvVmlVK .milestone{transform:rotate(45deg) scale(0.8, 0.8)}#mermaid-svg-s00DO82jbQvVmlVK .milestoneText{font-style:italic}#mermaid-svg-s00DO82jbQvVmlVK .doneCritText0,#mermaid-svg-s00DO82jbQvVmlVK .doneCritText1,#mermaid-svg-s00DO82jbQvVmlVK .doneCritText2,#mermaid-svg-s00DO82jbQvVmlVK .doneCritText3{fill:#000 !important}#mermaid-svg-s00DO82jbQvVmlVK .activeCritText0,#mermaid-svg-s00DO82jbQvVmlVK .activeCritText1,#mermaid-svg-s00DO82jbQvVmlVK .activeCritText2,#mermaid-svg-s00DO82jbQvVmlVK .activeCritText3{fill:#000 !important}#mermaid-svg-s00DO82jbQvVmlVK .titleText{text-anchor:middle;font-size:18px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK g.classGroup text{fill:#9370db;stroke:none;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family);font-size:10px}#mermaid-svg-s00DO82jbQvVmlVK g.classGroup text .title{font-weight:bolder}#mermaid-svg-s00DO82jbQvVmlVK g.clickable{cursor:pointer}#mermaid-svg-s00DO82jbQvVmlVK g.classGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-s00DO82jbQvVmlVK g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK .classLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.5}#mermaid-svg-s00DO82jbQvVmlVK .classLabel .label{fill:#9370db;font-size:10px}#mermaid-svg-s00DO82jbQvVmlVK .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-s00DO82jbQvVmlVK .dashed-line{stroke-dasharray:3}#mermaid-svg-s00DO82jbQvVmlVK #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK #compositionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK #aggregationStart{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK #aggregationEnd{fill:#ECECFF;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK #dependencyStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK #dependencyEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK #extensionEnd{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK .commit-id,#mermaid-svg-s00DO82jbQvVmlVK .commit-msg,#mermaid-svg-s00DO82jbQvVmlVK .branch-label{fill:lightgrey;color:lightgrey;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .pieTitleText{text-anchor:middle;font-size:25px;fill:#000;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .slice{font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK g.stateGroup text{fill:#9370db;stroke:none;font-size:10px;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK g.stateGroup text{fill:#9370db;fill:#333;stroke:none;font-size:10px}#mermaid-svg-s00DO82jbQvVmlVK g.statediagram-cluster .cluster-label text{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK g.stateGroup .state-title{font-weight:bolder;fill:#000}#mermaid-svg-s00DO82jbQvVmlVK g.stateGroup rect{fill:#ECECFF;stroke:#9370db}#mermaid-svg-s00DO82jbQvVmlVK g.stateGroup line{stroke:#9370db;stroke-width:1}#mermaid-svg-s00DO82jbQvVmlVK .transition{stroke:#9370db;stroke-width:1;fill:none}#mermaid-svg-s00DO82jbQvVmlVK .stateGroup .composit{fill:white;border-bottom:1px}#mermaid-svg-s00DO82jbQvVmlVK .stateGroup .alt-composit{fill:#e0e0e0;border-bottom:1px}#mermaid-svg-s00DO82jbQvVmlVK .state-note{stroke:#aa3;fill:#fff5ad}#mermaid-svg-s00DO82jbQvVmlVK .state-note text{fill:black;stroke:none;font-size:10px}#mermaid-svg-s00DO82jbQvVmlVK .stateLabel .box{stroke:none;stroke-width:0;fill:#ECECFF;opacity:0.7}#mermaid-svg-s00DO82jbQvVmlVK .edgeLabel text{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .stateLabel text{fill:#000;font-size:10px;font-weight:bold;font-family:'trebuchet ms', verdana, arial;font-family:var(--mermaid-font-family)}#mermaid-svg-s00DO82jbQvVmlVK .node circle.state-start{fill:black;stroke:black}#mermaid-svg-s00DO82jbQvVmlVK .node circle.state-end{fill:black;stroke:white;stroke-width:1.5}#mermaid-svg-s00DO82jbQvVmlVK #statediagram-barbEnd{fill:#9370db}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-cluster rect{fill:#ECECFF;stroke:#9370db;stroke-width:1px}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-cluster rect.outer{rx:5px;ry:5px}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-state .divider{stroke:#9370db}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-state .title-state{rx:5px;ry:5px}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-cluster.statediagram-cluster .inner{fill:white}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-cluster.statediagram-cluster-alt .inner{fill:#e0e0e0}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-cluster .inner{rx:0;ry:0}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-state rect.basic{rx:5px;ry:5px}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-state rect.divider{stroke-dasharray:10,10;fill:#efefef}#mermaid-svg-s00DO82jbQvVmlVK .note-edge{stroke-dasharray:5}#mermaid-svg-s00DO82jbQvVmlVK .statediagram-note rect{fill:#fff5ad;stroke:#aa3;stroke-width:1px;rx:0;ry:0}:root{--mermaid-font-family: '"trebuchet ms", verdana, arial';--mermaid-font-family: "Comic Sans MS", "Comic Sans", cursive}#mermaid-svg-s00DO82jbQvVmlVK .error-icon{fill:#522}#mermaid-svg-s00DO82jbQvVmlVK .error-text{fill:#522;stroke:#522}#mermaid-svg-s00DO82jbQvVmlVK .edge-thickness-normal{stroke-width:2px}#mermaid-svg-s00DO82jbQvVmlVK .edge-thickness-thick{stroke-width:3.5px}#mermaid-svg-s00DO82jbQvVmlVK .edge-pattern-solid{stroke-dasharray:0}#mermaid-svg-s00DO82jbQvVmlVK .edge-pattern-dashed{stroke-dasharray:3}#mermaid-svg-s00DO82jbQvVmlVK .edge-pattern-dotted{stroke-dasharray:2}#mermaid-svg-s00DO82jbQvVmlVK .marker{fill:#333}#mermaid-svg-s00DO82jbQvVmlVK .marker.cross{stroke:#333} :root { --mermaid-font-family: "trebuchet ms", verdana, arial;}</style> <style>#mermaid-svg-s00DO82jbQvVmlVK { color: rgba(0, 0, 0, 0.75); font: ; }</style>

<p>common_parameters</p>
<p>/items/</p>
<p>/users/</p>
<blockquote>
<p>通过这个入门可以快速学习到如何使用依赖注入，我们可以得出一个结论：在使用依赖注入时，我们不需要做其他的事情，只需要将依赖项定义好，并告诉fastapi哪些路径方法需要使用这个依赖项，其他的都交给fastapi就好，当请求进来后，fastapi会负责将依赖项注入到方法中。</p>
</blockquote>
<h2 id="Fastapi兼容性"><a href="#Fastapi兼容性" class="headerlink" title="Fastapi兼容性"></a>Fastapi兼容性</h2><p>依赖注入的简单性使得fastapi具备了更好的兼容性，通过依赖注入fastapi可以兼容：</p>
<ul>
<li>所有关系数据库</li>
<li>NoSQL数据库</li>
<li>外部包装</li>
<li>外部API</li>
<li>认证和授权系统</li>
<li>API使用情况监控系统</li>
<li>响应数据注入系统</li>
<li>等等</li>
</ul>
<h2 id="用类做依赖项"><a href="#用类做依赖项" class="headerlink" title="用类做依赖项"></a>用类做依赖项</h2><p>在上面的快速入门中，我们学习了如何用方法来做依赖项，我们也提到了，<code>Depends</code>需要接收一个可调用对象作为参数，那么也就是说，<strong>依赖项必须是可调用对象</strong>。下面我们尝试用<code>类</code>来做依赖项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_items_db = [&#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonQueryParams</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span></span><br><span class="line">        self.q = q</span><br><span class="line">        self.skip = skip</span><br><span class="line">        self.limit = limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">commons: CommonQueryParams = Depends(<span class="params">CommonQueryParams</span>)</span>):</span></span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> commons.q:</span><br><span class="line">        response.update(&#123;<span class="string">&quot;q&quot;</span>: commons.q&#125;)</span><br><span class="line">    items = fake_items_db[commons.skip : commons.skip + commons.limit]</span><br><span class="line">    response.update(&#123;<span class="string">&quot;items&quot;</span>: items&#125;)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>注意看<code>CommonQueryParams</code>类的<code>__init__</code>方法，他接收的参数和上面的<code>common_parameters</code>方法是一样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span></span><br></pre></td></tr></table></figure>

<p>然后我们告诉fastapi接口的依赖项是<code>CommonQueryParams</code>类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">commons: CommonQueryParams = Depends(<span class="params">CommonQueryParams</span>)</span>):</span></span><br></pre></td></tr></table></figure>

<p>当请求进来后，fastapi会调用<code>CommonQueryParams</code>类，并创建一个实例，将这个实例赋值给<code>commons</code>参数。</p>
<h4 id="depends简化写法"><a href="#depends简化写法" class="headerlink" title="depends简化写法"></a>depends简化写法</h4><p>在上面的例子中，我们注意到<code>CommonQueryParams</code>写了两遍:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">commons: CommonQueryParams = Depends(CommonQueryParams)</span><br></pre></td></tr></table></figure>

<p>其实，第一个CommonQueryParams并没有什么特殊含义，fastapi也不会用它来做数据验证，而第二个CommonQueryParams才是fastapi会用到的依赖项，因此，我们可以简化成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">commons=Depends(CommonQueryParams)</span><br></pre></td></tr></table></figure>

<p>此时的代码就变成了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">fake_items_db = [&#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonQueryParams</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span></span><br><span class="line">        self.q = q</span><br><span class="line">        self.skip = skip</span><br><span class="line">        self.limit = limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">commons=Depends(<span class="params">CommonQueryParams</span>)</span>):</span></span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> commons.q:</span><br><span class="line">        response.update(&#123;<span class="string">&quot;q&quot;</span>: commons.q&#125;)</span><br><span class="line">    items = fake_items_db[commons.skip: commons.skip + commons.limit]</span><br><span class="line">    response.update(&#123;<span class="string">&quot;items&quot;</span>: items&#125;)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>但是，fastapi也鼓励我们用<code>commons: CommonQueryParams = Depends(CommonQueryParams)</code>这样的形式来声明参数类型，这样写我们的编译器可以知道这个参数的类型，从而帮助我们进行代码补全或检查:<br><img src="https://img-blog.csdnimg.cn/20200918155513716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Lhbcx4iH-1600415650024)(evernotecid://FBE381A3-17C7-41D9-AA37-9C5F29FAB396/appyinxiangcom/20545635/ENResource/p229)]"></p>
<p>那么如何同时具备这两个特点呢，我们可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">commons: CommonQueryParams = Depends()</span><br></pre></td></tr></table></figure>

<p>此时的代码变成了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">fake_items_db = [&#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonQueryParams</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span></span><br><span class="line">        self.q = q</span><br><span class="line">        self.skip = skip</span><br><span class="line">        self.limit = limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">commons: CommonQueryParams = Depends(<span class="params"></span>)</span>):</span></span><br><span class="line">    response = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> commons.q:</span><br><span class="line">        response.update(&#123;<span class="string">&quot;q&quot;</span>: commons.q&#125;)</span><br><span class="line">    items = fake_items_db[commons.skip: commons.skip + commons.limit]</span><br><span class="line">    response.update(&#123;<span class="string">&quot;items&quot;</span>: items&#125;)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述栗子均放到git上啦，地址：<a href="https://github.com/ChuXiaoYi/fastapi">戳这里</a></p>
</blockquote>
]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>python fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>py3.7标准库-functools</title>
    <url>/2018/09/06/py3.7%E6%A0%87%E5%87%86%E5%BA%93-functools/</url>
    <content><![CDATA[<p>参考文档：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/27643991">https://zhuanlan.zhihu.com/p/27643991</a></li>
<li><a href="https://docs.python.org/3.7/library/functools.html#functools.lru_cache">https://docs.python.org/3.7/library/functools.html#functools.lru_cache</a></li>
<li><a href="https://segmentfault.com/a/1190000009398663">https://segmentfault.com/a/1190000009398663</a></li>
</ul>
<h3 id="functools-cmp-to-key-func"><a href="#functools-cmp-to-key-func" class="headerlink" title="functools.cmp_to_key(func)"></a><strong>functools.cmp_to_key(func)</strong></h3><span id="more"></span>

<p>将旧式比较函数转换为关键字函数。与接受字关键函数(如sort()、min()、max()、heapq. nbiggest()、heapq.nsmallest()、itertools.groupby())的工具一起使用。该函数主要用于从Python 2转换过来的程序的转换工具，Python 2支持使用比较函数。</p>
<p>比较函数是任何可调用的函数，它接受两个参数，进行比较，然后返回负数(小于)、零(相等)或正数(大于)。键函数是一个可调用函数，它接受一个参数并返回另一个值作为排序键。</p>
<p>放上一波源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">### cmp_to_key() function converter</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp_to_key</span>(<span class="params">mycmp</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convert a cmp= function into a key= function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">K</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        __slots__ = [<span class="string">&#x27;obj&#x27;</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">            self.obj = obj</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &lt; <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &gt; <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) == <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__le__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &lt;= <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &gt;= <span class="number">0</span></span><br><span class="line">        __hash__ = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> K</span><br></pre></td></tr></table></figure>

<p>写一个demo，看一下运行流程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;MyObject(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(self.val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_obj</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Old-style comparison function.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;comparing &#123;&#125; and &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="keyword">if</span> a.val &lt; b.val:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a.val &gt; b.val:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序的key</span></span><br><span class="line">get_key = functools.cmp_to_key(compare_obj)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key_wrapper</span>(<span class="params">o</span>):</span></span><br><span class="line">    <span class="string">&quot;Wrapper function for get_key to allow for print statements.&quot;</span></span><br><span class="line">    new_key = get_key(o)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;key_wrapper(&#123;&#125;) -&gt; &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(o, new_key))</span><br><span class="line">    <span class="keyword">return</span> new_key</span><br><span class="line"></span><br><span class="line">objs = [MyObject(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">0</span>, -<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">sorted</span>(objs, key=get_key_wrapper):</span><br><span class="line">    <span class="built_in">print</span>(o)</span><br></pre></td></tr></table></figure>

<p>通常情况下，<code>cmp_to_key()</code> 将直接使用，但在本例中引入了一个额外的包装函数，以在调用关键函数时输出更多信息。<br>输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key_wrapper(MyObject(5)) -&gt; &lt;functools.KeyWrapper object at 0x10692e510&gt;</span><br><span class="line">key_wrapper(MyObject(4)) -&gt; &lt;functools.KeyWrapper object at 0x10692e4f0&gt;</span><br><span class="line">key_wrapper(MyObject(3)) -&gt; &lt;functools.KeyWrapper object at 0x10692e4d0&gt;</span><br><span class="line">key_wrapper(MyObject(2)) -&gt; &lt;functools.KeyWrapper object at 0x10692e470&gt;</span><br><span class="line">key_wrapper(MyObject(1)) -&gt; &lt;functools.KeyWrapper object at 0x10692e490&gt;</span><br><span class="line">comparing MyObject(4) and MyObject(5)</span><br><span class="line">comparing MyObject(3) and MyObject(4)</span><br><span class="line">comparing MyObject(2) and MyObject(3)</span><br><span class="line">comparing MyObject(1) and MyObject(2)</span><br><span class="line">MyObject(1)</span><br><span class="line">MyObject(2)</span><br><span class="line">MyObject(3)</span><br><span class="line">MyObject(4)</span><br><span class="line">MyObject(5)</span><br></pre></td></tr></table></figure>

<h3 id="functools-lru-cache-maxsize-128-typed-False"><a href="#functools-lru-cache-maxsize-128-typed-False" class="headerlink" title="@functools.lru_cache(maxsize=128, typed=False)"></a><strong>@functools.lru_cache(maxsize=128, typed=False)</strong></h3><p>这个装饰器实现了备忘的功能，是一项优化技术，把耗时的函数的结果保存起来，避免传入相同的参数时重复计算。lru 是（least recently used）的缩写，即最近最少使用原则。表明缓存不会无限制增长，一段时间不用的缓存条目会被扔掉。<br>这个装饰器支持传入参数，还能有这种操作的？maxsize 是保存最近多少个调用的结果，最好设置为 2 的倍数，默认为 128。如果设置为 None 的话就相当于是 maxsize 为正无穷了。还有一个参数是 type，如果 type 设置为 true，即把不同参数类型得到的结果分开保存，如 f(3) 和 f(3.0) 会被区分开。</p>
<p>由于字典用于缓存结果，因此函数的位置和关键字参数必须是hashable的。</p>
<p>如果maxsize设置为None，则禁用LRU特性，缓存可以无限制增长。当maxsize为2次方时，LRU特性表现最佳。</p>
<p>如果将类型设置为true，则将分别缓存不同类型的函数参数。例如，f(3)和f(3.0)将被视为具有不同结果的不同调用。</p>
<p>为了帮助度量缓存的有效性并调优maxsize参数，封装的函数使用cache_info()函数进行检测，该函数返回一个命名元组，显示hits(命中), misses(未命中)、maxsize和currsize。在多线程环境中，得失是近似的。</p>
<p>decorator还提供了一个cache_clear()函数，用于清除或使缓存失效。</p>
<p>原始的底层函数可以通过<strong>wrapped</strong>属性访问。这对于内省、绕过缓存或使用不同的缓存重新包装函数非常有用。</p>
<p>写了个函数追踪结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">track</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args</span>):</span></span><br><span class="line">        result = func(*args)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; --&gt; (&#123;&#125;) --&gt; &#123;&#125; &quot;</span>.<span class="built_in">format</span>(func.__name__, args[<span class="number">0</span>], result))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>

<p>递归函数适合使用这个装饰器，那就拿经典的斐波那契数列来测试吧</p>
<p>不使用缓存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@track</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">2</span>) + fib(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>使用缓存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@functools.lru_cache()</span></span><br><span class="line"><span class="meta">@track</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_with_cache</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib_with_cache(n - <span class="number">2</span>) + fib_with_cache(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fib(10)</span><br><span class="line"></span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (3) --&gt; 2 </span><br><span class="line">fib --&gt; (4) --&gt; 3 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (3) --&gt; 2 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (3) --&gt; 2 </span><br><span class="line">fib --&gt; (4) --&gt; 3 </span><br><span class="line">fib --&gt; (5) --&gt; 5 </span><br><span class="line">fib --&gt; (6) --&gt; 8 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (3) --&gt; 2 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">fib --&gt; (1) --&gt; 1 </span><br><span class="line">fib --&gt; (2) --&gt; 1 </span><br><span class="line">fib --&gt; (3) --&gt; 2 </span><br><span class="line">fib --&gt; (4) --&gt; 3 </span><br><span class="line">fib --&gt; (5) --&gt; 5 </span><br><span class="line">fib --&gt; (0) --&gt; 0 </span><br><span class="line">····省略····</span><br><span class="line"></span><br><span class="line">时间花费：0:00:00.001295</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fib_with_cache(10)</span><br><span class="line"></span><br><span class="line">fib_with_cache --&gt; (0) --&gt; 0 </span><br><span class="line">fib_with_cache --&gt; (1) --&gt; 1 </span><br><span class="line">fib_with_cache --&gt; (2) --&gt; 1 </span><br><span class="line">fib_with_cache --&gt; (3) --&gt; 2 </span><br><span class="line">fib_with_cache --&gt; (4) --&gt; 3 </span><br><span class="line">fib_with_cache --&gt; (5) --&gt; 5 </span><br><span class="line">fib_with_cache --&gt; (6) --&gt; 8 </span><br><span class="line">fib_with_cache --&gt; (7) --&gt; 13 </span><br><span class="line">fib_with_cache --&gt; (8) --&gt; 21 </span><br><span class="line">fib_with_cache --&gt; (9) --&gt; 34 </span><br><span class="line">fib_with_cache --&gt; (10) --&gt; 55 </span><br><span class="line">时间花费：0:00:00.000117</span><br></pre></td></tr></table></figure>

<p>可以很明显的看到，使用缓存的时候，只调用了 11 次就得出了结果，并且花费时间只为 0.000117 秒</p>
<p>我们再把数字调大，传入的参数改为 31</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fib(31)</span><br><span class="line"></span><br><span class="line">时间花费：0:00:41.323180</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fib_with_cache(31)</span><br><span class="line"></span><br><span class="line">时间花费：0:00:00.000282</span><br></pre></td></tr></table></figure>

<p>时间相差居然如此之多！</p>
<p>这个装饰器还提供 cache_clear() 用于清理缓存，以及 cache_info() 用于查看缓存信息<br>官方还提供了另外一个例子，用于缓存静态网页的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@lru_cache(<span class="params">maxsize=<span class="number">32</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pep</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">&#x27;Retrieve text of a Python Enhancement Proposal&#x27;</span></span><br><span class="line">    resource = <span class="string">&#x27;http://www.python.org/dev/peps/pep-%04d/&#x27;</span> % num</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> urllib.request.urlopen(resource) <span class="keyword">as</span> s:</span><br><span class="line">            <span class="keyword">return</span> s.read()</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Not Found&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="functools-total-ordering"><a href="#functools-total-ordering" class="headerlink" title="@functools.total_ordering"></a><strong>@functools.total_ordering</strong></h3><p>给定一个类定义一个或多个丰富的比较排序方法，这个类装饰器提供其余的方法。这简化了指定所有可能的丰富比较操作所涉及的工作:</p>
<p>如果你已经定义了 <strong>eq</strong> 方法，以及 <strong>lt</strong>、<strong>le</strong>、<strong>gt</strong> 或者 <strong>ge</strong>() 其中之一， 即可自动生成其它比较方法。</p>
<p>上一波源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_convert = &#123;</span><br><span class="line">    <span class="string">&#x27;__lt__&#x27;</span>: [(<span class="string">&#x27;__gt__&#x27;</span>, _gt_from_lt),</span><br><span class="line">               (<span class="string">&#x27;__le__&#x27;</span>, _le_from_lt),</span><br><span class="line">               (<span class="string">&#x27;__ge__&#x27;</span>, _ge_from_lt)],</span><br><span class="line">    <span class="string">&#x27;__le__&#x27;</span>: [(<span class="string">&#x27;__ge__&#x27;</span>, _ge_from_le),</span><br><span class="line">               (<span class="string">&#x27;__lt__&#x27;</span>, _lt_from_le),</span><br><span class="line">               (<span class="string">&#x27;__gt__&#x27;</span>, _gt_from_le)],</span><br><span class="line">    <span class="string">&#x27;__gt__&#x27;</span>: [(<span class="string">&#x27;__lt__&#x27;</span>, _lt_from_gt),</span><br><span class="line">               (<span class="string">&#x27;__ge__&#x27;</span>, _ge_from_gt),</span><br><span class="line">               (<span class="string">&#x27;__le__&#x27;</span>, _le_from_gt)],</span><br><span class="line">    <span class="string">&#x27;__ge__&#x27;</span>: [(<span class="string">&#x27;__le__&#x27;</span>, _le_from_ge),</span><br><span class="line">               (<span class="string">&#x27;__gt__&#x27;</span>, _gt_from_ge),</span><br><span class="line">               (<span class="string">&#x27;__lt__&#x27;</span>, _lt_from_ge)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total_ordering</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Class decorator that fills in missing ordering methods&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Find user-defined comparisons (not those inherited from object).</span></span><br><span class="line">    roots = &#123;op <span class="keyword">for</span> op <span class="keyword">in</span> _convert <span class="keyword">if</span> <span class="built_in">getattr</span>(cls, op, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(<span class="built_in">object</span>, op, <span class="literal">None</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> roots:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;must define at least one ordering operation: &lt; &gt; &lt;= &gt;=&#x27;</span>)</span><br><span class="line">    root = <span class="built_in">max</span>(roots)       <span class="comment"># prefer __lt__ to __le__ to __gt__ to __ge__</span></span><br><span class="line">    <span class="keyword">for</span> opname, opfunc <span class="keyword">in</span> _convert[root]:</span><br><span class="line">        <span class="keyword">if</span> opname <span class="keyword">not</span> <span class="keyword">in</span> roots:</span><br><span class="line">            opfunc.__name__ = opname</span><br><span class="line">            <span class="built_in">setattr</span>(cls, opname, opfunc)</span><br><span class="line">    <span class="keyword">return</span> cls</span><br></pre></td></tr></table></figure>

<p>来一个demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> total_ordering</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@total_ordering</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Door</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.value = <span class="number">0</span></span><br><span class="line">        self.first_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.last_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=== my eq===&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (self.first_name, self.last_name) == (other.first_name, other.last_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=== my total_ordering===&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (self.first_name, self.last_name) &gt; (other.first_name, other.last_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Door()</span><br><span class="line">b = Door()</span><br><span class="line"></span><br><span class="line">a.first_name = <span class="string">&#x27;ouyang&#x27;</span></span><br><span class="line">a.last_name = <span class="string">&#x27;guoge&#x27;</span></span><br><span class="line"></span><br><span class="line">b.first_name = <span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line">b.last_name = <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b)</span><br><span class="line"><span class="built_in">print</span>(a &gt; b)</span><br><span class="line"><span class="built_in">print</span>(a &lt; b)</span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)</span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)</span><br></pre></td></tr></table></figure>

<p>结果输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=== my eq===</span><br><span class="line">False</span><br><span class="line">=== my total_ordering===</span><br><span class="line">True</span><br><span class="line">=== my total_ordering===</span><br><span class="line">False</span><br><span class="line">=== my total_ordering===</span><br><span class="line">False</span><br><span class="line">=== my total_ordering===</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="functools-partial-func-args-keywords"><a href="#functools-partial-func-args-keywords" class="headerlink" title="functools.partial(func, *args, **keywords)"></a><strong>functools.partial(func, *args, **keywords)</strong></h3><p>该方法返回一个新的局部对象，当被调用时，它的行为将像函数调用一样，带有位置参数args和关键字参数关键字。如果向调用提供了更多的参数，它们将被附加到args中。如果提供了额外的关键字参数，它们将扩展并覆盖关键字。大致相当于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span>(<span class="params">func, *args, **keywords</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span>(<span class="params">*fargs, **fkeywords</span>):</span></span><br><span class="line">        newkeywords = keywords.copy()</span><br><span class="line">        newkeywords.update(fkeywords)</span><br><span class="line">        <span class="keyword">return</span> func(*args, *fargs, **newkeywords)</span><br><span class="line">    newfunc.func = func</span><br><span class="line">    newfunc.args = args</span><br><span class="line">    newfunc.keywords = keywords</span><br><span class="line">    <span class="keyword">return</span> newfunc</span><br></pre></td></tr></table></figure>

<p>partial()用于部分函数应用程序，该应用程序“冻结”函数参数和/或关键字的一部分，从而生成一个带有简化签名的新对象。例如，可以使用partial()创建一个可调用的函数，其行为类似于int()函数，其中基参数默认为2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo = partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo.__doc__ = <span class="string">&#x27;Convert base 2 string to an int.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo(<span class="string">&#x27;10010&#x27;</span>)</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>上一波源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">### partial() argument application</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Purely functional, no descriptor behaviour</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">partial</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;New function with partial application of the given arguments</span></span><br><span class="line"><span class="string">    and keywords.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __slots__ = <span class="string">&quot;func&quot;</span>, <span class="string">&quot;args&quot;</span>, <span class="string">&quot;keywords&quot;</span>, <span class="string">&quot;__dict__&quot;</span>, <span class="string">&quot;__weakref__&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">*args, **keywords</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;descriptor &#x27;__new__&#x27; of partial needs an argument&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;type &#x27;partial&#x27; takes at least one argument&quot;</span>)</span><br><span class="line">        cls, func, *args = args</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(func):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;the first argument must be callable&quot;</span>)</span><br><span class="line">        args = <span class="built_in">tuple</span>(args)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(func, <span class="string">&quot;func&quot;</span>):</span><br><span class="line">            args = func.args + args</span><br><span class="line">            tmpkw = func.keywords.copy()</span><br><span class="line">            tmpkw.update(keywords)</span><br><span class="line">            keywords = tmpkw</span><br><span class="line">            <span class="keyword">del</span> tmpkw</span><br><span class="line">            func = func.func</span><br><span class="line"></span><br><span class="line">        self = <span class="built_in">super</span>(partial, cls).__new__(cls)</span><br><span class="line"></span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line">        self.keywords = keywords</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">*args, **keywords</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;descriptor &#x27;__call__&#x27; of partial needs an argument&quot;</span>)</span><br><span class="line">        self, *args = args</span><br><span class="line">        newkeywords = self.keywords.copy()</span><br><span class="line">        newkeywords.update(keywords)</span><br><span class="line">        <span class="keyword">return</span> self.func(*self.args, *args, **newkeywords)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @recursive_repr()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        qualname = <span class="built_in">type</span>(self).__qualname__</span><br><span class="line">        args = [<span class="built_in">repr</span>(self.func)]</span><br><span class="line">        args.extend(<span class="built_in">repr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> self.args)</span><br><span class="line">        args.extend(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>=<span class="subst">&#123;v!r&#125;</span>&quot;</span> <span class="keyword">for</span> (k, v) <span class="keyword">in</span> self.keywords.items())</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(self).__module__ == <span class="string">&quot;functools&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;functools.<span class="subst">&#123;qualname&#125;</span>(<span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(args)&#125;</span>)&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;qualname&#125;</span>(<span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(args)&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(self), (self.func,), (self.func, self.args,</span><br><span class="line">               self.keywords <span class="keyword">or</span> <span class="literal">None</span>, self.__dict__ <span class="keyword">or</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setstate__</span>(<span class="params">self, state</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(state, <span class="built_in">tuple</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;argument to __setstate__ must be a tuple&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(state) != <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">f&quot;expected 4 items in state, got <span class="subst">&#123;<span class="built_in">len</span>(state)&#125;</span>&quot;</span>)</span><br><span class="line">        func, args, kwds, namespace = state</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> <span class="built_in">callable</span>(func) <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(args, <span class="built_in">tuple</span>) <span class="keyword">or</span></span><br><span class="line">           (kwds <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(kwds, <span class="built_in">dict</span>)) <span class="keyword">or</span></span><br><span class="line">           (namespace <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(namespace, <span class="built_in">dict</span>))):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;invalid partial state&quot;</span>)</span><br><span class="line"></span><br><span class="line">        args = <span class="built_in">tuple</span>(args) <span class="comment"># just in case it&#x27;s a subclass</span></span><br><span class="line">        <span class="keyword">if</span> kwds <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            kwds = &#123;&#125;</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(kwds) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">dict</span>: <span class="comment"># XXX does it need to be *exactly* dict?</span></span><br><span class="line">            kwds = <span class="built_in">dict</span>(kwds)</span><br><span class="line">        <span class="keyword">if</span> namespace <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            namespace = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        self.__dict__ = namespace</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line">        self.keywords = kwds</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> _functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>通过下面这个简单的demo，会更一目了然：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">add_y = partial(add, <span class="number">3</span>)  <span class="comment"># add_y 是一个函数</span></span><br><span class="line">add_y(<span class="number">4</span>)                 <span class="comment"># 结果是 7</span></span><br></pre></td></tr></table></figure>

<h3 id="functools-partialmethod-func-args-keywords"><a href="#functools-partialmethod-func-args-keywords" class="headerlink" title="*functools.partialmethod(func, *args, **keywords) *"></a><em>*functools.partialmethod(func, *args, **keywords) *</em></h3><p>返回一个新的partialmethod描述符，它的行为类似于partial，只是它被设计为作为方法定义使用，而不是直接调用。</p>
<p>func必须是描述符或可调用对象(与普通函数一样，这两种对象都作为描述符处理)。</p>
<p>当func是一个描述符(例如正常的Python函数、classmethod()、staticmethod()、abstractmethod()或partialmethod的另一个实例)时，对<strong>get</strong><br>的调用被委托给底层描述符，结果返回一个适当的部分对象。</p>
<p>当func是非描述符可调用时，会动态创建一个合适的绑定方法。当作为方法使用时，这就像一个普通的Python函数:self参数将作为第一个位置参数插入，甚至在提供给partialmethod构造函数的args和关键字之前。</p>
<p>举个栗子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Cell(object):</span><br><span class="line">...     def __init__(self):</span><br><span class="line">...         self._alive = False</span><br><span class="line">...     @property</span><br><span class="line">...     def alive(self):</span><br><span class="line">...         return self._alive</span><br><span class="line">...     def set_state(self, state):</span><br><span class="line">...         self._alive = bool(state)</span><br><span class="line">...     set_alive = partialmethod(set_state, True)</span><br><span class="line">...     set_dead = partialmethod(set_state, False)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; c = Cell()</span><br><span class="line">&gt;&gt;&gt; c.alive</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; c.set_alive()</span><br><span class="line">&gt;&gt;&gt; c.alive</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="functools-reduce-function-iterable-initializer"><a href="#functools-reduce-function-iterable-initializer" class="headerlink" title="functools.reduce(function, iterable[, initializer])"></a><strong>functools.reduce(function, iterable[, initializer])</strong></h3><p>将两个参数的函数累加到序列的项上，从左到右，使序列减少到一个值。例如,<code>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</code>计算<code>((((1 + 2)+(3)+ 4)+ 5)</code>。左边的参数x是累计值，右边的参数y是序列的更新值。如果存在可选初始化器，则该初始化器将放置在计算中序列项的前面，并在序列为空时充当缺省值。如果初始值设定项未给定，且序列仅包含一个项，则返回第一个项。</p>
<p>相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce</span>(<span class="params">function, iterable, initializer=<span class="literal">None</span></span>):</span></span><br><span class="line">    it = <span class="built_in">iter</span>(iterable)</span><br><span class="line">    <span class="keyword">if</span> initializer <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value = <span class="built_in">next</span>(it)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = initializer</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">        value = function(value, element)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>

<h3 id="functools-singledispatch"><a href="#functools-singledispatch" class="headerlink" title="@functools.singledispatch"></a><strong>@functools.singledispatch</strong></h3><p>使用过别的面向对象语言，如 java 等，肯定熟悉各种方法的重载，但是对于 Python 来说是不支持方法的重载的，不过其为我们提供了一个装饰器，能将普通函数变为泛函数（generic function）</p>
<p>比如你要针对不同类型的数据进行不同的处理，而又不想将它们写到一起，那就可以使用@singledispatch 装饰器了</p>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.singledispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typecheck</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck.register(<span class="params"><span class="built_in">str</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(text))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;str--&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck.register(<span class="params"><span class="built_in">list</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(text))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;list--&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck.register(<span class="params"><span class="built_in">int</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(text))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;int--&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    typecheck(a)</span><br></pre></td></tr></table></figure>

<p>看一下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br><span class="line">list--</span><br></pre></td></tr></table></figure>

<p>换几个值试一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br><span class="line">int--</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &quot;aaaa&quot;</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">str--</span><br></pre></td></tr></table></figure>

<p>singledispatch机制一个显著特征是，可以在系统的任何地方和任何模块中注册专门的函数，如果后来模块中增加了新的类型，可以轻松地添加一个新的专门函数来处理新类型。很像设计模式中的策略模式</p>
<h3 id="functools-update-wrapper-wrapper-wrapped-assigned-WRAPPER-ASSIGNMENTS-updated-WRAPPER-UPDATES"><a href="#functools-update-wrapper-wrapper-wrapped-assigned-WRAPPER-ASSIGNMENTS-updated-WRAPPER-UPDATES" class="headerlink" title="functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"></a><strong>functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</strong></h3><p>这个函数就是用来更新修饰器函数的，具体更新些什么呢，我们可以直接把它的源码搬过来看一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WRAPPER_ASSIGNMENTS = (<span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;__annotations__&#x27;</span>)</span><br><span class="line">WRAPPER_UPDATES = (<span class="string">&#x27;__dict__&#x27;</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_wrapper</span>(<span class="params">wrapper,</span></span></span><br><span class="line"><span class="params"><span class="function">                   wrapped,</span></span></span><br><span class="line"><span class="params"><span class="function">                   assigned = WRAPPER_ASSIGNMENTS,</span></span></span><br><span class="line"><span class="params"><span class="function">                   updated = WRAPPER_UPDATES</span>):</span></span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> assigned:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = <span class="built_in">getattr</span>(wrapped, attr)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(wrapper, attr, value)</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> updated:</span><br><span class="line">        <span class="built_in">getattr</span>(wrapper, attr).update(<span class="built_in">getattr</span>(wrapped, attr, &#123;&#125;))</span><br><span class="line">    wrapper.__wrapped__ = wrapped</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>大家可以发现，这个函数的作用就是从 被修饰的函数(wrapped) 中取出一些属性值来，赋值给 修饰器函数(wrapper) 。为什么要这么做呢，我们看下面这个例子。</p>
<p>首先我们写个自定义的修饰器，没有任何的功能，仅有文档字符串，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;这个是修饰函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个是被修饰的函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrapped&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wrapped.__doc__)  <span class="comment"># 输出`这个是修饰函数`</span></span><br><span class="line"><span class="built_in">print</span>(wrapped.__name__)  <span class="comment"># 输出`wrapper_function`</span></span><br></pre></td></tr></table></figure>

<p>从上面的例子我们可以看到，我想要获取<code>wrapped</code>这个被修饰函数的文档字符串，但是却获取成了<code>wrapper_function</code>的文档字符串，<code>wrapped</code>函数的名字也变成了<code>wrapper_function</code>函数的名字。这是因为给<code>wrapped</code>添加上<code>@wrapper</code>修饰器相当于执行了一句<code>wrapped = wrapper(wrapped)</code>，执行完这条语句之后，<code>wrapped</code>函数就变成了<code>wrapper_function</code>函数。遇到这种情况该怎么办呢，首先我们可以手动地在<code>wrapper</code>函数中更改<code>wrapper_function</code>的<code>__doc__</code>和<code>__name__</code>属性，但聪明的你肯定也想到了，我们可以直接用<code>update_wrapper</code>函数来实现这个功能。</p>
<p>我们对上面定义的修饰器稍作修改，添加了一句update_wrapper(wrapper_function, f)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> update_wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;这个是修饰函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    update_wrapper(wrapper_function, f)  <span class="comment"># &lt;&lt;  添加了这条语句</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个是被修饰的函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrapped&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wrapped.__doc__)  <span class="comment"># 输出`这个是被修饰的函数`</span></span><br><span class="line"><span class="built_in">print</span>(wrapped.__name__)  <span class="comment"># 输出`wrapped`</span></span><br></pre></td></tr></table></figure>

<p>此时我们可以发现，<code>__doc__</code>和<code>__name__</code>属性已经能够按我们预想的那样显示了，除此之外，<code>update_wrapper</code>函数也对<code>__module__</code>和<code>__dict__</code>等属性进行了更改和更新。</p>
<h3 id="functools-wraps-wrapped-assigned-WRAPPER-ASSIGNMENTS-updated-WRAPPER-UPDATES"><a href="#functools-wraps-wrapped-assigned-WRAPPER-ASSIGNMENTS-updated-WRAPPER-UPDATES" class="headerlink" title="@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"></a><strong>@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</strong></h3><p>看一下源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WRAPPER_ASSIGNMENTS = (<span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;__annotations__&#x27;</span>)</span><br><span class="line">WRAPPER_UPDATES = (<span class="string">&#x27;__dict__&#x27;</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wraps</span>(<span class="params">wrapped,</span></span></span><br><span class="line"><span class="params"><span class="function">          assigned = WRAPPER_ASSIGNMENTS,</span></span></span><br><span class="line"><span class="params"><span class="function">          updated = WRAPPER_UPDATES</span>):</span></span><br><span class="line">    <span class="keyword">return</span> partial(update_wrapper, wrapped=wrapped,</span><br><span class="line">                   assigned=assigned, updated=updated)</span><br></pre></td></tr></table></figure>

<p>没错，就是这么的简单，只有这么一句，我们可以看出，wraps函数其实就是一个修饰器版的update_wrapper函数，它的功能和update_wrapper是一模一样的。我们可以修改我们上面的自定义修饰器的例子，做出一个更方便阅读的版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">f</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;这个是修饰函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个是被修饰的函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrapped&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wrapped.__doc__)  <span class="comment"># 输出`这个是被修饰的函数`</span></span><br><span class="line"><span class="built_in">print</span>(wrapped.__name__)  <span class="comment"># 输出`wrapped`</span></span><br></pre></td></tr></table></figure>

<p><code>wraps</code>修饰器，其实就是将**被修饰的函数(wrapped)<strong>的一些属性值赋值给</strong>修饰器函数(wrapper)**，最终让属性的显示更符合我们的直觉。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python3.7标准库 python python3.7标准库 python3.7标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结——python语言实现</title>
    <url>/2019/01/17/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94python%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>参考文档：</p>
<ul>
<li><a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示）</a></li>
<li><a href="https://my.oschina.net/u/3346994/blog/895131">基于python的七种经典排序算法</a></li>
<li><a href="https://github.com/TheAlgorithms/Python">https://github.com/TheAlgorithms/Python</a></li>
<li><a href="https://www.toptal.com/developers/sorting-algorithms">https://www.toptal.com/developers/sorting-algorithms</a></li>
<li><a href="http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/">http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/</a></li>
</ul>
<h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><span id="more"></span>

<h5 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h5><p>十种常见排序算法可以分为两大类：</p>
<blockquote>
<p><strong>非线性时间比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。<br><strong>线性时间非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190117132029221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度<img src="https://img-blog.csdnimg.cn/20190117132104136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE1NjQ4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h5><h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><blockquote>
<p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。<br><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。<br><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。<br><strong>空间复杂度</strong>：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</p>
</blockquote>
<h3 id="冒泡排序（Bubble-sort）"><a href="#冒泡排序（Bubble-sort）" class="headerlink" title="冒泡排序（Bubble sort）"></a>冒泡排序（Bubble sort）</h3><p>冒泡排序，有时也称为下沉排序，是一种简单的排序算法，它反复遍历要排序的列表，比较每对相邻的项目，如果它们的顺序不满足条件则交换它们。 重复遍历列表，直到不需要交换，这时列表就是已排序的。其核心思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序记录为止。</p>
<h5 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h5><ol>
<li> 比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li> 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；<br> 重复步骤1~3，直到排序完成。</li>
</ol>
<h5 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="http://chuxiaoyi.cn/media/editor/1_20190117131748513004.gif" alt="http://chuxiaoyi.cn/media/editor/1_20190117131748513004.gif"></p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/17 上午10:41</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : bubble_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 冒泡排序，从小到大排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> tool <span class="keyword">import</span> caculate_time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.<span class="built_in">list</span> = li</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">self, li, i, j</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        交换元素，i，j表示下标</span></span><br><span class="line"><span class="string">        :param i:</span></span><br><span class="line"><span class="string">        :param j:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        li[i], li[j] = li[j], li[i]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @caculate_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bubble_sort_simple</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        简单冒泡排序,时间复杂度O(n^2)</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        li = copy.deepcopy(self.<span class="built_in">list</span>)</span><br><span class="line">        length = <span class="built_in">len</span>(li)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length):</span><br><span class="line">                <span class="keyword">if</span> li[i] &gt; li[j]:</span><br><span class="line">                    self.swap(li, i, j)</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"><span class="meta">    @caculate_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        冒泡排序，时间复杂度O(n^2)</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        li = copy.deepcopy(self.<span class="built_in">list</span>)</span><br><span class="line">        length = <span class="built_in">len</span>(li)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span> - i):</span><br><span class="line">                <span class="keyword">if</span> li[j] &gt; li[j + <span class="number">1</span>]:</span><br><span class="line">                    self.swap(li, j, j + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"><span class="meta">    @caculate_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bubble_sort_advance</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        改进后的冒泡排序，时间复杂度O(n^2)</span></span><br><span class="line"><span class="string">        设置一个flag，当某一轮没有发生变化时，证明排序已经有序了</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        li = copy.deepcopy(self.<span class="built_in">list</span>)</span><br><span class="line">        length = <span class="built_in">len</span>(li)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span> - i):</span><br><span class="line">                <span class="keyword">if</span> li[j] &gt; li[j + <span class="number">1</span>]:</span><br><span class="line">                    self.swap(li, j, j + <span class="number">1</span>)</span><br><span class="line">                    flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    li = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">    bs = BubbleSort(li)</span><br><span class="line">    bs.bubble_sort_simple()</span><br><span class="line">    bs.bubble_sort()</span><br><span class="line">    bs.bubble_sort_advance()</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190117132135480.png" alt="在这里插入图片描述"></p>
<h3 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h3><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。选择排序是表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p>
<h5 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h5><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ul>
<li>初始状态：无序区为R[1…n]，有序区为空；</li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1…i-1]和R(i…n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1…i]和R[i+1…n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
<li>n-1趟结束，数组有序化了。</li>
</ul>
<h5 id="动态演示-1"><a href="#动态演示-1" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="http://chuxiaoyi.cn/media/editor/2_20190117140140131569.gif" alt="http://chuxiaoyi.cn/media/editor/2_20190117140140131569.gif"></p>
<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/17 下午1:49</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : select_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 选择排序，从小到大排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="keyword">from</span> util.tool <span class="keyword">import</span> caculate_time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.<span class="built_in">list</span> = li</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        交换元素，i，j表示下标</span></span><br><span class="line"><span class="string">        :param i:</span></span><br><span class="line"><span class="string">        :param j:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">list</span>[i], self.<span class="built_in">list</span>[j] = self.<span class="built_in">list</span>[j], self.<span class="built_in">list</span>[i]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @caculate_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_sort_simple</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        选择排序,时间复杂度O(n^2)</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = <span class="built_in">len</span>(self.<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            min_index = i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, length):</span><br><span class="line">                <span class="keyword">if</span> self.<span class="built_in">list</span>[min_index] &gt; self.<span class="built_in">list</span>[j]:</span><br><span class="line">                    min_index = j</span><br><span class="line">            self.<span class="built_in">list</span>[i], self.<span class="built_in">list</span>[min_index] = self.<span class="built_in">list</span>[min_index], self.<span class="built_in">list</span>[i]</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    li = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">    ss = SelectSort(li)</span><br><span class="line">    ss.select_sort_simple()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190117140406382.png" alt="在这里插入图片描述"></p>
<h3 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h5 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h5><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ol>
<li> 从第一个元素开始，该元素可以认为已经被排序；</li>
<li> 取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li> 如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li> 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；<br> 重复步骤2~5。</li>
</ol>
<h5 id="动态演示-2"><a href="#动态演示-2" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="http://chuxiaoyi.cn/media/editor/4_20190117152003645485.gif" alt="http://chuxiaoyi.cn/media/editor/4_20190117152003645485.gif"></p>
<h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/17 下午2:21</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : insert_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 插入排序，从小到大排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="keyword">from</span> util.tool <span class="keyword">import</span> caculate_time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.<span class="built_in">list</span> = li</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @caculate_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入排序,时间复杂度O(n^2)</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = <span class="built_in">len</span>(self.<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">            pre = i-<span class="number">1</span></span><br><span class="line">            current = self.<span class="built_in">list</span>[i]</span><br><span class="line">            <span class="keyword">while</span> pre &gt;= <span class="number">0</span> <span class="keyword">and</span> current &lt; self.<span class="built_in">list</span>[pre]:</span><br><span class="line">                self.<span class="built_in">list</span>[pre+<span class="number">1</span>] = self.<span class="built_in">list</span>[pre]</span><br><span class="line">                pre -= <span class="number">1</span></span><br><span class="line">            self.<span class="built_in">list</span>[pre+<span class="number">1</span>] = current</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    li = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">    ss = InsertSort(li)</span><br><span class="line">    ss.insert_sort()</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190117152235170.png" alt="在这里插入图片描述"></p>
<h3 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p>
<h5 id="算法描述-3"><a href="#算法描述-3" class="headerlink" title="算法描述"></a>算法描述</h5><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<h5 id="动态演示-3"><a href="#动态演示-3" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="https://images2018.cnblogs.com/blog/849589/201803/849589-20180331170017421-364506073.gif" alt="https://images2018.cnblogs.com/blog/849589/201803/849589-20180331170017421-364506073.gif"></p>
<h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/17 下午3:25</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : shell_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 希尔排序，从小到大排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="keyword">from</span> util.tool <span class="keyword">import</span> caculate_time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.<span class="built_in">list</span> = li</span><br><span class="line"></span><br><span class="line"><span class="meta">    @caculate_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        希尔排序,时间复杂度O(n^(3/2))</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = <span class="built_in">len</span>(self.<span class="built_in">list</span>)</span><br><span class="line">        gap = length</span><br><span class="line">        <span class="keyword">while</span> gap &gt; <span class="number">1</span>:</span><br><span class="line">            gap = <span class="built_in">int</span>(gap/<span class="number">3</span>)+<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, length):</span><br><span class="line">                tmp = self.<span class="built_in">list</span>[i]</span><br><span class="line">                j = i-gap</span><br><span class="line">                <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; self.<span class="built_in">list</span>[j]:</span><br><span class="line">                    self.<span class="built_in">list</span>[j+gap] = self.<span class="built_in">list</span>[j]</span><br><span class="line">                    j = j-gap</span><br><span class="line">                self.<span class="built_in">list</span>[j+gap] = tmp</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    li = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">    ss = ShellSort(li)</span><br><span class="line">    ss.shell_sort()</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190117164732178.png" alt="在这里插入图片描述"></p>
<h3 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p>
<h5 id="算法描述-4"><a href="#算法描述-4" class="headerlink" title="算法描述"></a>算法描述</h5><ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列；</li>
<li>对这两个子序列分别采用归并排序；</li>
<li>将两个排序好的子序列合并成一个最终的排序序列。</li>
</ul>
<h5 id="动态演示-4"><a href="#动态演示-4" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="http://chuxiaoyi.cn/media/editor/7_20190117175952107766.gif" alt="http://chuxiaoyi.cn/media/editor/7_20190117175952107766.gif"></p>
<h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/17 下午5:11</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : merge_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 归并排序，从小到大排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    归并排序，使用递归</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">if</span> length &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">    middle = length // <span class="number">2</span></span><br><span class="line">    left = merge_sort(li[:middle])</span><br><span class="line">    right = merge_sort(li[middle:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">left_li, right_li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并左右两个列表</span></span><br><span class="line"><span class="string">    :param left_li:</span></span><br><span class="line"><span class="string">    :param right_li:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> left_li <span class="keyword">and</span> right_li:</span><br><span class="line">        <span class="keyword">if</span> left_li[<span class="number">0</span>] &lt; right_li[<span class="number">0</span>]:</span><br><span class="line">            result.append(left_li.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right_li.pop(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    result.extend(left_li)</span><br><span class="line">    result.extend(right_li)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    li = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="built_in">print</span>(merge_sort(li))</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190117180230724.png" alt="在这里插入图片描述"></p>
<h3 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h3><p>快速排序（Quick Sort）由图灵奖获得者Tony Hoare发明，被列为20世纪十大算法之一。冒泡排序的升级版，交换排序的一种。快速排序的时间复杂度为O(nlog(n))。</p>
<p>快速排序算法的核心思想：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，然后分别对这两部分继续进行排序，以达到整个记录集合的排序目的。</p>
<h5 id="算法描述-5"><a href="#算法描述-5" class="headerlink" title="算法描述"></a>算法描述</h5><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<h5 id="动态演示-5"><a href="#动态演示-5" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="http://chuxiaoyi.cn/media/editor/9_20190117192549821306.gif" alt="http://chuxiaoyi.cn/media/editor/9_20190117192549821306.gif"></p>
<h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/17 下午6:55</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : quick_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 快速排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="keyword">from</span> util.tool <span class="keyword">import</span> caculate_time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.<span class="built_in">list</span> = li</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        交换元素，i，j表示下标</span></span><br><span class="line"><span class="string">        :param i:</span></span><br><span class="line"><span class="string">        :param j:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">list</span>[i], self.<span class="built_in">list</span>[j] = self.<span class="built_in">list</span>[j], self.<span class="built_in">list</span>[i]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @caculate_time</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        调用入口</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.qsort(<span class="number">0</span>, <span class="built_in">len</span>(self.<span class="built_in">list</span>) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">qsort</span>(<span class="params">self, low, high</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        递归调用</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> low &lt; high:</span><br><span class="line">            pivot_index = self.partition(low, high)</span><br><span class="line">            self.qsort(low, pivot_index - <span class="number">1</span>)</span><br><span class="line">            self.qsort(pivot_index + <span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">self, low, high</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在分区中选取一个基准元素（pivot），不断的移动游标，进行替换，使得左边为全部比他小的，右边为全部比他大的；</span></span><br><span class="line"><span class="string">        并且，这个pivot也变化位置，但是值不变</span></span><br><span class="line"><span class="string">        :param low:</span></span><br><span class="line"><span class="string">        :param high:</span></span><br><span class="line"><span class="string">        :return: pivot所在的下标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        li = self.<span class="built_in">list</span></span><br><span class="line">        pivot = self.<span class="built_in">list</span>[low]</span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> li[high] &gt; pivot:</span><br><span class="line">                high -= <span class="number">1</span></span><br><span class="line">            self.swap(low, high)</span><br><span class="line">            <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> li[low] &lt; pivot:</span><br><span class="line">                low += <span class="number">1</span></span><br><span class="line">            self.swap(low, high)</span><br><span class="line">        <span class="keyword">return</span> low</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    li = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">    ss = QuickSort(li)</span><br><span class="line">    ss.quick_sort()</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190117192855484.png" alt="在这里插入图片描述"></p>
<h3 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h3><p>堆排序在 top K 问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树 。</p>
<p><strong>二叉堆具有以下性质</strong>：</p>
<p>父节点的键值总是大于或等于（小于或等于）任何一个子节点的键值。<br>每个节点的左右子树都是一个二叉堆（都是最大堆或最小堆）。</p>
<h5 id="算法描述-6"><a href="#算法描述-6" class="headerlink" title="算法描述"></a>算法描述</h5><ul>
<li><p><strong>构造最大堆（Build_Max_Heap）</strong>：若数组下标范围为0~n，考虑到单独一个元素是大根堆，则从下标n/2开始的元素均为大根堆。于是只要从n/2-1开始，向前依次构造大根堆，这样就能保证，构造到某个节点时，它的左右子树都已经是大根堆。</p>
</li>
<li><p><strong>堆排序（HeapSort）</strong>：由于堆是用数组模拟的。得到一个大根堆后，数组内部并不是有序的。因此需要将堆化数组有序化。思想是移除根节点，并做最大堆调整的递归运算。第一次将heap[0]与heap[n-1]交换，再对heap[0…n-2]做最大堆调整。第二次将heap[0]与heap[n-2]交换，再对heap[0…n-3]做最大堆调整。重复该操作直至heap[0]和heap[1]交换。由于每次都是将最大的数并入到后面的有序区间，故操作完后整个数组就是有序的了。</p>
</li>
<li><p><strong>最大堆调整（Max_Heapify）</strong>：该方法是提供给上述两个过程调用的。目的是将堆的末端子节点作调整，使得子节点永远小于父节点 。</p>
</li>
</ul>
<h5 id="动态演示-6"><a href="#动态演示-6" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="http://www.chuxiaoyi.cn/media/editor/2_20190121113614440245.gif" alt="http://www.chuxiaoyi.cn/media/editor/2_20190121113614440245.gif"></p>
<h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/18 下午2:48</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : heap_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 堆排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构造大根堆，堆排序</span></span><br><span class="line"><span class="string">    每次堆排序之后，都要进行最大根堆调整，使得堆顶为最大值</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    first = n // <span class="number">2</span> - <span class="number">1</span>  <span class="comment"># 最后一个非叶子节点</span></span><br><span class="line">    <span class="comment"># 第一次构造大根堆</span></span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> <span class="built_in">range</span>(first, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        max_heapify(arr, start, n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> end <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        arr[end], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[end]</span><br><span class="line">        max_heapify(arr, <span class="number">0</span>, end - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_heapify</span>(<span class="params">arr, start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    最大根堆调整</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :param start: 表示非叶子节点（也就是每个小分支的根节点）</span></span><br><span class="line"><span class="string">    :param end: 边界下标</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    root = start</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        child = root * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> child &gt; end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> child + <span class="number">1</span> &lt;= end <span class="keyword">and</span> arr[child] &lt; arr[child + <span class="number">1</span>]:</span><br><span class="line">            child = child + <span class="number">1</span>  <span class="comment"># 保证child为最大的子节点</span></span><br><span class="line">        <span class="keyword">if</span> arr[root] &lt; arr[child]:</span><br><span class="line">            arr[root], arr[child] = arr[child], arr[root]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    arr = [<span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(heap_sort(arr))</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190121113641271.png" alt="在这里插入图片描述"></p>
<h3 id="计数排序（Counting-Sort）"><a href="#计数排序（Counting-Sort）" class="headerlink" title="计数排序（Counting Sort）"></a>计数排序（Counting Sort）</h3><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p>
<h5 id="算法描述-7"><a href="#算法描述-7" class="headerlink" title="算法描述"></a>算法描述</h5><ul>
<li>找出待排序的数组中最大元素；</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li>
</ul>
<h5 id="动态演示-7"><a href="#动态演示-7" class="headerlink" title="动态演示"></a>动态演示</h5><p><img src="http://www.chuxiaoyi.cn/media/editor/3_20190121131026884154.gif" alt="http://www.chuxiaoyi.cn/media/editor/3_20190121131026884154.gif"></p>
<h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment">#       @Time    : 2019/1/21 上午11:56</span></span><br><span class="line"><span class="comment">#       @Author  : cxy =.= </span></span><br><span class="line"><span class="comment">#       @File    : counting_sort.py</span></span><br><span class="line"><span class="comment">#       @Software: PyCharm</span></span><br><span class="line"><span class="comment">#       @Desc    : 计数排序</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countring_sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过计算arr每个元素的次数进行排序</span></span><br><span class="line"><span class="string">    :param arr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    max_value = <span class="built_in">max</span>(arr)</span><br><span class="line">    bucket_length = max_value + <span class="number">1</span>   <span class="comment"># 桶的个数</span></span><br><span class="line">    bucket = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bucket_length)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 桶的下标对应arr中的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        bucket[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(bucket_length):</span><br><span class="line">        <span class="keyword">while</span> bucket[j] &gt; <span class="number">0</span>:</span><br><span class="line">            arr[index] = j</span><br><span class="line">            bucket[j] -= <span class="number">1</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    arr = [<span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(countring_sort(arr))</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://img-blog.csdnimg.cn/20190121131202835.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>算法 python 算法</tag>
      </tags>
  </entry>
  <entry>
    <title>日常遇到的问题</title>
    <url>/2018/08/03/%E6%97%A5%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li><ul>
<li><ul>
<li><a href="#1-%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%99%BE%E5%88%86%E6%95%B0">1. 小数转换为百分数</a></li>
<li><a href="#2-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C">2. 文件操作</a></li>
<li><a href="#3-%E8%AF%BB%E5%86%99csv%E6%96%87%E4%BB%B6">3. 读写csv文件</a></li>
<li><a href="#4-python36%E8%AF%BBini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4. python3.6读ini配置文件</a></li>
<li><a href="#5-django%E4%B9%8B%E5%85%81%E8%AE%B8%E5%A4%96%E9%83%A8%E6%9C%BA%E5%99%A8%E8%AE%BF%E9%97%AE%E6%9C%AC%E6%9C%BA%E6%9C%8D%E5%8A%A1">5. django之允许外部机器访问本机服务</a></li>
<li><a href="#6-python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C%E4%B8%AD%E8%BF%9B%E7%A8%8B%E6%B1%A0pool%E7%9A%84%E5%BA%94%E7%94%A8">6. Python多进程并发操作中进程池Pool的应用</a></li>
<li><a href="#7-%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8queue%E9%98%9F%E5%88%97">7. 进程池使用queue队列</a></li>
<li><a href="#8-operatoritemgetter">8. operator.itemgetter()</a></li>
<li><a href="#9-sorted%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0">9. sorted()内建函数</a></li>
<li><a href="#10-python27-%E8%A7%A3%E5%86%B3unicodedecodeerror-ascii-codec-cant-decode-byte-0xe5-in-position-108-ordinal-not-in-range128">10. python2.7 解决UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe5 in position 108: ordinal not in range(128。。。。</a></li>
<li><a href="#11-%E5%87%A0%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84python%E5%87%BD%E6%95%B0-%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF-%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88">11. 几个有用的python函数 (笛卡尔积, 排列, 组合)</a></li>
<li><a href="#12-python%E6%B1%82%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%92%8C">12. python求两个链表组成的数字的和</a></li>
<li><a href="#13-python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0divmoda-b">13. python内置函数——divmod(a, b)</a></li>
<li><a href="#14-python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0enumeratesequence-start0">14. python内置函数——enumerate(sequence, start=0)</a></li>
<li><a href="#15-python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0filterfunction-iterable">15. python内置函数——filter(function, iterable)</a></li>
<li><a href="#16-datetime">16. datetime</a></li>
<li><a href="#17-%E9%92%88%E5%AF%B9could-not-install-packages-due-to-an-environmenterror-errno-13-permission-denied-librarypython27site-packagesvine%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F">17. 针对“could not install packages due to an EnvironmentError: [Errno 13] Permission denied: ‘/Library/Python/2.7/site-packages/vine’”的解决方式</a></li>
<li><a href="#18-%E5%AD%97%E5%85%B8%E8%BD%ACxml">18. 字典转xml</a></li>
<li><a href="#19-or%E5%92%8Cand">19. or和and</a></li>
<li><a href="#20-xmltodict%E7%9A%84%E5%9D%91">20. xmltodict的坑</a></li>
<li><a href="#21-%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F%E4%B8%AD%E7%9A%84if-else">21. 列表生成式中的if-else</a></li>
<li><a href="#22-%E9%92%88%E5%AF%B9mysql-said-authentication-plugin-cachingsha2password-cannot-be-loaded-dlopenusrlocal%E7%9A%84%E9%97%AE%E9%A2%98">22. 针对MySQL said: Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(/usr/local/…的问题</a></li>
<li><a href="#23-django-model%E8%8E%B7%E5%8F%96%E7%89%B9%E5%AE%9A%E5%AD%97%E6%AE%B5">23. django model获取特定字段</a></li>
<li><a href="#24-connection-reset-by-peer%E7%9A%84%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0">24. Connection reset by peer的常见原因</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<span id="more"></span>

<h3 id="1-小数转换为百分数"><a href="#1-小数转换为百分数" class="headerlink" title="1. 小数转换为百分数"></a>1. 小数转换为百分数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_percent</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%.2f%%&quot;</span> % (num * <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2. 文件操作"></a>2. 文件操作</h3><ul>
<li><p>查看当前目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path </span><br><span class="line">d = path.dirname(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __file__ 为当前文件, 若果在ide中运行此行会报错,可改为  #d = path.dirname(&#x27;.&#x27;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>获得单个目录节点的子节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.listdir(rootdir)</span><br></pre></td></tr></table></figure></li>
<li><p>获取当前目录下的信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> parent,dirnames,filenames <span class="keyword">in</span> os.walk(rootdir):   <span class="comment">#三个参数：分别返回1.父目录 2.所有文件夹名字（不含路径）3.所有文件名字</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> dirname <span class="keyword">in</span>  dirnames:                       <span class="comment">#输出文件夹信息</span></span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;parent is:&quot;</span> + parent</span><br><span class="line">      <span class="built_in">print</span>  <span class="string">&quot;dirname is&quot;</span> + dirname</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:                        <span class="comment">#输出文件信息</span></span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;parent is:&quot;</span> + parent</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;filename is:&quot;</span> + filename</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;the full name of the file is:&quot;</span> + os.path.join(parent,filename) <span class="comment">#输出文件路径信息</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-读写csv文件"><a href="#3-读写csv文件" class="headerlink" title="3. 读写csv文件"></a>3. 读写csv文件</h3><ul>
<li><p>写入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer_to_csv</span>(<span class="params">info</span>):</span></span><br><span class="line">  result_csv = <span class="built_in">open</span>(<span class="string">&#x27;result.csv&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  writer = csv.writer(result_csv)</span><br><span class="line">  writer.writerow(info)</span><br><span class="line">  result_csv.close()</span><br></pre></td></tr></table></figure></li>
<li><p>读出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv</span>(<span class="params">file</span>):</span></span><br><span class="line">  csv_file = <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">  reader = csv.reader(csv_file)</span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> reader:</span><br><span class="line">      <span class="keyword">yield</span> item[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-python3-6读ini配置文件"><a href="#4-python3-6读ini配置文件" class="headerlink" title="4. python3.6读ini配置文件"></a>4. python3.6读ini配置文件</h3><p><strong>说明</strong>：python2.7-3.5使用的是<code>ConfigParser</code>模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br></pre></td></tr></table></figure>

<h3 id="5-django之允许外部机器访问本机服务"><a href="#5-django之允许外部机器访问本机服务" class="headerlink" title="5. django之允许外部机器访问本机服务"></a>5. django之允许外部机器访问本机服务</h3><ol>
<li><p>开启django服务时，使用0.0.0.0:端口启动，例：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./manage.py runserver 0.0.0.0:9999</span><br></pre></td></tr></table></figure></li>
<li><p>修改setting文件中的ALLOWED_HOSTS</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS = [&#x27;*&#x27;, ]</span><br></pre></td></tr></table></figure>

<p> 注意：<code>[&#39;*&#39;, ]</code>一定要加<code>,</code></p>
</li>
</ol>
<h3 id="6-Python多进程并发操作中进程池Pool的应用"><a href="#6-Python多进程并发操作中进程池Pool的应用" class="headerlink" title="6. Python多进程并发操作中进程池Pool的应用"></a>6. Python多进程并发操作中进程池Pool的应用</h3><ul>
<li><p><strong>说明：</strong></p>
<blockquote>
<ol>
<li> 使用<code>Pool</code>类，需要通过<code>from multiprocessing import Pool</code>导入池</li>
<li> join方法必须在close或terminate之后使用。</li>
</ol>
</blockquote>
</li>
<li><p><strong>apply_async()</strong></p>
<ul>
<li><p>函数原型：</p>
<p><code>apply_async(func[, args=()[, kwds=&#123;&#125;[,callback=None]]])</code>，该方法非阻塞且支持结果返回进行回调。</p>
</li>
<li><p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">fn</span>):</span></span><br><span class="line"><span class="comment"># fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> fn * fn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">testFL = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;顺序执行:&#x27;</span>)  <span class="comment"># 顺序执行(也就是串行执行，单进程)</span></span><br><span class="line">s = time.time()</span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">    <span class="built_in">print</span>(run(fn))</span><br><span class="line"></span><br><span class="line">e1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;顺序执行时间：&quot;</span>, <span class="built_in">int</span>(e1 - s))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;多进程执行:&#x27;</span>)  <span class="comment"># 创建多个进程，并行执行</span></span><br><span class="line">pool = Pool(<span class="number">5</span>)  <span class="comment"># 创建拥有5个进程数量的进程池</span></span><br><span class="line"><span class="comment"># testFL:要处理的数据列表，run：处理testFL列表中数据的函数</span></span><br><span class="line"><span class="comment"># rl = pool.map(run, testFL)</span></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">    pool.apply_async(run, args=(fn, ))</span><br><span class="line">pool.close()  <span class="comment"># 关闭进程池，不再接受新的进程</span></span><br><span class="line">pool.join()  <span class="comment"># 主进程阻塞等待子进程的退出</span></span><br><span class="line">e2 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;并行执行时间：&quot;</span>, <span class="built_in">int</span>(e2 - e1))</span><br><span class="line"><span class="comment"># print(rl)</span></span><br></pre></td></tr></table></figure></li>
<li><p>响应：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">顺序执行:</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">25</span><br><span class="line">36</span><br><span class="line">顺序执行时间： 6</span><br><span class="line">多进程执行:</span><br><span class="line">并行执行时间： 2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>map()</strong></p>
<ul>
<li><p>函数原型：</p>
<p><code>map(func, iterable[, chunksize=None])</code>，Pool类中的map方法，与内置的map函数用法行为基本一致，它会使进程阻塞直到返回结果。<br>注意：虽然第二个参数是一个迭代器，但在实际使用中，必须在整个队列都就绪后，程序才会运行子进程。</p>
</li>
<li><p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">fn</span>):</span></span><br><span class="line"><span class="comment"># fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> fn * fn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">testFL = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;顺序执行:&#x27;</span>)  <span class="comment"># 顺序执行(也就是串行执行，单进程)</span></span><br><span class="line">s = time.time()</span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">    <span class="built_in">print</span>(run(fn))</span><br><span class="line"></span><br><span class="line">e1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;顺序执行时间：&quot;</span>, <span class="built_in">int</span>(e1 - s))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;多进程执行:&#x27;</span>)  <span class="comment"># 创建多个进程，并行执行</span></span><br><span class="line">pool = Pool(<span class="number">5</span>)  <span class="comment"># 创建拥有5个进程数量的进程池</span></span><br><span class="line"><span class="comment"># testFL:要处理的数据列表，run：处理testFL列表中数据的函数</span></span><br><span class="line">rl = pool.<span class="built_in">map</span>(run, testFL)</span><br><span class="line"><span class="comment"># for fn in testFL:</span></span><br><span class="line"><span class="comment">#     pool.apply_async(run, args=(fn, ))</span></span><br><span class="line">pool.close()  <span class="comment"># 关闭进程池，不再接受新的进程</span></span><br><span class="line">pool.join()  <span class="comment"># 主进程阻塞等待子进程的退出</span></span><br><span class="line">e2 = time.time()</span><br><span class="line"><span class="built_in">print</span>(rl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;并行执行时间：&quot;</span>, <span class="built_in">int</span>(e2 - e1))</span><br></pre></td></tr></table></figure></li>
<li><p>响应：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">顺序执行:</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">25</span><br><span class="line">36</span><br><span class="line">顺序执行时间： 6</span><br><span class="line">多进程执行:</span><br><span class="line">[1, 4, 9, 16, 25, 36]</span><br><span class="line">并行执行时间： 2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="7-进程池使用queue队列"><a href="#7-进程池使用queue队列" class="headerlink" title="7. 进程池使用queue队列"></a>7. 进程池使用queue队列</h3><p>注意：进程池使用队列，应使用<code>Manager</code>对象的Queue</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">qid_queue = Manager().Queue()</span><br></pre></td></tr></table></figure>

<h3 id="8-operator-itemgetter"><a href="#8-operator-itemgetter" class="headerlink" title="8. operator.itemgetter()"></a>8. operator.itemgetter()</h3><p>返回一个可调用对象，该对象使用被操作元的**<code>__getitem__()</code><strong>方法从其被操作元获取</strong>项**。通过该函数作用到对象上才能获取值。如果指定了多个项，则返回查找值的一组。例如:</p>
<blockquote>
<ul>
<li>在f = itemgetter(2)之后，调用f(r)返回r[2]。</li>
<li>在g = itemgetter(2,5,3)之后，调用g(r)返回(r[2]， r[5]， r[3])。</li>
</ul>
</blockquote>
<p>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">itemgetter</span>(<span class="params">*items</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) == <span class="number">1</span>:</span><br><span class="line">        item = items[<span class="number">0</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">obj</span>):</span></span><br><span class="line">            <span class="keyword">return</span> obj[item]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">obj</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">tuple</span>(obj[item] <span class="keyword">for</span> item <span class="keyword">in</span> items)</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure>

<p>项可以是被操作元的**<code>__getitem__()</code>**方法所接受的任何类型。字典接受各种哈希值，列表、元组和字符串接受索引或片:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; itemgetter(1)(&#x27;ABCDEFG&#x27;)</span><br><span class="line">&#x27;B&#x27;</span><br><span class="line">&gt;&gt;&gt; itemgetter(1,3,5)(&#x27;ABCDEFG&#x27;)</span><br><span class="line">(&#x27;B&#x27;, &#x27;D&#x27;, &#x27;F&#x27;)</span><br><span class="line">&gt;&gt;&gt; itemgetter(slice(2,None))(&#x27;ABCDEFG&#x27;)</span><br><span class="line">&#x27;CDEFG&#x27;</span><br></pre></td></tr></table></figure>

<p>在版本2.5中更改:添加了对多个项目提取的支持。<br>使用itemgetter()从元组记录中检索特定字段的示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; inventory = [(&#x27;apple&#x27;, 3), (&#x27;banana&#x27;, 2), (&#x27;pear&#x27;, 5), (&#x27;orange&#x27;, 1)]</span><br><span class="line">&gt;&gt;&gt; getcount = itemgetter(1)</span><br><span class="line">&gt;&gt;&gt; map(getcount, inventory)</span><br><span class="line">[3, 2, 5, 1]</span><br><span class="line">&gt;&gt;&gt; sorted(inventory, key=getcount)</span><br><span class="line">[(&#x27;orange&#x27;, 1), (&#x27;banana&#x27;, 2), (&#x27;apple&#x27;, 3), (&#x27;pear&#x27;, 5)]</span><br></pre></td></tr></table></figure>

<h3 id="9-sorted-内建函数"><a href="#9-sorted-内建函数" class="headerlink" title="9. sorted()内建函数"></a>9. sorted()内建函数</h3><p><strong>sort 与 sorted 区别：</strong></p>
<blockquote>
<ul>
<li>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</li>
<li>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</li>
</ul>
</blockquote>
<p><strong>sorted 语法：</strong></p>
<blockquote>
<p>sorted(iterable[, cmp[, key[, reverse]]])</p>
</blockquote>
<p>参数说明：</p>
<blockquote>
<ul>
<li>iterable – 可迭代对象。</li>
<li>cmp – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</li>
<li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>
<li>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</li>
</ul>
</blockquote>
<p><strong>例子：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [5,7,6,3,4,1,2]</span><br><span class="line">&gt;&gt;&gt; b = sorted(a)       # 保留原列表</span><br><span class="line">&gt;&gt;&gt; a </span><br><span class="line">[5, 7, 6, 3, 4, 1, 2]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L=[(&#x27;b&#x27;,2),(&#x27;a&#x27;,1),(&#x27;c&#x27;,3),(&#x27;d&#x27;,4)]</span><br><span class="line">&gt;&gt;&gt; sorted(L, cmp=lambda x,y:cmp(x[1],y[1]))   # 利用cmp函数</span><br><span class="line">[(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2), (&#x27;c&#x27;, 3), (&#x27;d&#x27;, 4)]</span><br><span class="line">&gt;&gt;&gt; sorted(L, key=lambda x:x[1])               # 利用key</span><br><span class="line">[(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2), (&#x27;c&#x27;, 3), (&#x27;d&#x27;, 4)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; students = [(&#x27;john&#x27;, &#x27;A&#x27;, 15), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;dave&#x27;, &#x27;B&#x27;, 10)]</span><br><span class="line">&gt;&gt;&gt; sorted(students, key=lambda s: s[2])            # 按年龄排序</span><br><span class="line">[(&#x27;dave&#x27;, &#x27;B&#x27;, 10), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;john&#x27;, &#x27;A&#x27;, 15)]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; sorted(students, key=lambda s: s[2], reverse=True)       # 按降序</span><br><span class="line">[(&#x27;john&#x27;, &#x27;A&#x27;, 15), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;dave&#x27;, &#x27;B&#x27;, 10)]</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：建议使用key，而不是cmp，因为key更节省内存空间</p>
<h3 id="10-python2-7-解决UnicodeDecodeError-‘ascii’-codec-can’t-decode-byte-0xe5-in-position-108-ordinal-not-in-range-128。。。。"><a href="#10-python2-7-解决UnicodeDecodeError-‘ascii’-codec-can’t-decode-byte-0xe5-in-position-108-ordinal-not-in-range-128。。。。" class="headerlink" title="10. python2.7 解决UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe5 in position 108: ordinal not in range(128。。。。"></a>10. python2.7 解决UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe5 in position 108: ordinal not in range(128。。。。</h3><p><strong>出现错误原因</strong>：</p>
<blockquote>
<p>python的str默认是ascii编码，和unicode编码冲突</p>
</blockquote>
<p><strong>解决方案</strong>：</p>
<blockquote>
<p>import sys<br>reload(sys)<br>sys.setdefaultencoding(‘utf8’)</p>
</blockquote>
<h3 id="11-几个有用的python函数-笛卡尔积-排列-组合"><a href="#11-几个有用的python函数-笛卡尔积-排列-组合" class="headerlink" title="11. 几个有用的python函数 (笛卡尔积, 排列, 组合)"></a>11. 几个有用的python函数 (笛卡尔积, 排列, 组合)</h3><blockquote>
<ul>
<li><strong>product</strong> 笛卡尔积</li>
<li><strong>permutations</strong> 排列</li>
<li><strong>combinations</strong> 组合,没有重复</li>
<li><strong>combinations_with_replacement</strong> 组合,有重复</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import itertools</span><br><span class="line">&gt;&gt;&gt; for i in itertools.product(&#x27;ABCD&#x27;, r=2):</span><br><span class="line">...     print i,</span><br><span class="line">... </span><br><span class="line">(&#x27;A&#x27;, &#x27;A&#x27;) (&#x27;A&#x27;, &#x27;B&#x27;) (&#x27;A&#x27;, &#x27;C&#x27;) (&#x27;A&#x27;, &#x27;D&#x27;) (&#x27;B&#x27;, &#x27;A&#x27;) (&#x27;B&#x27;, &#x27;B&#x27;) (&#x27;B&#x27;, &#x27;C&#x27;) (&#x27;B&#x27;, &#x27;D&#x27;) (&#x27;C&#x27;, &#x27;A&#x27;) (&#x27;C&#x27;, &#x27;B&#x27;) (&#x27;C&#x27;, &#x27;C&#x27;) (&#x27;C&#x27;, &#x27;D&#x27;) (&#x27;D&#x27;, &#x27;A&#x27;) (&#x27;D&#x27;, &#x27;B&#x27;) (&#x27;D&#x27;, &#x27;C&#x27;) (&#x27;D&#x27;, &#x27;D&#x27;)</span><br><span class="line">&gt;&gt;&gt; for i in itertools.permutations(&#x27;ABCD&#x27;, 2):</span><br><span class="line">...     print i,</span><br><span class="line">... </span><br><span class="line">(&#x27;A&#x27;, &#x27;B&#x27;) (&#x27;A&#x27;, &#x27;C&#x27;) (&#x27;A&#x27;, &#x27;D&#x27;) (&#x27;B&#x27;, &#x27;A&#x27;) (&#x27;B&#x27;, &#x27;C&#x27;) (&#x27;B&#x27;, &#x27;D&#x27;) (&#x27;C&#x27;, &#x27;A&#x27;) (&#x27;C&#x27;, &#x27;B&#x27;) (&#x27;C&#x27;, &#x27;D&#x27;) (&#x27;D&#x27;, &#x27;A&#x27;) (&#x27;D&#x27;, &#x27;B&#x27;) (&#x27;D&#x27;, &#x27;C&#x27;)</span><br><span class="line">&gt;&gt;&gt; for i in itertools.combinations(&#x27;ABCD&#x27;, 2):</span><br><span class="line">...     print i,</span><br><span class="line">... </span><br><span class="line">(&#x27;A&#x27;, &#x27;B&#x27;) (&#x27;A&#x27;, &#x27;C&#x27;) (&#x27;A&#x27;, &#x27;D&#x27;) (&#x27;B&#x27;, &#x27;C&#x27;) (&#x27;B&#x27;, &#x27;D&#x27;) (&#x27;C&#x27;, &#x27;D&#x27;)</span><br><span class="line">&gt;&gt;&gt; for i in itertools.combinations_with_replacement(&#x27;ABCD&#x27;, 2):</span><br><span class="line">...     print i,</span><br><span class="line">... </span><br><span class="line">(&#x27;A&#x27;, &#x27;A&#x27;) (&#x27;A&#x27;, &#x27;B&#x27;) (&#x27;A&#x27;, &#x27;C&#x27;) (&#x27;A&#x27;, &#x27;D&#x27;) (&#x27;B&#x27;, &#x27;B&#x27;) (&#x27;B&#x27;, &#x27;C&#x27;) (&#x27;B&#x27;, &#x27;D&#x27;) (&#x27;C&#x27;, &#x27;C&#x27;) (&#x27;C&#x27;, &#x27;D&#x27;) (&#x27;D&#x27;, &#x27;D&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="12-python求两个链表组成的数字的和"><a href="#12-python求两个链表组成的数字的和" class="headerlink" title="12. python求两个链表组成的数字的和"></a>12. python求两个链表组成的数字的和</h3><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。<br>你可以假设除了数字 0 之外，这两个数字都不会以零开头<br>示例：</p>
<blockquote>
<p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p>
</blockquote>
<p><strong>代码实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        val_sum = l1.val + l2.val</span><br><span class="line">        list_node = ListNode(val_sum % <span class="number">10</span>)</span><br><span class="line">        a = val_sum // <span class="number">10</span></span><br><span class="line">        node = list_node</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">and</span> <span class="keyword">not</span> l2:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> l1:</span><br><span class="line">                l1_val = <span class="number">0</span></span><br><span class="line">                l2_val = l2.val</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> l2:</span><br><span class="line">                l2_val = <span class="number">0</span></span><br><span class="line">                l1_val = l1.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l1_val = l1.val</span><br><span class="line">                l2_val = l2.val</span><br><span class="line">            val_sum = l1_val + l2_val + a</span><br><span class="line">            temp_node = ListNode(val_sum % <span class="number">10</span>)</span><br><span class="line">            node.<span class="built_in">next</span> = temp_node</span><br><span class="line">            node = temp_node</span><br><span class="line">            a = val_sum // <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> a != <span class="number">0</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = ListNode(a)</span><br><span class="line">        <span class="keyword">return</span> list_node</span><br></pre></td></tr></table></figure>

<h3 id="13-python内置函数——divmod-a-b"><a href="#13-python内置函数——divmod-a-b" class="headerlink" title="13. python内置函数——divmod(a, b)"></a>13. python内置函数——divmod(a, b)</h3><ul>
<li><p>v2.7</p>
<blockquote>
<p>实际上是算a除以b的商和余数，返回(商，余数)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">divmod(1,2)</span><br><span class="line">(0, 1)</span><br><span class="line">divmod(5, 1)</span><br><span class="line">(5, 0)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-python内置函数——enumerate-sequence-start-0"><a href="#14-python内置函数——enumerate-sequence-start-0" class="headerlink" title="14. python内置函数——enumerate(sequence, start=0)"></a>14. python内置函数——enumerate(sequence, start=0)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; seasons = [&#x27;Spring&#x27;, &#x27;Summer&#x27;, &#x27;Fall&#x27;, &#x27;Winter&#x27;]</span><br><span class="line">&gt;&gt;&gt; list(enumerate(seasons))</span><br><span class="line">[(0, &#x27;Spring&#x27;), (1, &#x27;Summer&#x27;), (2, &#x27;Fall&#x27;), (3, &#x27;Winter&#x27;)]</span><br><span class="line">&gt;&gt;&gt; list(enumerate(seasons, start=1))</span><br><span class="line">[(1, &#x27;Spring&#x27;), (2, &#x27;Summer&#x27;), (3, &#x27;Fall&#x27;), (4, &#x27;Winter&#x27;)]</span><br></pre></td></tr></table></figure>

<h3 id="15-python内置函数——filter-function-iterable"><a href="#15-python内置函数——filter-function-iterable" class="headerlink" title="15. python内置函数——filter(function, iterable)"></a>15. python内置函数——filter(function, iterable)</h3><ul>
<li><p>v2.7</p>
<ul>
<li><p>如果function是None，就等价于：</p>
<blockquote>
<p>[item for item in iterable if item]</p>
</blockquote>
</li>
<li><p>如果function不是None，就等价于：</p>
<blockquote>
<p>[item for item in iterable if function(item)]</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="16-datetime"><a href="#16-datetime" class="headerlink" title="16. datetime"></a>16. datetime</h3><p>datetime模块用于是date和time模块的合集，datetime有两个常量，MAXYEAR和MINYEAR，分别是9999和1.</p>
<blockquote>
<p>datetime模块定义了5个类，分别是<br>1. datetime.date：表示日期的类<br>2. datetime.datetime：表示日期时间的类<br>3. datetime.time：表示时间的类<br>4. datetime.timedelta：表示时间间隔，即两个时间点的间隔<br>5. datetime.tzinfo：时区的相关信息</p>
</blockquote>
<ul>
<li><p><strong>datetime.date类</strong><br>date类有三个参数,datetime.date(year,month,day)，返回<strong>datetime.date(2018, 7, 30)</strong></p>
<ul>
<li><p><strong>datetime.date.ctime()</strong>,返回格式如 Sun Apr 16 00:00:00 2017</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.date.ctime(datetime.date(2018, 7, 30))</span><br><span class="line">&#x27;Mon Jul 30 00:00:00 2018&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>datetime.date.fromtimestamp(timestamp)</strong>,根据给定的时间戮，返回一个date对象；**datetime.date.today()**作用相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.date.today()</span><br><span class="line">datetime.date(2018, 7, 30)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>datetime.date.isocalendar()</strong>:返回格式如(year，month，day)的元组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.date.isocalendar(datetime.date(2018, 7, 30))</span><br><span class="line">(2018, 31, 1)</span><br></pre></td></tr></table></figure></li>
<li><p>**datetime.date.isoformat()**：返回格式如YYYY-MM-DD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.date.isoformat(datetime.date(2018, 7, 30))</span><br><span class="line">&#x27;2018-07-30&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>**datetime.date.isoweekday()**：返回给定日期的星期（0-6），星期一=0，星期日=6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.date.isoweekday(datetime.date.today())</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li>
<li><p>**datetime.date.replace(year,month,day)**：替换给定日期，但不改变原日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = datetime.date.today()</span><br><span class="line">&gt;&gt;&gt;a.replace(day=26)</span><br><span class="line">datetime.date(2018, 7, 26)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>datetime.date.strftime(format)</strong>:把日期时间按照给定的format进行格式化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.date.strftime(datetime.date.today(), &#x27;%Y-%m-%d&#x27;)</span><br><span class="line">&#x27;2018-07-30&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = datetime.date.today()</span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line">datetime.date(2018, 7, 30)</span><br><span class="line">&gt;&gt;&gt;a.strftime(&#x27;%Y-%m-%d&#x27;)</span><br><span class="line">&#x27;2018-07-30&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>**datetime.date.timetuple()**：返回日期对应的time.struct_time对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = datetime.date.today()</span><br><span class="line">&gt;&gt;&gt;datetime.date.timetuple(a)</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=7, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=211, tm_isdst=-1)</span><br></pre></td></tr></table></figure></li>
<li><p>**datetime.date.weekday()**：返回日期的星期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = datetime.date.today()</span><br><span class="line">&gt;&gt;&gt;datetime.date.weekday(a)</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;a.weekday()</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>datetime.time类</strong><br>time类有5个参数，datetime.time(hour,minute,second,microsecond,tzoninfo),返回08:29:30</p>
<ul>
<li><p><strong>datetime.time.replace()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.time.replace(datetime.time(), hour=1)</span><br><span class="line">datetime.time(1, 0)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>datetime.time.strftime(format)</strong>:按照format格式返回时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.time.strftime(datetime.time(2,3), &quot;%H:%M&quot;)</span><br><span class="line">&#x27;02:03&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>**datetime.time.tzname()**：返回时区名字</p>
</li>
<li><p>**datetime.time.utcoffset()**：返回时区的时间偏移量</p>
</li>
</ul>
</li>
<li><p><strong>datetime.datetime类</strong><br>datetime类有很多参数，datetime(year, month, day[, hour[, minute[, second[,microsecond[,tzinfo]]]]])，返回年月日，时分秒</p>
<ul>
<li><p><strong>datetime.datetime.ctime()</strong></p>
</li>
<li><p>**datetime.datetime.now().date()**：返回当前日期时间的日期部分</p>
</li>
<li><p>**datetime.datetime.now().time()**：返回当前日期时间的时间部分</p>
</li>
<li><p><strong>datetime.datetime.fromtimestamp()</strong></p>
</li>
<li><p>**datetime.datetime.now()**：返回当前系统时间</p>
</li>
<li><p><strong>datetime.datetime.replace()</strong></p>
</li>
<li><p>**datetime.datetime.strftime()**：由日期格式转化为字符串格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.datetime.now().strftime(&#x27;%b-%d-%Y %H:%M:%S&#x27;)</span><br><span class="line">&#x27;Apr-16-2017 21:01:35&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>datetime.datetime.strptime()</strong>:由字符串格式转化为日期格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.datetime.strptime(&#x27;Apr-16-2017 21:01:35&#x27;, &#x27;%b-%d-%Y %H:%M:%S&#x27;)</span><br><span class="line">2017-04-16 21:01:35</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>datetime.timedelta类</strong><br>datetime.datetime.timedelta用于计算两个日期之间的差值，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a=datetime.datetime.now()</span><br><span class="line">&gt;&gt;&gt; b=datetime.datetime.now()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime.datetime(2017, 4, 16, 21, 21, 20, 871000)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">datetime.datetime(2017, 4, 16, 21, 21, 29, 603000)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b-a</span><br><span class="line">datetime.timedelta(0, 8, 732000)</span><br><span class="line">&gt;&gt;&gt; (b-a).seconds</span><br><span class="line">8</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">time1 = datetime.datetime(2016, 10, 20)</span><br><span class="line">time2 = datetime.datetime(2015, 11, 2)</span><br><span class="line">&quot;&quot;&quot;计算天数差值&quot;&quot;&quot;</span><br><span class="line">print(time1-time2).days</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;计算两个日期之间相隔的秒数&quot;&quot;&quot;</span><br><span class="line">print (time1-time2).total_seconds()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="17-针对“could-not-install-packages-due-to-an-EnvironmentError-Errno-13-Permission-denied-‘-Library-Python-2-7-site-packages-vine’”的解决方式"><a href="#17-针对“could-not-install-packages-due-to-an-EnvironmentError-Errno-13-Permission-denied-‘-Library-Python-2-7-site-packages-vine’”的解决方式" class="headerlink" title="17. 针对“could not install packages due to an EnvironmentError: [Errno 13] Permission denied: ‘/Library/Python/2.7/site-packages/vine’”的解决方式"></a>17. 针对“could not install packages due to an EnvironmentError: [Errno 13] Permission denied: ‘/Library/Python/2.7/site-packages/vine’”的解决方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --user flask</span><br></pre></td></tr></table></figure>

<p>在install后加<strong>–user</strong></p>
<h3 id="18-字典转xml"><a href="#18-字典转xml" class="headerlink" title="18. 字典转xml"></a>18. 字典转xml</h3><ul>
<li><p>v2.7<br>dicttoxml会自动在头部添加<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</code><br>并通过参数设置xml的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import dicttoxml</span><br><span class="line">dicttoxml.dicttoxml(self.post_data_dict, root=True, custom_root=&quot;request&quot;, attr_type=False)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-or和and"><a href="#19-or和and" class="headerlink" title="19. or和and"></a>19. or和and</h3><p>如果用or，应该把为true的写在or前，减小运算时间；<br>如果用and，应该把false的写在and前</p>
<h3 id="20-xmltodict的坑"><a href="#20-xmltodict的坑" class="headerlink" title="20. xmltodict的坑"></a>20. xmltodict的坑</h3><ul>
<li>如果xml中在同一级有相同元素，就会把相同元素变成列表；如果没有相同元素，那么就把该元素变为字典</li>
<li>对于xml中为空的情况，xmltodict会自动将值变为<code>None</code></li>
</ul>
<h3 id="21-列表生成式中的if-else"><a href="#21-列表生成式中的if-else" class="headerlink" title="21. 列表生成式中的if-else"></a>21. 列表生成式中的if-else</h3><ul>
<li><p>只有if</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[a for a in a_list if a==1]</span><br></pre></td></tr></table></figure></li>
<li><p>if-else</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[a if a==1 else a-1 for a in a_list]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="22-针对MySQL-said-Authentication-plugin-‘caching-sha2-password’-cannot-be-loaded-dlopen-usr-local-…的问题"><a href="#22-针对MySQL-said-Authentication-plugin-‘caching-sha2-password’-cannot-be-loaded-dlopen-usr-local-…的问题" class="headerlink" title="22. 针对MySQL said: Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(/usr/local/…的问题"></a>22. 针对MySQL said: Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(/usr/local/…的问题</h3><p>在使用MySQL Workbench连接本地数据库的时候，出现了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL said: Authentication plugin &#x27;caching_sha2_password&#x27; cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found</span><br></pre></td></tr></table></figure>

<p>这是因为在链接数据库时不能加载‘caching_sha2_password’这个插件，也就是不能对身份验证。</p>
<p>解决方案是：<br>1. 打开系统偏好设置，找到mysql，点击Initialize Database。<br>2. 输入你的新密码，记住这个密码，用于后期链接数据库的登陆使用。<br>3. 选择‘Use legacy password‘。<br>4. 重启mysql服务。<br>这样在连接就没有问题了<br><img src="http://static.zybuluo.com/chuxiaoyi/zq7tgu3d2ygiplckpf8k0y2a/image_1cktk6n6bvdc1210o2jeotrnm9.png" alt="image_1cktk6n6bvdc1210o2jeotrnm9.png-380.8kB"></p>
<h3 id="23-django-model获取特定字段"><a href="#23-django-model获取特定字段" class="headerlink" title="23. django model获取特定字段"></a>23. django model获取特定字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comment_list = Comment.objects.all()[:5].only(&#x27;post&#x27;, &#x27;text&#x27;)   # 只获取特定字段</span><br></pre></td></tr></table></figure>

<h3 id="24-Connection-reset-by-peer的常见原因"><a href="#24-Connection-reset-by-peer的常见原因" class="headerlink" title="24. Connection reset by peer的常见原因"></a>24. Connection reset by peer的常见原因</h3><p>Connection reset by peer: socket write error错误分析：</p>
<blockquote>
<p>常出现的Connection reset by peer: 原因可能是多方面的，不过更常见的原因是：<br>①：服务器的并发连接数超过了其承载量，服务器会将其中一些连接Down掉；<br>②：客户关掉了浏览器，而服务器还在给客户端发送数据；<br>③：浏览器端按了Stop</p>
</blockquote>
<p>通常原因为：远程主机上对等方应用程序突然停止运行，或远程主机重新启动，或远程主机在远程方套接字上使用了“强制”关闭 （参见setsockopt(SO_LINGER)）。另外，在一个或多个操作正在进行时，如果连接因“keep-alive”活动检测到一个失败而中 断，也可能导致此错误。此时，正在进行的操作以错误码WSAENETRESET失败返回，后续操作将失败返回错误码WSAECONNRESET。<br>但是如果频繁出现，就表示很 多客户端连接到Apache服务器的响应时间太长了，可能是网络的问题或者服务器性能问题。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
